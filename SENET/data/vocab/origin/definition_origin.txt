activation	validation procedure required program Product activation prevents unlimited free use copied replicated software Unactivated software refuse fully function whether authorized fully function Activation allows software stop blocking use An activation last forever time limit requiring renewal continued use In one form product activation refers method invented patented software application hardware serial number ID number specific product license generate unique installation ID This installation ID sent manufacturer verify authenticity product key ensure product key used multiple Alternatively software vendor sends user unique product serial number When user installs application request user enter product serial number check vendor system The application obtains license limit apply user time limit enabling product feature vendor system optionally also lock license user system Once activated license continues working user machine communication required vendor system Some activation system also support activation user system without Internet connection common approach exchange file Internet terminal introduced Brazilian version Small Business Edition sold market It broadened successful pilot release Brazilian market Microsoft rolled product activation flagship product All retail copy sold sold required user activate product via Internet However copy Office require activation April After success product activation system extended worldwide incorporated subsequent version Despite independently developing technology April jury found Microsoft willfully infringed Uniloc patent However September US District Judge William Smith vacated jury verdict ruled favour Microsoft This ruling subsequently overturned An early example product activation program Email System written Chris Irwin commercial network system BBS user Fidonet The program generated unique serial number called author BBS via dialup modem connection Upon connection serial number validated A unique key returned allowed program continue trial period If two system communicated using key software deliberately crashed The software long since entire activation system removed freeware Nick Andre Software installed activated perform full function imposes limit file size session time Some software allows full functionality limited trial time requiring activation Unactivated software typically reminds user activate program startup interval imposed size time limit reached Some unactivated software taken disruptive action crashing vandalism rare Some product act product number encoded sequence alphanumeric purchased used activate software Some product allow license transferred one machine another using online tool without call deactivate copy old machine reactivating new machine Software verifies activation every time start sometimes running Some software even phone home checking central database across Internet mean check whether specific activation revoked Some software might stop working reduce functionality connect central database Welcome FSActivate Use page activate Freedom Scientific product Without activation Freedom Scientific software run demo mode need reboot computer use software The simplest way activate Freedom Scientific software via Internet License Manager ILM system requires active Internet connection computer installed Freedom Scientific product When start program automatically begin activation process Follow instruction screen choose activate using Internet You need Authorization number came product take minute complete If problem activating software please contact Technical Support send Comprehensive internet security PC Mac Android device Renew existing ESET license save Activate software purchase Lost license Scalable enterprise solution seat minimum spread payment budget management annual Schedule sale engineer attend one public demo Choose series demo video ESET security solution Watch ESET webinars insight security trend emerging threat specific product Renew existing ESET license save Activate software purchase Lost license Download software License key required try ESET free Download software License key required ESET North America All right reserved Trademarks used herein trademark registered trademark ESET spol  ESET North America All name brand registered trademark respective company Analytics anyone use Analytics organization Cloud analytics organization Publish interactive data website Read Tableau Desktop file free Extend Tableau fit organization need Explore pricing option Explore data iPad free Explore Tableau solution industry See possible department Learn integrate data source See possible Tableau Learn Tableau video Interactive learning scale course offered around world session led Tableau pro Technology trend tip Learn expert Live online product walkthroughs Share knowledge idea Tableau user Find partner help make Tableau Stay latest virtual event Resources Desktop author Resources Server administrator Resources Tableau cloud deployment dashboard Manage Tableau account product key support case Explore technical article This matter u Our top brass Extra extra Read Let build better world data News event investor release Join team To activate Tableau Desktop select click If Tableau Server see Tableau Software All Rights Reserved Basic information activating Autodesk software How activate register product Internet Send u Request Code get Activation Code offline activation product perpetual license To keep using software trial expired need subscribe activate You need serial number product key activate Autodesk software Find activation code activate perpetual license manually computer Internet access Learn need reactivate software Solutions issue happen product activation Let u help select topic find right support agent Our global infrastructure support center subject matter expert help protect automation investment Get help activating software without picking phone During product activation serial number product key verified licensed run computer Activation required Autodesk license If serial number product key install software activation part installation process The first time launch new program installation follow step activate register Autodesk software online Launch Autodesk product You click product icon desktop click file typically saved Programs Windows Applications Mac folder On Let Get Started screen choose one option On screen click accept term condition A privacy statement appears first time launch software On Product LIcense Activation screen click Activate Enter Serial Number Product Key click On Product License Activation Options screen choose one following option If ca connect restricted Internet access need If received activation code email copy paste form Place cursor cell paste The code populate entire table  If Serial Number entered registered Autodesk Account need either create account log existing account register Let u help select topic find right support agent On page application valid user automatic apps In case need activate application manually use Find product section learn activate app To activate Creative Cloud Acrobat DC apps simply start app sign using menu option For instruction see See Our aging activation server earlier version Acrobat Creative Suite CS application retired Without activation server application display activation connection error trying verify license To install version require activation see either Affected application include Creative Suite application Acrobat Standard Professional Acrobat Version Sign password activate software within first seven day use To follow step Activation happens automatically soon software detects Internet connection software prompt activate installation To activate software manually follow step To activate software manually Make sure computer connected Internet Launch application Choose If option dimmed already activated software Sign password activate software If Adobe ID see option create one Follow onscreen instruction Running problem need activate offline See Adobe Acrobat XI X automatically activated soon software detects Internet connection If need activate software manually instance deactivated one computer could activate different computer follow step You need activate product If need help product visit following site The product get activated launch first time entering serial number If deactivate product selecting activate selecting The product launched Trial mode Select provide serial number You would received serial number purchased product For information finding serial number see Some product require enter serial number redemption code start using product Your serial number redemption code provided purchase product Creative Cloud apps require serial number If asked enter serial number start Creative Cloud app error See information resolve issue You use individual subscription two computer device See You install product two computer If want move product new computer simply select product one computer active license You install product new computer If computer installed product longer available update information system Once information removed install product new system Deactivation disconnect application valid user license Once deactivated reactivate time choose You need uninstall application computer deactivate Uninstalling application necessarily deactivate license A single license Adobe software let install application two example home office If want install software third computer first must deactivate one installation application Here To deactivate Creative Cloud Acrobat DC app start app choose For instruction see See Make sure computer connected Internet Launch application Choose Choose one following option To deactivate Photoshop Elements Photoshop Elements simply sign application selecting Running problem See Activation process Adobe validates software license prevent fraud abuse Adobe product service Activation involves sending information Adobe various time download installation uninstallation serialization launch update check Adobe software Adobe may also use information alone conjunction information Adobe may provide appropriate license renewal option ii help understand Adobe software usage may engage retain customer The following type information may sent Adobe activation The IP address assigned Internet service provider received Adobe part process sending activation data Adobe Facebook post covered term Creative Commons Selecting region change language content Website Search 
attribute name	The name attribute specifies name anchor The name attribute specifies name anchor The name attribute used create bookmark inside document HTML CSS JavaScript PHP jQuery Bootstrap XML Your message sent When using attribute name need aware certain directory server feature wo surprised result These feature described next subsection When accessing directory support attribute subclassing aware server might return attribute name different requested To minimize chance use derived subclass When accessing directory support synonym attribute name must aware server might return attribute name different requested To help prevent happening use canonical attribute name instead one synonym The name used attribute definition synonym name refers canonical attribute name definition When accessing directory support feature must aware server might return attribute name different requested The name attribute specifies name element This name attribute used reference element JavaScript For form element also used reference data submitted For iframe element used target form submission For map element name attribute associated img usemap attribute creates relationship image map For meta element name attribute specifies name attribute For param element name attribute used together value attribute specify parameter plugin specified tag The name attribute used following element Two button equal name submit different value clicked A fieldset name attribute An HTML form name attribute An iframe act target link An HTML form three input field two text field one submit button An clickable area Use name attribute define description keywords author HTML document An object element name attribute Perform calculation show result output element Set autoplay parameter true sound start playing soon page load A list name attribute A text area name attribute The attribute following browser support element HTML CSS JavaScript PHP jQuery Bootstrap XML Your message sent GitHub home million developer working together host review code manage project build software together Sign free GitHub account open issue contact maintainer community Already GitHub account Describe issue briefly Either working clear error message This may duplicate This might regression I seeing I downgraded Failing Environment Linux Alpine pyenv cpython I also seeing error seems like perfectly reasonable list package using Failing cpython I wondering commonality Clearly current version must working  I found I could get work checking calling line This solve root cause make list seems function fine I noticed something trying reproduce If work If fail After testing I found output file one fail Ex That make sense part failing one output file read get previously existing pin look like something handling editables link part I tried reproduce master seems fixed likely related look like closed Closing per There one remaining bug fix raise Closed This attribute indicates name attribute parent element going changed animation This example us animate rectangle shape changing position Y axis The following element use attribute Was article helpful Get latest greatest MDN delivered straight inbox If previously confirmed subscription newsletter may Please check inbox spam filter email u Mozilla individual contributor Content available In Master Data Services change name attribute To perform procedure You must permission access functional area You must model administrator For information see In Master Data Manager click On page menu bar point click On page list select model Click row entity contains attribute name want change Click On page click attribute name want change Click In box type updated name attribute For list word used attribute name see Click An placeholder use expression alternative actual attribute name An expression attribute name must begin followed one alphanumeric character This section describes several situation need use expression attribute name Note The example section use AWS CLI For programming code sample see On occasion might need write expression containing attribute name conflict DynamoDB reserved word For complete list reserved word see For example following AWS CLI example would fail reserved word To work around replace expression attribute name The pound sign required indicates placeholder attribute name The AWS CLI example would look like Note If attribute name begin number contains space special character reserved word use expression attribute name replace attribute name expression In expression dot interpreted separator character document path However DynamoDB also allows use dot character part attribute name This ambiguous case To illustrate suppose wanted retrieve attribute item see Suppose wanted access using projection expression DynamoDB would return empty result rather expected string This DynamoDB interprets dot expression document path separator In case would need define expression attribute name substitute You could use following projection expression DynamoDB would return correct result Suppose wanted access nested attribute using following projection expression The result would contain product review expected But decided use expression attribute name instead For example would happen define substitute DynamoDB would return empty result instead expected map review This DynamoDB interprets dot expression attribute value character within attribute name When DynamoDB evaluates expression attribute name determines refers scalar intended The correct approach would define expression attribute name element document path You could use projection expression DynamoDB would return correct result Expression attribute name helpful need refer attribute name repeatedly For example consider following expression retrieving review item To make concise replace expression attribute name The revised expression would look like If define expression attribute name must use consistently throughout entire expression Also omit symbol On page Subscriber portal User naming attribute identify user object logon name IDs used security purpose The attribute example user naming attribute A user object security principle also includes following user naming attribute The attribute logon name user The attribute consists user principal name UPN common logon name Windows user Users typically use UPN log domain This attribute indexed string A UPN login name user based Internet standard RFC The UPN shorter distinguished name easier remember By convention map user email name The point UPN consolidate email logon namespaces user need remember single name A UPN consists UPN prefix user account name UPN suffix DNS domain name The prefix joined suffix using symbol For example someone A UPN must unique among security principal object within directory forest This mean prefix UPN reused suffix A UPN suffix following restriction A UPN assigned required user account created When UPN created unaffected change attribute user object user renamed moved This allows user keep login name directory restructured However administrator change UPN When create new user object check local domain global catalog proposed name ensure already exist When user us UPN log domain UPN validated searching local domain global catalog If UPN found global catalog logon attempt fails The attribute unique identifier user The attribute Globally Unique Identifier GUID stored structure The GUID created Active Directory server user object created Because object distinguished name change object renamed moved distinguished name reliable identifier object In Active Directory Domain Services object attribute never change even object renamed moved You retrieve string form using property method The attribute logon name used support client server previous version Windows Windows NT Windows Windows LAN Manager The logon name must le character unique among security principal object within domain The attribute security identifier SID user The SID used system identify user group membership interaction Windows security The attribute The SID unique binary value used identify user security principal The SID set system user created Each user unique SID issued Windows domain stored attribute user object directory Each time user log system retrieves user SID directory place user access token The user SID also used retrieve SIDs group user member place user access token When SID used unique identifier user group used identify another user group The attribute contains previous SIDs user object This attribute A user object previous SIDs user moved another domain Whenever user object moved new domain new SID created assigned attribute previous SID added attribute These font attribute defined SDKs Framework On This Page An member array The default value system default cascading list user locale An instance represents set Unicode character covered font The default value supplied font An optional object specifies font face An optional object specifies font family An instance containing float value override glyph advancement specified font The default value A instance specifies font transformation matrix The default value identity matrix An optional object specifies font name An optional object containing float value specifies font size An instance instance fully describing font trait The default value supplied font See dictionary key An optional object specifies font visible name Go      attributeName 
BEO	BEO SHIPPING BEO Our main field web based application We always use top range technology tool develop application With top quality standardized software solution BEO provides extensive offer around export dispatch Compliance Our expert team ensure permanent development solution service Smooth Import Export We use export since August satisfied company BEO The advice excellent price performance ratio right We use export BEO Sanctions TESTING year The software u absolutely correct since requirement met program easy The software make work easier le manual Also individual solution longer problem After convinced export opted BEO one first company use SaaS solution offered year u November BEO Sanctions TESTING entschieden We use export since August satisfied company BEO The advice excellent price performance ratio right We use export BEO Sanctions TESTING year The software u absolutely correct since requirement met program easy use In manual way possible reliable data examination BEO Sanctions TESTING Processes efficient thus lot work The software make work easier le manual Also individual solution longer problem After convinced export opted BEO one first company use SaaS solution offered year u November BEO Sanctions TESTING software run smoothly someone always accessible help cooperation BEO good almost family Join team BEO GMBH The paperless custom clearance IMPORT effectively save time modular system concept provides relevant data shipping document smooth processing home abroad well seamless SANKTIONSPRÜFUNG test practical tool legally binding control basis relevant regulation The statutory audit responsible domestic Since January EMCS mandatory throughout Europe We bidding remit new module NCTS New Computerized Transit System computerized custom system speed shipping process With BEO PRÄFERENZ original data component contained product determine enjoyment preferential Import Swiss import electronic cargo processing module Federal Customs Administration With professional solution shipment BEO Kunden Information Zoll KIZ meet compliance requirement Transferring software product language involve great deal work requirement ensuring terminology consistent software online help manual adjustment dialogue box protection comment text change text short notice etc We know trick tool use We take challenge specific client requirement mean also often explore new possibility Our client benefit many year diverse experience wide variety project The BEO concentration requires student successfully complete course total undergraduate credit Whether student required complete course depends upon three track choose pursue The foundation BEO concentration requires student complete two course Economics two course Sociology two course Engineering Math course Statistics course In addition completing eight BEO Foundation course specific student chosen BEO track student must complete additional course one three BEO concentration track MATH acceptable math requirement BEO student graduating Connect You must JavaScript enabled browser utilize functionality website otherwise specified discount offer apply License otherwise specified discount offer apply License The master survey first variant BEO series mech A must render 
call by reference	The method passing argument function copy address argument formal parameter Inside function address used access actual argument used call It mean change made parameter affect passed argument To pas value reference argument pointer passed function like value So accordingly need declare function parameter pointer type following function exchange value two integer variable pointed argument Let u call function passing value reference following example Let u put code single C file compile execute produce following result It show change reflected outside function well unlike call value change reflect outside function Copyright All Rights Reserved use evaluation strategy determine evaluate argument function call function also read operation method relation kind value pas function For example call reference specifies function application evaluates argument proceeds evaluation function body pass two capability function namely ability look current value argument modify via assignment statement The notion similar distinct In practical term many modern programming language converged evaluation strategy function call C Java Some language especially language combine several notion parameter passing Historically call value call name date back language designed late Call reference used system Purely functional language like well functional language like use call need The evaluation strategy specified programming language definition function specific implementation In argument always evaluated completely function applied Under map strict evaluation function reason strict evaluation sometimes called eager Most existing programming language use strict evaluation function evaluation refers evaluation strategy argument function evaluated left right reducible expression Applicative order evaluation also referred common evaluation strategy used language different In call value argument expression evaluated resulting value bound corresponding variable function frequently copying value new memory region If function procedure able assign value parameter local copy anything passed function call unchanged caller function return Call value single evaluation strategy rather family evaluation strategy function argument evaluated passed function While many programming language Common Lisp Eiffel Java use call value evaluate function argument evaluate function argument others Scheme OCaml C leave order unspecified In case term call value problematic value passed value variable understood ordinary meaning value value The effect syntactically look like call value may end rather behaving like call reference often depending subtle aspect language semantics The reason passing reference often language technically provide value representation complicated data instead represents data structure preserving semblance value appearance source code Exactly boundary drawn proper value data structure masquerading often hard predict In array string special case data structure thus treated reference memory area value even field vector In vector special case table therefore data structure list get rendered indexed exactly way value In value value representation used script level language manages corresponding data structure one required Modifications made via data structure reflected back value representation vice versa The description call value value reference common understood call reference another term Thus behaviour call value Java Visual Basic call value C Pascal significantly different C Pascal calling function large structure argument cause entire structure copied except actually reference structure causing serious performance degradation mutation structure invisible caller However Java Visual Basic reference structure copied fast mutation structure visible caller also referred evaluation strategy function receives implicit variable used argument rather copy value This typically mean function modify variable used seen caller Call reference therefore used provide additional channel communication called function calling function A language make difficult programmer track effect function call may introduce subtle bug Many language support call reference form another comparatively use default early example language A language default call value offer special syntax parameter additionally offer call reference Call reference simulated language use call value exactly support call reference making use object refer object object representing memory address object Languages use technique It separate evaluation language call sometimes referred also referred In ML reference safe Similar effect achieved passing object mutated used language like Java Python Ruby In typically semantic difference two strategy since data structure immutable possibility function modify argument typically described call value even though implementation frequently use call reference internally efficiency benefit Example demonstrates call reference Example call address simulates call reference also referred evaluation strategy first named et al language It used language object reference Scheme OCaml many others However term call sharing common use terminology inconsistent across different source For example Java community say Java call value Call sharing implies value language based object rather value The semantics call sharing differ call reference assignment function argument within function visible caller unlike reference semantics In particular call value mutation argument performed called routine visible caller And call reference access given variable caller merely certain object So variable passed possible simulate assignment variable caller scope However since function access object caller copy made mutation object object within function visible caller may appear differ call value semantics Mutations mutable object within function visible caller object copied cloned shared For example Python list mutable output method modifies object called Assignments within function noticeable caller language assignment bind variable different object rather mutating object Since rebound variable exists within scope function counterpart caller retains original binding Compare Python mutation code bind formal argument new object output statement reassigns new list rather location reference For real difference call sharing call value except object identity visible language The use call sharing mutable object alternative parameter assigned argument overwritten object identity changed object argument mutated Although term widespread usage Python community identical semantics language Java Visual Basic often described call value value implied reference object also referred termed community special case call reference provided reference unique caller This variant gained attention multiprocessing context parameter function call reference might accessible another thread execution content may copied new reference function call return updated content new reference copied back original reference restored The semantics call also differ call reference two function argument one another point variable caller environment Under call reference writing one affect call avoids giving function distinct copy leaf result caller environment depending aliased argument copied back copy made order entry return When reference passed callee uninitialized evaluation strategy may called In evaluation may continue body function applied Any contain unbound variable evaluated function application whose argument value known may reduced In presence complete partial evaluation may produce unintended result reason system support partial evaluation tend pure expression expression without within function In argument function evaluated unless actually used evaluation function body Under Church encoding operator map evaluation function reason evaluation often referred lazy Boolean expression many language use form evaluation called evaluation return soon determined unambiguous Boolean example disjunctive expression encountered conjunctive expression encountered forth Conditional expression also usually use lazy evaluation evaluation return soon unambiguous branch result evaluation evaluation strategy outermost redex always reduced applying function evaluating function argument In contrast call name evaluate inside body unapplied function evaluation strategy argument function evaluated function substituted directly function body using left evaluated whenever appear function If argument used function body argument never evaluated used several time time appears See evaluation occasionally preferable evaluation If function argument used function call name save time evaluating argument whereas call value evaluate regardless If argument computation advantage enormous However function argument used call name often slower requiring mechanism An early use Today simulate call name using delegate Expression T parameter The latter result abstract syntax tree given function provides agent represent operation evaluated needed provides call name function parameter version call name value stored subsequent us In pure setting produce result call name function argument used two time call need almost always faster Because evaluation expression may happen arbitrarily far computation language using call need generally support computational effect via use This eliminates unexpected behavior variable whose value change prior delayed evaluation commonly used implementation strategy semantics variation instance language us evaluation also us form call need language implement call need using type similar call name us textual substitution rather substitution With uncautious use macro substitution may result lead undesired behavior avoid problem checking replacing shadowed variable parameter Under function application may reduced substituting function argument function using substitution time This may done even within body unapplied function also referred evaluation strategy value expression computed concurrently flow rest program one When value future needed main program block future value promise one promise finish computing already completed This strategy evaluation occur time creation future expression given use future value It similar call need value computed computation may deferred value needed may started Further value future needed local variable function return computation may terminated If implemented process thread creating future spawn one new process thread promise accessing value synchronize main thread terminating computation future corresponds killing promise computing value If implemented creating future call coroutine async function may yield caller turn yielded back value used cooperatively multitasking another variant call need function argument partially evaluated amount time may adjusted runtime evaluation aborted function applied using call need This approach avoids runtime expense call need still retaining desired termination characteristic The method passing argument function copy reference argument formal parameter Inside function reference used access actual argument used call This mean change made parameter affect passed argument To pas value reference argument reference passed function like value So accordingly need declare function parameter reference type following function exchange value two integer variable pointed argument For let u call function passing value reference following example When code put together file compiled executed produce following result Copyright All Rights Reserved In C language tutorial take look call value call reference also known These method different way passing calling data If data passed value data copied variable used example main variable used function So data passed stored function variable modified inside function value changed variable used inside function Let take look call value example The output call value code example look like Ok let take look happening source code example In main create integer value We print information every stage beginning printing variable Then function called input variable This variable copied function variable x In function add x also call print statement Then next statement called main value variable printed We see value variable changed call function If data passed reference pointer data copied instead actual variable done call value Because pointer copied value pointer address changed function value also changed main Let take look code example The output call reference source code example look like Let explain happening source code example We start integer b value The function called address variable b passed function Inside function print statement done added value memory pointed Therefore end function value Then main print variable b see value changed expected One advantage call reference method using pointer doubling memory used variable copy call value method This course great lowering memory footprint always good thing So make parameter call reference There two reason good idea programmer need choose call value call reference The reason side effect privacy Unwanted side effect usually caused inadvertently change made call reference parameter Also case want data private someone calling function able change want So better use call value default use call reference data change expected That C tutorial hopefully learned difference HACKED BY SudoX HACK A NICE DAY Why let u know think adding comment Good tutorial All Rights Reserved UNDER WHICH THIS SERVICE IS PROVIDED TO YOU When passed argument address memory location passed instead value This pointer store location memory value The address memory location passed function swap pointer accept value So pointer point address respectively When value pointer changed value pointed memory location also change correspondingly Hence change made reflected main function This technique known Call Reference C programming Check example learn You successfully subscribed newsletter Get Latest Updates Programiz You successfully subscribed newsletter There two way pas value data function C language Original value modified call value modified call reference Let understand call value call reference c language one one In call value In call value value passed function locally stored function parameter stack memory location If change value function parameter changed current function It change value variable inside caller method main Let try understand concept call value c language example given In call reference pas reference address Here address value passed function actual formal argument share address space Hence value changed inside function reflected inside well outside function Note To understand call reference must basic knowledge pointer Let try understand concept call reference c language example given JavaTpoint SSS IT Pvt Ltd provides website development service affordable cost We develop website WordPress Core PHP CakePHP CodeIgnitor Open Cart Struts Spring technology Send u requirement hr We show free demo first proceed JavaTpoint offer college campus training Core Java Advance Java Android Hadoop PHP Web Technology Python Please mail requirement hr Course Fee Per Student Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Address Floor Noida UP India Contact No Copyright All right reserved By Before discus function call reference let understand terminology use explaining The parameter appear function call The parameter appear function declaration For example We function declaration like The b parameter formal parameter We calling function like In guide discus function call reference method If want read call value method refer guide Lets get back point When call function passing address actual parameter way calling function known call reference In call reference operation performed formal parameter affect value actual parameter operation performed value stored address actual parameter It may sound confusing first following example would clear doubt Lets take simple example Read comment following program Here swapping number using call reference As see value variable changed calling swapnum function swap happened address variable Required field marked Copyright BeginnersBook All Rights Reserved There two way pas function call The major difference call value call reference call value copy actual argument passed respective formal argument While call reference location address actual argument passed formal argument hence change made formal argument also reflect actual argument In C function argument passed value C support reference like Java In C calling called function share memory copy called function directly alter variable calling function alter private temporary copy The scheme asset however liability It usually lead compact program fewer extraneous variable parameter treated conveniently initialized local variable called routine Yet case need The address case hence need call reference To achieve call reference functionality C language calling function provides address variable set technically pointer variable called function declares parameter pointer access variable indirectly Since address argument passed function code within called function change value actual argument While studying call value call reference C important note story different array When name array used argument value passed function location address beginning array copying array element By subscripting value function access alter element actual array In copy actual argument passed formal argument called function change made formal argument called function effect value actual argument calling function In location address actual argument passed formal argument called function This mean accessing address actual argument alter within called function In call value actual argument remain safe modified accidentally In alteration actual argument possible within called function therefore code must handle argument carefully else get unexpected result The classic example wanting modify caller memory function exchange two value For C us call value following version work The affect argument calling function operates local This good example local variable behave In call reference pas variable reference parameter programmer must pas pointer instead The formal parameter pointer value interest The calling function need use compute pointer actual parameter The called function need dereference pointer appropriate access value interest Here example correct function So got difference call value call reference Hope enjoyed reading difference method passing parameter function Please come across error page Thanks reading Get Free Tutorials Email main author He software professional post graduated love writing technical article programming data structure US senator reveal example divisive social medium propaganda think Russia created Verso Group accused fuelling UK nuisance call spam text industry Some already fooled email scam lost thousand pound AD BLOCKER DETECTED Advertisements help running site free To view content please disable AdBlocker refresh page Thank You Base Package Calls VI specified The VI must strictly typed VI reference Both Call By Reference node subVI node call VI The Call By Reference node enables whose connector pane match strictly typed reference input Use function A subVI node allows call specific VI statically determined place subVI node block diagram  
compiler code	A transforms computer code written one source language another computer language target language Compilers type support digital device primarily computer The name primarily used program translate create program However many different type compiler If compiled program run computer whose different one compiler run compiler A written language compiled A program translates higher level one A program translates language usually called transpiler A language usually program translates form expression without change language The term refers tool used create parser perform syntax analysis A compiler likely perform many following operation conversion input program Compilers implement operation phase promote efficient design correct transformation source input target output Program fault caused incorrect compiler behavior difficult track work around therefore compiler implementers invest significant effort ensure Compilers translator used transform source program An computer software transforms executes indicated operation The translation process influence design computer language lead preference compilation interpretation In practice interpreter implemented compiled language compiler implemented interpreted language Theoretical computing concept developed scientist mathematician engineer formed basis digital computing development World War II Primitive binary language evolved digital device understand one zero circuit pattern underlying machine architecture In late forty assembly language created offer workable abstraction computer architecture Limited capacity early computer led substantial technical challenge first compiler designed Therefore compilation process needed divided several small program The front end program produce analysis product used back end program generate target code As computer technology provided resource compiler design could align better compilation process The human mind design better solution language move machine higher level So development language follows naturally capability offered digital computer language strictly defined syntax semantics form language architecture Elements formal language include The sentence language may defined set rule called grammar BNF describes syntax sentence language used syntax Algol The idea derive concept linguist BNF extension become standard tool describing syntax programming notation many case part compiler generated automatically BNF description In designed algorithmic programming language called Plan Calculus While actual implementation occurred presented concept later seen designed Ken Iverson late APL language mathematical computation language design formative year digital computing provided useful programming tool variety application Compiler technology evolved need strictly defined transformation source program target target program digital computer The compiler could viewed front end deal analysis source code back end synthesize analysis target code Optimization front end back end could produce efficient target code Some early milestone development compiler technology Early operating system system software written assembly language In early language system programming still controversial due resource limitation Still several research industry effort began shift toward system programming language example Basic Combined Programming Language designed University Cambridge originally developed compiler writing tool Several compiler implemented Richards book provides insight language compiler BCPL influential system programming language still used research also provided basis design B C language Basic Language Implementation System Software developed Digital Equipment Corporation DEC Minicomputer Wulf Carnegie Mellon University CMU research team The CMU team went develop compiler one year later Multiplexed Information Computing Service operating system project involved later led MIT Multics written language developed IBM IBM User Group IBM goal satisfy business scientific system programming requirement There language could considered offered complete solution even though implemented For first year Mulitics project subset language could compiled assembly language Early EPL compiler Doug McIlory Bob Morris Bell Labs EPL supported project compiler full could developed Bell Labs left Multics project Over time hope replaced frustration group effort initially failed produce economically useful system Continued participation would drive project support cost So researcher turned development effort A system programming language based BCPL concept written Ritchie created compiler B wrote Uniplexed Information Computing Service operating system Unics eventually became spelled Unix Bell Labs started development expansion based B BCPL The BCPL compiler transported Multics Bell Labs BCPL preferred language Bell Labs Initially program Bell Labs B compiler used C compiler developed In new provided resource define extension B rewrite compiler By design C language essentially complete Unix kernel rewritten Steve Johnson started development Portable C Compiler PCC support retargeting C compiler new machine OOP offered interesting possibility application development maintenance OOP concept go back part language science At Bell Labs development became interested OOP first used system programming The initial design leveraged C language system programming capability Simula concept facility added The Cfront program implemented language compiler In subsequent year several compiler developed popularity grew In many application domain idea using language quickly caught Because expanding functionality supported newer increasing complexity computer architecture compiler became complex Defense Advanced Research Projects Agency sponsored compiler project Wulf CMU research team The Production Quality design would produce Production Quality Compiler PQC formal definition source language target PQCC tried extend term beyond traditional meaning parser generator without much success PQCC might properly referred compiler generator PQCC research code generation process sought build truly automatic system The effort discovered designed phase structure PQC The compiler provided initial structure The phase included analysis front end intermediate translation virtual machine middle end translation target back end TCOL developed PQCC research handle language specific construct intermediate representation Variations TCOL supported various language The PQCC project investigated technique automated compiler construction The design concept proved useful optimizing compiler compiler programming language The Ada Stoneman Document formalized program support environment APSE along kernel KAPSE minimal MAPSE An Ada interpreter supported development standardization effort American National Standards Institute ANSI International Standards Organization ISO Initial Ada compiler development Military Services included compiler complete integrated design environment along line Stoneman Document Army Navy worked Ada Language System ALS project targeted architecture Air Force started Ada Integrated Environment AIE targeted IBM series While project provide desired result contribute overal effort Ada development Other Ada compiler effort got way Britain University York Germany University Karlsruhe In Verdix later acquired Rational delivered Verdix Ada Development System VADS Army VADS provided set development tool including compiler could hosted variety Unix platform DEC Ultrix Sun Solaris taageted Motorola Army CECOM evaluation There soon many Ada compiler available passed Ada Validation test The Freesoftware Foundation GNU project developed GCC provides core capability support multiple language target The Ada version one widely used Ada compiler GNAT free also commercial support example AdaCore founded provide commercial software solution Ada GNAT Pro includes GNU GCC based GNAT tool suite provide language continued drive compiler research development Focus area included optimization automatic code generation Trends programming language development environment influenced compiler technology More compiler became included language distribution PERL Java Development Kit component IDE VADS Eclipse Ada Pro The interrelationship interdependence technology grew The advent web service promoted growth web language scripting language Scripts trace back early day Command Line Interfaces CLI user could enter command executed system User Shell concept developed language write shell program Early Windows design offered simple batch programming capability The conventional transformation language used interpreter While widely used Bash Batch compiler written More recently sophisticated interpreted language became part developer tool kit Modern scripting language include PHP Python Ruby Lua Lua widely used game development All interpreter compiler support When field compiling began late focus limited translation language program machine code The compiler field increasingly intertwined discipline including computer architecture programming language formal method software engineering computer security The Compiler Research The Next Years article noted importance language Java Security parallel computing cited among future research target A compiler implement formal transformation source program target program Compiler design define end end solution tackle defined subset interface compilation tool preprocessors assembler linkers Design requirement include rigorously defined interface internally compiler component externally supporting toolsets In early day approach taken compiler design directly affected complexity computer language processed experience person designing resource available Resource limitation led need pas source code A compiler relatively simple language written one person might single monolithic piece software However source language grows complexity design may split number interdependent phase Separate phase provide design improvement focus development function compilation process Classifying compiler number pass background hardware resource limitation computer Compiling involves performing lot work early computer enough memory contain one program work So compiler split smaller program made pas source representation performing required analysis translation The ability compile classically seen benefit simplifies job writing compiler compiler generally perform compilation faster Thus partly driven resource limitation early system many early language specifically designed could compiled single pas In case design language feature may require compiler perform one pas source For instance consider declaration appearing line source affect translation statement appearing line In case first pas need gather information declaration appearing statement affect actual translation happening subsequent pas The disadvantage compiling single pas possible perform many sophisticated needed generate high quality code It difficult count exactly many pass optimizing compiler make For instance different phase optimization may analyse one expression many time analyse another expression Splitting compiler small program technique used researcher interested producing provably correct compiler Proving correctness set small program often requires le effort proving correctness larger single equivalent program Regardless exact number phase compiler design phase assigned one three stage The stage include front end middle end back end This approach make possible combine front end different language back end different sharing optimization middle end Practical example approach multiple shared optimization multiple The front end analyzes source code build internal representation program called IR It also manages data structure mapping symbol source code associated information location type scope While frontend single monolithic function program commonly implemented analyzed several phase may execute sequentially concurrently This method favored due modularity Most commonly today frontend broken three phase also known lexing also known parsing Lexing parsing comprise syntactic analysis word syntax phrase syntax respectively simple case module lexer parser automatically generated grammar language though complex case require manual modification The lexical grammar phrase grammar usually simplifies analysis significantly handled semantic analysis phase The semantic analysis phase generally complex written hand partially fully automated using These phase broken lexing scanning evaluating parsing building CST parse tree transforming AST syntax tree In case additional phase used notably rare The main phase front end include following The middle end performs optimization intermediate representation order improve performance quality produced machine code The middle end contains optimization independent CPU architecture targeted The main phase middle end include following Compiler analysis prerequisite compiler optimization tightly work together For example crucial The scope compiler analysis optimization vary greatly small level even whole program Obviously compiler potentially better job using broader view But broad view free large scope analysis optimization costly term compilation time memory space especially true interprocedural analysis optimization Interprocedural analysis optimization common modern commercial compiler The open source criticized long time lacking powerful interprocedural optimization changing respect Another open source compiler full analysis optimization infrastructure used many organization research commercial purpose Due extra time space needed compiler analysis optimization compiler skip default Users use compilation option explicitly tell compiler optimization enabled The back end responsible CPU architecture specific optimization The main phase back end include following branch software engineering deal trying show compiler behaves according Techniques include developing compiler using using rigorous testing often called compiler validation existing compiler programming language usually appear type mind either designed However practice rarely anything language exclusively compiled exclusively interpreted although possible design language rely run time The categorization usually reflects popular widespread implementation language instance sometimes called interpreted language C compiled one despite existence BASIC compiler C interpreter Interpretation replace compilation completely It hide user make gradual Even though interpreter interpreted directly executed program needed somewhere bottom stack see Further compiler contain interpreter optimization reason For example expression executed compilation result inserted output program prevents recalculated time program run greatly speed final program Modern trend toward time blur traditional categorization compiler interpreter even Some language specification spell implementation include compilation facility example However nothing inherent definition Common Lisp stop interpreted Other language feature easy implement interpreter make writing compiler much harder example many scripting language allow program construct arbitrary source code runtime regular string operation execute code passing special To implement feature compiled language program must usually shipped includes version compiler One classification compiler generated code executes This known A compiler one output intended directly run type computer operating system compiler run The output designed run different platform Cross compiler often used developing software intended support software development environment The output compiler produce code VM may may executed platform compiler produced For reason compiler usually classified native cross compiler The lower level language target compiler may C often viewed sort portable assembler also target language compiler  original compiler used C target language The C created compiler usually intended read maintained human So pretty C intermediate code irrelevant Some feature C turn good target language  C code directive generated support original source While common compiler type output machine code many type Compiler construction taught university school part curriculum Such course usually supplemented implementation compiler A example compiler Wirth used teach compiler construction In spite simplicity compiler introduced several influential concept field including us programming language mature time lead need Standardization The American National Standards Institute ANSI International Organization Standardization ISO manage standard various programming language FORTRAN COBOL C Universities conjunction industry government provide active research development programming language associated language tool compiler integrated development environment formal validation suite Professional organization representation across research education industry government These include Institute Electrical Electronic Engineers IEEE Association Computing Machinery ACM A number conference field present advance compiler construction one main topic support number conference including The European Joint Conferences Theory Practice Software sponsor International Conference Compiler Construction paper academic industrial sector Asian Symposium Programming Languages Systems APLAS organized Asian Association Foundation Software AAFS CodeChef created platform help programmer make big world algorithm At CodeChef work hard revive geek hosting start month another smaller programming challenge middle month We also aim training session discussion related technicality like like Apart providing platform CodeChef also various algorithm tutorial forum discussion help new world Try hand one many practice problem submit solution language choice Our judge accepts solution programming language Preparing coding contest never much fun Receive point move CodeChef rank Use practice section better prepare multiple take place month CodeChef Here show skill Take part day long monthly shorter format Put recognition win great prize Our prize worth INR Indian Community Global Community lot CodeChef goody grab GitHub home million developer working together host review code manage project build software together Use Git checkout SVN using web URL compiler C programming language It intended support language feature keeping code small simple possible The compiler able compile You see code implementation C language example compiler able compile source code carefully written concise possible source code becomes good study material learn various technique used compiler You may find lexer preprocessor parser already useful learn C source code processed stage It optimizing compiler Generated code usually slower GCC I plan implement reasonable level optimization future support Linux I plan make portable I fix known miscompilations implement optimization pas As I using Ubuntu development platform It work Linux distribution though Note Do high expectation compiler If try compile program compiler good chance see compile error miscompilations This basically project I spent month spare time far Run make build come unit test To run test give test argument The following target build three time verify compiler build build It compare binary verify reach fixed point Rui Ueyama Besides popular book compiler Dragon Book I found following useful develop C compiler Note standard draft version close ratified version You practically use standard document LCC A Retargetable C Compiler Design Implementation TCC Tiny C Compiler standard final draft standard final draft Dave Prosser C Preprocessing Algorithm The ABI Payment Card Industry Data Security Standard PCI DSS compliance adherence set policy procedure developed protect credit debit cash card transaction prevent misuse cardholder personal information A compiler special program process statement written particular programming language turn machine language code computer us Typically programmer writes language statement language one line time using The file created contains called The programmer run appropriate language compiler specifying name file contains source statement When executing running compiler first par analyzes language statement syntactically one one successive stage pass build output code making sure statement refer statement referred correctly final code Traditionally output compilation called sometimes Note term object related The object code processor execute one instruction time The programming language language used introduced possibility compiling output called run computer system platform Java bytecode interpreter provided convert bytecode instruction executed actual hardware processor Using virtual machine bytecode optionally recompiled execution platform See also Traditionally operating system additional step required compilation resolving relative location instruction data one object module run time instruction sequence data This process sometimes called output known A compiler work sometimes called language An work program written using processor assembler language See introductory tutorial compiler By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States An internal audit IA organizational initiative monitor analyze business operation order determine Pure risk also called absolute risk category threat beyond human control one possible outcome Risk assessment identification hazard could negatively impact organization ability conduct business Phishing form fraud attacker masquerade reputable entity person email communication Vulnerability disclosure practice publishing information computer security problem type policy Incident response organized approach addressing managing aftermath security breach cyberattack also Fast Healthcare Interoperability Resources FHIR interoperability standard electronic exchange healthcare The Office National Coordinator Health Information Technology abbreviated ONC entity within Precision medicine PM rapidly evolving development healthcare physician caregiver consider Business continuity disaster recovery BCDR closely related practice describe organization preparation A business continuity plan BCP document consists critical information organization need continue A call tree sometimes referred phone tree telecommunication chain notifying specific individual TLC flash cell flash type NAND flash memory store three bit data per cell Copy data management CDM approach reducing storage consumption involves eliminating unnecessary duplication cell SLC flash type storage store one bit data per cell flash medium A hybrid hard disk drive electromechanical spinning hard disk contains amount NAND Flash memory All Rights Reserved This work licensed This mean free copy share comic sell  Code generation considered final phase compilation Through post code generation optimization process applied code seen part code generation phase The code generated compiler object code programming language example assembly language We seen source code written language transformed language result object code following minimum property We see intermediate code transformed target object code assembly code case Directed Acyclic Graph DAG tool depicts structure basic block help see flow value flowing among basic block offer optimization DAG provides easy transformation basic block DAG understood Leaf node represent identifier name constant Interior node represent operator Interior node also represent result expression value stored assigned b c This optimization technique work locally source code transform optimized code By locally mean small portion code block hand These method applied intermediate code well target code A bunch statement analyzed checked following possible optimization At source code level following done user At compilation level compiler search instruction redundant nature Multiple loading storing instruction may carry meaning even removed For example We delete first instruction sentence Unreachable code part program code never accessed programming construct Programmers may accidently written piece code never reached In code segment statement never executed program control return back execute hence removed There instance code program control jump back forth without performing significant task These jump removed Consider following chunk code In code label removed pass control So instead jumping control directly reach shown There occasion algebraic expression made simple For example expression replaced expression simply replaced INC There operation consume time space Their strength reduced replacing operation consume le time space produce result For example replaced involves one left shift Though output much efficient implement The target machine deploy sophisticated instruction capability perform specific operation much efficiently If target code accommodate instruction directly improve quality code also yield efficient result A code generator expected understanding target machine runtime environment instruction set The code generator take following thing consideration generate code The code generator aware nature target language code transformed That language may facilitate instruction help compiler generate code convenient way The target machine either CISC RISC processor architecture Intermediate representation various form It Abstract Syntax Tree AST structure Reverse Polish Notation code The code generator take Intermediate Representation input convert map target machine instruction set One representation many way instruction convert becomes responsibility code generator choose appropriate instruction wisely A program number value maintained execution The target machine architecture may allow value kept CPU memory register Code generator decides value keep register Also decides register used keep value At last code generator decides order instruction executed It creates schedule instruction execute The code generator track register availability address location value generating code For following two descriptor used Register descriptor used inform code generator availability register Register descriptor keep track value stored register Whenever new register required code generation descriptor consulted register availability Values name identifier used program might stored different location execution Address descriptor used keep track memory location value identifier stored These location may include CPU register heap stack memory combination mentioned location Code generator keep descriptor updated For load statement LD x code generator Basic block comprise sequence instruction Code generator take sequence instruction input If value name found one place register cache memory register value preferred cache main memory Likewise cache value preferred main memory Main memory barely given preference Code generator us function determine status available register location name value work follows If variable Y already register R us register Else register R available us register Else option possible chooses register requires minimal number load store instruction For instruction x OP z code generator may perform following action Let u assume L location preferably register output OP z saved Call function getReg decide location Determine present location register memory consulting Address Descriptor If presently register generate following instruction copy value MOV L represents copied value Determine present location using method used step generate following instruction OP z L represents copied value Now L contains value OP z intended assigned So L register update descriptor indicate contains value Update descriptor indicate stored location If z use given back system Other code construct like loop conditional statement transformed assembly language general assembly way Copyright All Rights Reserved New Version OnlineGDB available Please save data refresh page update Oops Connection server lost Please refresh page reconnect debug Debug session stopped due inactivity Run Console stopped due inactivity Optimization program transformation technique try improve code making consume le resource CPU Memory deliver high speed In optimization general programming construct replaced efficient programming code A code optimizing process must follow three rule given The output code must way change meaning program Optimization increase speed program possible program demand le number resource Optimization fast delay overall compiling process Efforts optimized code made various level compiling process At beginning user code use better algorithm write code After generating intermediate code compiler modify intermediate code address calculation improving loop While producing target machine code compiler make use memory hierarchy CPU register Optimization categorized broadly two type machine independent machine dependent In optimization compiler take intermediate code transforms part code involve CPU register absolute memory location For example This code involves repeated assignment identifier item put way save CPU cycle used processor optimization done target code generated code transformed according target machine architecture It involves CPU register may absolute memory reference rather relative reference optimizers put effort take maximum advantage memory hierarchy Source code generally number instruction always executed sequence considered basic block code These basic block jump statement among first instruction executed instruction basic block executed sequence appearance without losing flow control program A program various construct basic block like conditional statement loop FOR etc We may use following algorithm find basic block program Search header statement basic block basic block start Header statement statement following form basic block A basic block include header statement basic block Basic block important concept code generation optimization point view Basic block play important role identifying variable used single basic block If variable used register memory allocated variable need emptied unless block finish execution Basic block program represented mean control flow graph A control flow graph depicts program control passed among block It useful tool help optimization help locating unwanted loop program Most program run loop system It becomes necessary optimize loop order save CPU cycle memory Loops optimized following technique A fragment code resides loop computes value iteration called code This code moved loop saving computed rather iteration A variable called induction variable value altered within loop value There expression consume CPU cycle time memory These expression replaced cheaper expression without compromising output expression For example multiplication x expensive term CPU cycle x yield result Dead code one one code statement Thus dead code play role program operation therefore simply eliminated There code statement whose computed value used certain circumstance sometimes value used sometimes Such code known partially The control flow graph depicts chunk program variable used assign output expression x Let u assume value assigned never used inside control leaf loop assigned value variable z would used later program We conclude assignment code never used anywhere therefore eligible eliminated Likewise picture depicts conditional statement always false implying code written true case never executed hence removed Redundant expression computed parallel path without change expression computed path without change operand For example redundant expression partially redundant expression code partially redundant eliminated using technique Another example partially redundant code We assume value operand changed assignment variable variable Here condition statement true OP z computed twice otherwise Code motion used eliminate redundancy shown Here whether condition true false OP z computed Copyright All Rights Reserved I ton website I read ton article I heard ton explanation Most good either broad complicated plain bad So question compiler work If difficult broad question please tell But please answer question As currently stand question good fit Q A format We expect answer supported fact reference expertise question likely solicit debate argument polling extended discussion If feel question improved possibly reopened guidance A compiler program translates source code another program programing language executable code The source code typically programming language Pascal C Java Perl C etc The executable code may sequence machine instruction executed CPU directly may intermediate representation interpreted virtual machine Java byte code In short compiler convert program format format As compiler work indeed complicated There book university course subject I attempt briefly outline main stage process cursory overview Again I stress brief description Modern compiler smart consequently complicated A compiler computer program set instruction transforms source code written programming language source language another computer language target language often binary form known object code The common reason wanting transform source code create executable program Compilers bridge source program language underlying hardware A compiler requires asked viewed active site design logo Stack Exchange Inc user contribution licensed MATLAB let share program standalone application You also create Microsoft Excel integrate Excel spreadsheet When used along package MATLAB program software component integration programming language deployment enterprise system supported All application created MATLAB Compiler use enables deployment user need MATLAB You package runtime application user download installation Learn Package MATLAB program distribution end user use MATLAB Share work MATLAB user giving program apps Share may use MATLAB creating standalone application Package MATLAB program Microsoft Excel integrate Excel spreadsheet Use scripted packaging MATLAB apps interactively package application Discover MATLAB Compiler exploring resource Explore documentation MATLAB Compiler function feature including release note example Browse list available MATLAB Compiler function View system requirement latest release MATLAB Compiler View article demonstrate technical advantage using MATLAB Compiler Read MATLAB Compiler accelerating research development industry Find answer question explore troubleshooting resource Learn MATLAB toolbox use MATLAB Compiler Run compiled MATLAB application component without installing MATLAB MATLAB Compiler apps enable quickly access common task interactive interface There many way start using MATLAB Compiler Test drive MATLAB Compiler Purchase MATLAB Compiler explore related product Contact Chetan Rawal MATLAB Compiler Technical Expert MATLAB Compiler requires Use MATLAB Compiler solve scientific engineering challenge Choose country get translated content available see local event offer Based location recommend select You also select location following list MathWorks leading developer mathematical computing software engineer scientist The MathWorks Inc 
component team	September ExamOne A Quest Diagnostics Subsidiary Scrum Agile methodology rely heavily set team structure succeed In Scrum team ScrumMaster product owner These team work feature iteratively developed As explained Mike Cohn team commonly called However quite frequently project team organized around layer component product These team called component team Cohn The component team work particular component layer responsibility remain within boundary component layer tasked develop Two component team deliverable integrated make feature Agile team built around feature This way team responsible developing functionality feature Feature team control whole process increase accountability toward delivering flawless feature However gamut reason project regularly organized component team Some reason component team could Cohn Craig Larman Bas Vodde discus many reason organizing project team component team Slicing project horizontally cause many problem overall development delivery process The example problem arising due component team giving way written communication dependence handout uneven work sprint component team upper layer eventually able deliver workable software Agile manner Each problem arising component team serious enough cause missed deadline poor quality However even given problem component team great thing feature team project still get organized component team The compelling reason stay component team synergize development effort particular component functionality used one team Even however effort made keep number component team minimum Regardless reason component team disadvantage associated company project flavor regularly work component team environment Of course working component team mean lost Component team definitely bad idea way work around problem Experience shown way increase effectiveness deliver product deliver everything time The following list give step needed succeed component team environment The following section discus detail item mentioned Mike Cohn suggests team upper layer act product owner lower layer As I mentioned earlier component team Agile They product owner prioritizes component backlog This product owner component team work representative team Effectively team consumes component team deliverable say defining prioritizing backlog component team like product owner feature team Agile value individual interaction process tool It imperative team member understand work Individuals different team communicate directly without going layer management They also work together without need unnecessary documentation Extreme Programming XP relies rule engagement guide pair All component team work together brief list guideline direct member team interact It prepared organizing meeting two team ScrumMaster one team facilitate meeting In place I worked definition done well understood within development team It extremely important published list item define done team The definition done also include item matter consuming team since one expected using done component When database team say done data access team know expect All team spend time iteration groom product backlog prepare future iteration Similarly component team working set aside time prepare future sprint In order understand plan ahead consider following scenario The application team develops user interface Team A dependent composition design screen design team Team B In case Team B stay ahead Team A sprint This way Team B already reduced uncertainty user story tackled Team A One big disadvantage approach element mini Waterfall However given situation best done This work dependency team one level deep If Team A depends feature Team B feature depend Team C deliverable approach workable In fact expose serious flaw organizational structure corrected soon possible One say Deliver working software frequently couple week couple month preference shorter timescale What mean team deliver software frequently The delivery involves frequent customer review using feedback enhance product emergent fashion For component delivery delivery interval reduced hour minute instead week month In component team culture frequent integration component part continuous delivery mechanism Continuous integration includes frequent code merges frequent build running automated test The team consume component need confidence integrate lower layer system Continuous integration really want get cutting edge continuous delivery Humble Farley give consumer team required confidence Scrum Scrums used synchronization team Every team select one two representative attend meeting During meeting representative team update attendee progress impediment team facing since last meeting One thing keep mind purpose meeting different daily The impediment reporting Scrum Scrums restricted related dependency team impact multiple team Agile development continuous improvement Multiteam retrospective held ensure team learn get better working together addition improving agility within team The team could use someone one team outside person facilitator retrospective The team choose one two action item retrospective work upcoming iteration The step mentioned intended help team mitigate risk associated component team environment However effort made reorganize feature team much early possible Feature team best equipped deliver feature Obviously may always possible get rid component team For must work component team environment one reason another article help provide better interaction team That turn drive better quality delivery Tags You must comment Copyright SCRUM ALLIANCE All right reserved Innovation come producer customer  Edwards Deming Features Components embodies two key abstraction use build software system Agile value delivery focus emphasizes constituent solve user need differentiate solution However resilient system built provide separation concern foster logic improved testability These provide foundation fast system evolution Both abstraction exist may commonly recognized Particularly enterprise Agility interesting discussion organize team around feature component mix Getting organization right drive innovation scalable system grow knowledge grows Getting wrong lead either This article describes abstraction context agile system development provides organizational guidance continually evolve agile organization optimize velocity accelerate value delivery The architecture software system described part term The interact deliver consistent behavior constitute Teams build system component provide scalability flexibility common function maintainability The creation specific component driven number motivation The word component pretty broad term SAFe refer following A whose primary area concern restricted specific component set component system Accordingly team backlog typically consists opposed well It make sense create component team component Prior Agile system development program typically already organized around component subsystem old mantra organization follows architecture Therefore Agile transformation sometimes simplest first step create follow existing organizational pattern Figure illustrates The disadvantage obvious This continuing drag velocity team spend much time discussing dependency team testing behavior component rather able deliver end user value And certainly need component component team In case best create team organized around functionality Each team small team team capable delivering user value Figure illustrates Feature team operate primarily user story refactors spike However technical story may also occasionally occur backlog Even though called team always true team complete feature Features big consumed one Agile team split multiple user story These turn implemented feature team In addition notion feature OR component team bit simplistic many effective team responsibility number However summary Given mix likely appropriate two main factor drive Figure illustrates parameter curve used decide choice one another This mixed model emphasizes additional capability needed drive program velocity This article describes minor conundrum organizing Agile program around feature team component team Evolution mix biased towards feature team appears produce highest velocity efficacy Agile development Simply dependency fewer easier manage value throughout higher feature team Even recognize word abstraction one person feature may another component To end Agile program must continually inspect adapt indeed reorganize necessary follow value driving market References Last update January Leffingwell et al Scaled Agile Valmont Suite Boulder CO USA Email Phone Weekdays Weekends CLOSED  A team focus creation one component larger product customer would purchase Component team create asset component reused team assemble solution  Team single component focused Contrast A feature team shown Figure team completes many customer one The characteristic feature team listed Applying modern engineering continuous essential adopting feature team Continuous integration facilitates shared code ownership necessity multiple team work time component A common misunderstanding every member feature team need know whole system Not Within feature team organization specialization becomes happens The table Figure show difference feature team traditional component team The table summarizes difference feature team conventional project feature group Most drawback component team explored Feature Teams chapter Scaling Lean Agile Development Figure summarizes What sometimes seen component team structure reinforces sequential development waterfall many queue work package high level WIP many handoff increased multitasking partial allocation A pure feature team organization ideal perspective Value flexibility however criterion organizational design many organization therefore end transition component feature team Caution hybrid model drawback world A frequently expressed reason favor hybrid organization need build infrastructure construct reusable component clean traditionally done within component team But activity also done pure feature team establishing permanent component team How By adding infrastructure reusable component cleanup work Product Backlog giving existing feature feature The feature team long Product Owner work return building feature Different organization require different transition strategy changing component feature team We experience many strategy failed different context A strategy establish one feature team within existing component team organization After team performs well second feature team formed This continues gradually speed organization comfortable This shown Figure Copyright All Rights Reserved In training class frequently discus scaling agile versus To help distinugish two type team important consider nature might typically see type team In class I describe difference simple rule thumb That complex sentence let break using example Let say end customer want following feature If give feature description feature team would appear feature team product backlog shown Figure A feature team would skill perform necessary work get job done In particular assuming architecture team member would work task related GUI database part story shown Figure The blue brick picture feature Remove Product From Inventory green cube task Now let look feature might handled implemented component team rather feature team We start assuming created component team along architectural boundary If architecture would GUI team team database team In scenario would one team could give Remove Product Inventory user story expect would necessary skill complete story Instead would break desired feature three separate story appropriate specific architectural layer component team shown Figure So database team might product backlog item like From database team perspective item look like feature need develop However feature team would one several task make overall story Remove Product Hence feature component team task feature team Figure visually summarizes concept I hope find simple heuristic helpful easily identifying distinguishing component feature team If want dive deeper scale agile feature component team I recommend Agile Alliance member A feature team delivering integrated shape Required field marked While continuing work number larger enterprise facing cultural change new practice adoption organizational challenge large scale agile transformation topic come organize large number agile team effectively implement agile optimize value stream delivery For smaller software enterprise usually issue Teams naturally organize around product application reflect mission The silo tend separate development product management test larger enterprise hopefully exist The team probably already collocated rather distributed across disparate geography Creating agile team mostly matter deciding role individual play rolling standard training At scale however like thing agile problem dramatically different challenge understand work How organize larger number team order optimize value delivery requirement Do organize around feature component product line service While easy answer question question must explored many agile practice many backlog manages vision feature communicated group team team coordinate activity produce larger solution must reflected decision In I described typical organizational model whereby many agile team organized around architecture system There leverage technical skill interest focus building robust component making reliable extensible possible leveraging common technology usage model facilitating reuse I even called team component team perhaps unfortunate label However I also noted We use word component organizing labeling metaphor throughout book Other agile method FDD stress team oriented around feature still others suggest team may oriented around service We use component rather liberally suggest every likely software component represents possible team experience scale component indeed best organizing I particularly pedantic noted organization likely already exist enterprise bad thing given critical role architecture largest system In case approach development new feature implemented affected component team figure illustrates In case agile requirement workflow would put backlog item new feature affected component team They minimize multiplexing across feature implementing series rather parallel Moreover able aggregate need multiple feature architecture component focus building best possible component layer Perhaps reflective bias towards view building software system For get architecture reasonably right unlikely achieve reliability performance feature velocity delivery goal enterprise If happens enterprise may facing refactoring project could measured hundred A frightening thought certain In addition number reason component team effective agile enterprise However current operating premise agile team better job focusing value delivery creates contrary vector topic Indeed traditionally taught almost universally accepted approach organizing agile team organize around The advantage feature team approach obvious team build expertise actual domain usage mode system typically accelerate value delivery one feature The team core competence becomes feature set feature opposed technology stack The team backlog simplified one two feature time That promote fast delivery high value added feature Other author support approach well For example Agile Project Management Highsmith state Of course mean say team must organized feature engineering team end build feature final product though perhaps logical inference Others including Larmon Vodde directly adamantly promoted concept feature team rational well perhaps see Craig Larman comment way organize agile team They note Larman Vodde state specifically avoid component team indeed spend entire chapter good coverage aspect topic However author also point several challenge feature team approach including Not mention potential dislocation team member organization aligns around boundary So agile enterprise face conundrum I asked additional expert opinion I providing opinion well next post References Highsmith Jim Agile Project Management   Leffingwell Dean Scaling Software Agility Best Practices Large Enterprises  Addison Wesley Larmon Craig Bas Vodde  Scaling Lean Agile Development Addison Wesley hi dean someone pinged topic discussion thx raising topic ba write intend write feature team rational way organize team rather choice organizational design including team structure evaluated term global goal optimization maximizing fast value delivery minimizing disruption etc toyota lean perspective first agile principle global goal relates delivery value real customer context measure one design delay handoff design le delay handoff design better respect particular measure ideal feature team minimizes delay handoff whereas opinion pure system component team per definition part work customer feature delay handoff create group passing WIP item analyst architect programmer tester feature team better model depending global goal worth identifying discussion point note org design feature team may optimize flow value raise problem solvable system thinking perspective however optimizing around addressing one issue minimizing org disruption suboptimization perspective value suboptimization group agreed mimimizing disruption system global goal one visit org organized around component team successful transition feature team one asks delivery value faster answer also common investigating org say planning coordination simpler learning arises working feature team useful increase degree freedom reduce truck number bottleneck specialist look forward future comment others regard craig concurrent access code problem frequent code versioning system support merges experience problem group devs working shared code base question tried bigger number How much scale shared responsibility design difficulty achieving reuse infrastructure work solved planning design session organizrd also people rotating pair different team question tried bigger number How much scale Not mention potential dislocation team member work broader skill product knowledge imho real point think broader skill product knowledge It real point actually huge problem It naturally depends team build team correctly variety domain knowledge important enough seniority problem solving skill obstacle A real life experience unit one year feature team team working pretty comfortably quite large domain set one maintenance shift delivering solution customer problem thank feedback found interesting concurrent access code also google us approach I described group devs google work developer committing several thousand change repo per day spike change per minute always release head system released independently info come keynote speech XpDay London Mark Striebeck engineering manager Google Beware Conway law design system constrained produce design copy communication structure organization Regards Mike asplake Mike I familiar quote though I sure I ever really understood people seem use make variety different even conflicting point How think applies case In many way inevitable something ob I seen team whose main focus support one system find difficult replace especially new system different scope big rewrite syndrome avoided I also seen awkward organisation uncomfortably span business function deliver equally awkward system Slightly subject successful project team I definitely favour Not sure well transition maturity though I think I prefer idea feature team instead component team mean one team control whole end end process working mean much easier get thing done much le reliant people On hand seems like lot organisation choose set team component perhaps seems make sense expert certain technology together I sure Doing increase communication overhead I seen lead duplication code across different layer noone know exactly done layer It also seems within team end u v mentality really helpful team reliant dividing team component Certainly interesting topic good point raised Cheers Mark While used feature team successfully situation one challenge I find I see need team provide level support ensure backup team member In component team perhaps appropriate background Functional team group people know particular part codebase Any one provide support codebase backup someone sick In team goal anyone team able work area inevitably end specialist And come time deal support issue someone sick miss specialist We manage issue using combination team functional team Jim Fill detail click icon log You commenting using account You commenting using Twitter account You commenting using Facebook account You commenting using account Connecting Order Amazon Moving away component team difficult necessary step want adopt approach For example I first began consult certain game studio team organized around specific element object would exist video game developing There separate team character There weapon team vehicle team This led problem weapon weak kill monster color dark show secret passage obstacle frustrated even patient player The studio clearly needed change team structure On traditional corporate project see equivalent problem team organize around layer application including If structuring team around layer architecture wrong approach better Rather organizing around component team project ideally responsible delivery working tested feature There many advantage organizing multiteam project feature team Of course occasion creating component team still appropriate example new capability used multiple team risk multiple solution developed problem high Overall however vast majority team large project feature team Additional advice feature component team found Chapter Team Structure Please provide name email send sample chapter send short weekly tip Mike succeed agile Please provide name email send sample chapter send short weekly tip Mike succeed agile Your privacy important u wo share email anyone You unsubscribe time Posted Scrum Masters product owner develop habit making statement rather asking How much authority must agile team given considered self organizing And Even though everyone may work product backlog item still worth full team There many thing great Scrum Master easy overlook The tip I blogged recently question whether Scrum team ever get good Over time Scrum team take Scrum Master duty Does 
downstream	In refers direction away distributed qualification For example patch offered developer maintainer software project If accepted developer maintainer include patch software fork either immediately future For contrast see code sent toward original development team With speaker exhibitor attendee DECM world biggest conference expo capital project turnaround maintenance professional Small Medium Mega Projects Shutdown Turnaround Outages Reliability Maintenance Plant Digitalization Delegates Exhibiting Companies Conference Speakers Conference Sessions Dedicated Conference Tracks Owner Operator Attendance biggest downstream brand showcase DECM Expo Hall speaker conference session dedicated track focusing capital project turnaround maintenance Founder Head Sector Petrochemical Update Email US Global Head Business Development Petrochemical Update Email US Global Senior Conference Director Petrochemical Update Email US Global organised Site The usually divided three major sector The downstream sector well marketing distribution derived The downstream sector reach consumer product LPG well hundred Midstream operation often included downstream category considered part downstream sector Crude oil mixture many variety usually many The process commonly includes convert gaseous Raw natural gas also may contain gaseous hydrogen sulphide removed plant gas distributed consumer The removed refining processing crude oil natural gas subsequently converted byproduct elemental sulphur In fact vast majority metric ton sulfur produced worldwide byproduct sulphur refinery natural gas processing plant In ISO define downstream definition section business process commonly industry associated activity We offer experienced professional exciting opportunity hone skill grow career Our career development program help student recent graduate develop valuable professional skill Imagine global career endless opportunity At Chevron team best brightest location around world create innovative energy solution Begin career Chevron work future energy shaped Use talent accomplish ever thought possible transform passion human energy fuel human progress As member Downstream Chemicals Engineering Development Program join select group talented engineer track develop project management leadership technical skill downstream environment Ideal candidate Henry AEO Product Development Specialist The Engineering Development Program program consisting four rotational assignment designed meet individual development career aspiration well Chevron business need You gain detailed understanding global operation energy industry overall exposed Chevron downstream value chain Your rotational assignment set following business area organization one world largest supplier finished lubricant leading manufacturer premium base oil including marine lubricant coolant grease recognized quality performance technology around world integrates optimizes fuel value chain crude customer North Latin America providing safe reliable efficient terminal operation transportation service location Americas Together organization provide advanced product industrial commercial consumer application three worldwide brand Chevron Texaco Caltex Together organization provide advanced product industrial commercial consumer application three worldwide brand Chevron Texaco Caltex Your rotational assignment may include Most rotational assignment located San Francisco Bay Area California Gulf Coast region We look individual willing relocate different assignment within outside United States depending business need preference Some rotational assignment may require international travel An engineering role Chevron offer variety opportunity develop project management leadership technical skill environment Throughout program participate personalized skill development activity attend training workshop class enhance knowledge Chevron methodology develop project management skill You receive guidance dedicated program manager mentoring senior leader Downstream Chemicals organization Your career path take many direction possibility limitless Chevron Downstream Chemicals Graduate Development Program attracts MBA graduate university Chevron Corporation All right reserved What design software development mean This question came site linguist etymologist serious English language enthusiast Upstream component part system component depends job If design upstream component change ability component function may affected If upstream component bug bug may manifested component Downstream component part system component affect Changes component ripple component downstream component Consider application consists database tier application tier The database tier would considereded upstream application tier Upstream well origin software Downstream downwards ocean use case Open Source developer downstream build application tool finished product Those upstream actually work product released If develop software depend stability upstream development And work software downstream developer I think software engineering jargon English way I understand downstream design application developer take tool already developed use complete application Using already produced software library decision library capability would already made downstream With upstream design application developer consulted involved development library application work even really begun If going software company focusing audio software example might need develop library cover range software plan develop It would nice able library developer sit application developer app devs provide input want Upstream customized make much expensive potentially produce better end product Thank interest question Because attracted spam answer removed posting answer requires site Would like answer one instead asked viewed active site design logo Stack Exchange Inc user contribution licensed World leading event Downstream Engineering Construction Maintenance proffessionals working accross Petrochemical Refining LNG industry Commercial shipping receiving good globally involves international logistics Ryan Images Upstream downstream business term applicable production process exist within several industry Industries commonly use terminology include metal industry oil gas biopharmaceutical biotechnology industry Upstream downstream midstream make stage production process industry The upstream stage production process involves searching extracting raw material The upstream part production process anything material processing material This part process simply find extract raw material Thus industry relies extraction raw material commonly upstream stage production process In general sense upstream also refer part production process relating extraction stage In petroleum industry locating underground underwater oil reserve characterizes upstream process Additionally upstream process industry involves bringing oil gas surface Extraction well represent example structure operating stage process The upstream stage production process may also manifest supplier providing raw material manufacturer business ultimately process material The downstream stage production process involves processing material collected upstream stage finished product The downstream stage includes actual sale product business government private individual The type end user vary depending finished product Regardless industry involved downstream process direct contact customer finished product In oil gas industry downstream process consists converting crude oil product selling product customer Thus oil refinery represent structure operate within downstream process However kind plant process raw material may qualify operating within downstream stage production A company combine upstream downstream process integrated company Brian Bass written topic accounting trend Account Today He work senior auditor specializing manufacturing financial service company one Big accounting firm Bass hold master degree accounting University Utah Outbound Inbound Logistics What Is Internal Customer External Customer Five Functions Management Leading What Is Difference Between Efficiency Effectiveness Business 
dynamic	In field research pertaining program running DSU currently widely used industry However researcher developed wide variety system technique implementing DSU These system commonly tested program Current operating system programming language typically designed DSU mind As DSU implementation commonly either utilize existing tool implement specialty These compiler preserve semantics original program instrument either source code object code produce dynamically updateable program Researchers compare variant program original program ass safety performance overhead Any running program thought current program state current program code Dynamic software updating system transform running program new version In order state must transformed representation expects This requires function Thus DSU transforms program An update considered running program reduced point tuple reachable starting point new version program The location program dynamic update occurs referred Existing DSU implementation vary widely treatment update point In system update occur time execution compiler attempt infer good location update point also use update point require developer manually specify name update point Updating system differ type program change support For example support code change function support change state representation This Ksplice primarily target security change rather general update In contrast update program program capable executed even one written different programming language Systems designer extract valuable performance safety assurance limiting scope update For example limit scope update update pas safety check The mechanism used transform code state influence kind update system support DSU system tool also evaluated clarity developer Many DSU system require program pas various static analysis While analysis prove property program valuable DSU nature sophisticated difficult understand DSU system use static analysis might require use specialized compiler Some DSU system require neither static analysis specialty compiler Programs updated DSU system referred Academic publication DSU system commonly include several target program case study dynamic updating target various system Since program written support dynamic updating mind retrofitting existing program valuable mean evaluating DSU system practical use The problem space addressed dynamic updating thought intersection several others Examples include As example database must previous version file format must accomplish type state transformation expected dynamic updating system Likewise program plugin architecture must able load execute new code runtime Similar technique sometimes also employed purpose remove conditionally load runtime recombine remaining code minimize memory footprint improve speed The earliest precursor dynamic software updating In redundant environment spare system exist ready take control active computation event failure main system These system contain main machine The hot spare would periodically seeded primary system In event failure hot spare would take main machine would become new hot spare This pattern generalized updating In event update hot spare would activate main system would update updated system would resume control The earliest true Dynamic Software Updating system namic dification ystem Presented PhD dissertation Insup Lee DYMOS fully integrated system access interactive user interface compiler runtime variant source code This enabled DYMOS update existing program DSU system must load new code running program transform existing state format understood new code Since many motivational DSU example deploying security fix live vulnerable system DSU system must provide adequate Some DSU system also attempt ensure update safe applying There one canonical solution problem Typically DSU system performs well one problem area others For example empirical testing dynamic update indicates increasing number update point result increased number unsafe update Most DSU system use unit code update however newer DSU system implement update If target program implemented language VM use existing infrastructure load new code since modern virtual machine support runtime loading use case besides DSU mainly The support runtime code loading DSU system targeting utilize feature In native language DSU system use specialized compiler insert indirection program At update time indirection updated point newest version If DSU system use compiler insert indirection statically insert runtime Binary rewriting process writing code memory image running native program function While requires static analysis program highly load new program code via starting entirely new program either The existing program state transferred new program space During update program state must transformed original representation new version representation This referred A function transforms state object group object referred DSU system either attempt synthesize transformer function require developer manually supply Some system mix approach inferring element transformer requiring developer input others These transformer function either applied program state lazily piece state accessed eagerly transforming state update time Lazy transformation ensures update complete constant time also incurs overhead object access Eager transformation incurs expense time update requiring system transformer run However eager transformation allows compiler fully optimize state access avoiding overhead involved lazy transformation Most DSU system attempt show safety property update The common variant safety checking type safety update considered safe result new code operating old state representation vice versa Type safety typically checked showing one two property A program considered updated function exists update time This prof safety control never return old code would access new representation data another way prove type safety section code considered safe access state given type way requires knowledge type representation This code said access state may access state It possible prove disprove type section code DSU system Ginseng us prove type safety If function proven updated even live stack since cause type error accessing state using old representation Empirical analysis activeness safety Hayden et show technique permit correct update deny erroneous update However manually selecting update point result zero update error still allows frequent update availability DYMOS notable earliest proposed DSU system DYMOS consists fully integrated environment program written derivative giving system access command interpreter source code compiler runtime environment similar In DYMOS update initiated user executing command interactive environment This command includes directive specifying update occur called The information available DYMOS enables enforce update respect running target program DSU system target making one specialized DSU system support target program Ksplice us determine change current updated version Linux kernel us binary rewriting insert change running kernel Ksplice maintained commercial venture founded original author Ksplice acquired July Ksplice used commercial basis exclusively distribution developed alternative live kernel patching likewise They allow change applied running Linux kernel relying live patching mechanism established The primary difference kGraft kpatch way ensure runtime consistency updated code section applied kGraft kpatch submitted inclusion April May respectively minimalistic foundation live patching merged Linux kernel mainline kernel version released April Since April ongoing work porting kpatch kGraft common live patching core provided Linux kernel mainline However implementation consistency mechanism required safe transition original patched version function delayed provided Linux kernel may unreliable situation involve without proper result porting work remains progress September In attempt improve reliability kernel call stack specialized userspace utility also developed purpose checking kernel ensuring call stack always maintained also open possibility achieving reliable call stack part message Ginseng DSU system It DSU system use safety technique allowing update function live stack long make concrete access updated type Ginseng implemented written using framework This compiler insert indirection function call type access enabling Ginseng lazily transform state cost imposing overhead entirety program execution Ginseng compiler prof property entire initial program dynamic patch Later version Ginseng also support notion transactional safety This allows developer annotate sequence function call logical unit preventing update violating program semantics way detectable either activeness safety safety For example two version examined Ginseng author important user verification code moved two function called sequence If first version first function executed update occurred new version second function executed verification would never performed Marking section transaction ensures update prevent verification occurring UpStare DSU system us unique updating mechanism To update program UpStare developer specifies mapping possible stack frame UpStare able use mapping immediately update program point number thread function live stack PoLUS DSU system It able update unmodified program point execution To update function rewrite prelude target function redirect new function chaining redirections multiple version This avoids overhead function updated Katana research system provides limited dynamic updating similar Ksplice fork binary The Katana patching model operates level ELF object thus capacity long compilation target ELF Ekiden Kitsune two variant single DSU system implement style DSU program written Rather updating function within single program Ekiden Kitsune perform update whole program transferring necessary state two execution While Ekiden accomplishes starting new program using idiom serializing target program state transferring Kitsune us perform state transfer Kitsune derived Ekiden codebase considered later version Ekiden Ekiden Kitsune also notable implemented primarily library rather specialized runtimes compiler As use Ekiden Kitsune application developer must manually mark state transferred manually select point program update occur To ease process Kitsune includes specialized compiler implement writing state transformer support Dynamic Software Updating though commonly referred Erlang requires safety guarantee update Erlang culture suggests developer write defensive style gracefully handle type error generated updating Pymoult prototyping platform dynamic update written Python It gather many technique system allowing combination configuration The objective platform let developer chose update technique find appropriate need For example one combine lazy update state Ginseng changing whole code application Kitsune Ekiden Dynamic Signal trusted hundred world largest enterprise provider Bayhill Drive Suite San Bruno California Facebook Twitter LinkedIn Dynamic Signal All right reserved Direct Thank visiting You using browser version limited support CSS To obtain best experience recommend use date browser turn compatibility mode Internet Explorer In meantime ensure continued support displaying site without style JavaScript A Nature Research Journal Article Heterologous pathway used metabolic engineering may produce intermediate toxic cell Dynamic control pathway enzyme could prevent accumulation metabolite strategy requires sensor largely unknown detect respond metabolite Here applied transcript array identify promoter respond accumulation toxic intermediate used promoter control accumulation intermediate improve final titer desired product We apply approach regulate farnesyl pyrophosphate FPP production isoprenoid biosynthetic pathway This strategy improved production amorphadiene final product twofold inducible constitutive promoter eliminated need expensive inducer reduced acetate accumulation improved growth We extended approach another toxic intermediate demonstrate broad utility identifying novel system dynamic regulation Already subscriber online access                                                                                                               The author thank Pitera pADSmut plasmid Holtz BglBrick plasmid promoter LacI removed thanks Fundacion Ramon Areces PostDoc fellowship This work part Department Energy Joint BioEnergy Institute supported US Department Energy Office Science Office Biological Environmental Research contract Lawrence Berkeley National Laboratory US Department Energy Present address Department Energy Environmental Chemical Engineering Washington University Louis Missouri USA   conceived project  performed growth experiment microarrays construction responsive promoter  constructed analyzed biosensor analyzed FPP sensor  performed metabolite analysis   performed proteomic analysis  directed aspect project  wrote manuscript  financial interest Amyris Lygos Correspondence Supplementary Figures Supplementary Tables online Current interest material driven part ability dramatically alter optoelectronic property strain phase engineering A combination approach applied transition metal dichalcogenide TMD monolayers induce displacive structural transformation semiconducting H phase We classify transformation Group VI TMDs formulate multiscale modeling framework describe evolution microstructural domain morphology elastically bendable monolayers We demonstrate morphology mechanical response controlled via application strain either uniformly local probe generate functionally patterned conductive domain Such system form dynamically programmable electromechanical material capable rapid local switching domain qualitatively different transport property This enables dynamic drawing localized conducting region otherwise semiconducting TMD monolayer opening several interesting functionality ability dynamically rewire device real time The Supporting Information available free charge DOI calculation mesoscale governing equation structurally heterogeneous bendable monolayer simulation method model coupling response additional figure reference Citation data made available participant Linking service For comprehensive list citation article user encouraged perform search Sixteenth Street Washington DC A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition News Industries Jobs Games Videos Schools Resources Webinars Home Forums Forums Tutorials News Industries Jobs Games Videos Schools Resources Webinars Login Logout More Games Copyright All right reserved Registration use site constitutes acceptance Home Events Community Multimedia Portals Special Editions Research Journals Reviews Journals Trends In Partner Journals Information Access provided Maximizing production desired small molecule one primary goal metabolic engineering Recent advance nascent field synthetic biology increased predictability production engineered cell growing constant condition The next frontier create synthetic pathway adapt changing environment ISSN 
E-R  diagram	With SmartDraw You Can Create More Different Types Diagrams Charts Visuals An entity relationship diagram ERD show relationship entity set stored database An entity context component data In word ER diagram illustrate logical structure database At first glance entity relationship diagram look much like It specialized symbol meaning symbol make unique Peter Chen developed ERDs Since Charles Bachman James Martin added slight refinement basic ERD principle An ER diagram mean visualizing information system produce related There five main component ERD When documenting system process looking system multiple way increase understanding system ERD diagram commonly used conjunction display content data store They help u visualize data connected general way particularly useful constructing relational database Here best practice tip constructing ERD SmartDraw LLC Learn essential ER Diagrams ER Models along origin us example component limitation guideline draw using An Entity Relationship ER Diagram type flowchart illustrates entity people object concept relate within system ER Diagrams often used design debug relational database field software engineering business information system education research Also known ERDs ER Models use defined set symbol rectangle diamond oval connecting line depict interconnectedness entity relationship attribute They mirror grammatical structure entity noun relationship verb ER diagram related data structure diagram DSDs focus relationship element within entity instead relationship entity ER diagram also often used conjunction data flow diagram DFDs map flow information process system Peter Chen Peter Chen currently faculty member University Pittsburgh credited developing ER modeling database design While serving assistant professor MIT Sloan School Management published seminal paper titled The Model Toward Unified View In broader sense depiction interconnectedness thing date back least ancient Greece work Aristotle Socrates Plato It seen recently Century work like Charles Sanders Peirce Gottlob Frege By Charles Bachman Brown working close predecessor Chen approach Bachman developed type Data Structure Diagram named Bachman Diagram Brown published work system modeling James Martin added ERD refinement The work Chen Bachman Brown Martin others also contributed development Unified Modeling Language UML widely used software design ER Diagrams composed entity relationship attribute They also depict cardinality defines relationship term number Here glossary A definable person object concept data stored Think entity noun Examples customer student car product Typically shown rectangle A group definable thing student athlete whereas entity would specific student athlete Other example customer car product Same entity type defined particular point time student enrolled class first day Other example Customers purchased last month car currently registered Florida A related term instance specific person car would instance entity set Entities categorized strong weak associative A defined solely attribute An associative entity associate entity element within entity set Refers attribute uniquely defines entity entity set Entity key super candidate primary A set attribute one together define entity entity set A minimal super key meaning least possible number attribute still super key An entity set may one candidate key A candidate key chosen database designer uniquely identify entity set Identifies relationship entity How entity act upon associated Think relationship verb For example named student might register course The two entity would student course relationship depicted act enrolling connecting two entity way Relationships typically shown diamond label directly connecting line The entity participates relationship A property characteristic entity Often shown oval circle A property characteristic relationship versus entity Attributes categorized simple composite derived well Means attribute value atomic divided phone number spring attribute Attributed calculated otherwise derived another attribute age birthdate More one attribute value denoted multiple phone number person Just one attribute value The type combined simple attribute composite attribute Defines numerical attribute relationship two entity entity set The three main cardinal relationship A would one student associated one mailing address A One student register multiple course course single line back one student Students group associated multiple faculty member faculty member turn associated multiple student Cardinality shown depending symbol shown The minimum maximum number apply relationship Diagramming quick easy Lucidchart Start free trial today start creating collaborating ER component equated part speech Peter Chen This show ER Diagram compare grammar diagram The database query language ERROL actually mimic natural language construct ERROL based reshaped relational algebra RRA work ER model capturing linguistic aspect There several notation system similar vary specific Following example ERD diagram made system ER model data model typically drawn three level detail Note similar detail scope level exist type diagram data flow diagram contrast software engineering three schema approach divide information bit differently Sometimes engineer branch ER diagram additional hierarchy add necessary information level database design For example may add grouping extend superclass subclass Define purpose scope analyzing modeling Identify entity involved When ready start drawing rectangle system choice shape labeling noun Determine entity related Draw line signify relationship label Some entity may related fine In different notation system relationship could labeled diamond another rectangle directly top connecting line Layer detail adding key attribute entity Attributes often shown oval Show whether relationship Show level detail necessary purpose You might want draw conceptual logical physical model depending detail needed See description level Watch redundant entity relationship If troubleshooting database problem watch hole relationship missing entity attribute Make sure entity relationship labeled You translate relational table ER diagram back forth help achieve goal Make sure ER diagram support data need store Lucidchart let easily create ER diagram smooth placement shape line label With editing taking place cloud easy collaborate colleague You share diagram digitally via print Contact sale Lucid Software Inc An describes thing interest specific domain knowledge An ER model composed entity type classify thing interest specifies relationship exist instance entity type In ER model commonly formed represent thing business need remember order perform business process Consequently ER model becomes abstract defines data information structure implemented typically modeling developed database design published paper However variant idea existed previously Some ER modeler show super subtype entity connected relationship ER model used also specification An model usually result systematic analysis define describe important process area business It define business process present business data schema graphical form It usually drawn graphical form box connected line express association dependency entity An ER model also expressed verbal form example Entities may characterized relationship also additional property include identifier called primary key Diagrams created represent attribute well entity relationship may called diagram rather model An ER model typically implemented In simple relational database implementation row table represents one instance entity type field table represents attribute type In relationship entity implemented storing primary key one entity pointer foreign key table another entity There tradition model built two three level abstraction Note hierarchy used kind specification different The first stage design us model describe information need type stored The technique used describe overview classification used term relationship certain In case design information system based database later stage usually called logical design mapped turn mapped physical model physical design Note sometimes phase referred physical design An may defined thing capable independent existence uniquely identified An entity abstraction complexity domain When speak entity normally speak aspect real world distinguished aspect real world An entity thing exists either physically logically An entity may physical object house car exist physically event house sale car service concept customer transaction order exist concept Although term entity one commonly used following Chen really distinguish entity An category An entity strictly speaking instance given There usually many instance Because term somewhat cumbersome people tend use term entity synonym term Entities thought Examples computer employee song mathematical theorem A relationship capture entity related one another Relationships thought linking two noun Examples relationship company computer relationship employee department relationship artist song relationship mathematician conjecture The model linguistic aspect described utilized database ERROL mimic construct ERROL implementation based RRA relational algebra adapted model capture linguistic aspect Entities relationship attribute Examples entity might SSN attribute relationship may attribute Every entity unless must minimal set uniquely identifying attribute called entity diagram show single entity single instance relation Rather show entity set entity entity type relationship set relationship relationship type Example particular entity The collection song database entity set The relationship child lunch single relationship The set relationship database relationship set In word relationship set corresponds relationship corresponds member relation Certain relationship set may indicated well Chen proposed following rule thumb mapping natural language description ER diagram Peter Chen Physical view show data actually stored In Chen original paper give example relationship role He describes relationship marriage two role husband wife A person play role husband marriage relationship another person play role wife marriage These word noun That surprise naming thing requires noun Chen terminology also applied earlier idea The line arrow diagram owes earlier Chen relationship diagram Another common extension Chen model name relationship role verb phrase It also become prevalent name role phrase Correct noun case Thus rather etc The use noun direct benefit generating physical implementation semantic model When two relationship possible generate name immediately meaningful Modifications original specification beneficial Chen described As aside notation used Oracle Designer us minimum cardinality analogous optionality role maximum cardinality crow foot In Elmasri Navathe others preference role minimum maximum cardinality Recent researcher Feinerer Dullea et al shown coherent applied relationship order greater In Dullea et al one read A across notation used UML effectively represent semantics participation constraint imposed relationship degree higher binary In Feinerer say Problems arise operate semantics used UML association Hartmann investigates situation show different transformation fail also As see next page interpretation introduces several difficulty prevent extension simple mechanism binary association Chen notation modeling us rectangle represent entity set diamond represent relationship appropriate attribute relationship If entity set participates relationship set connected line Attributes drawn oval connected line exactly one entity relationship set Cardinality constraint expressed follows Attributes often omitted clutter diagram diagram technique often list entity attribute within rectangle drawn entity set Related diagramming convention technique Crow foot notation used SSADM Crow foot diagram represent entity box relationship line box Different shape end line represent cardinality relationship Crow foot notation used consultancy practice Many consultant CACI including Richard Barker subsequently moved UK developed early version Oracle tool introducing notation wider audience In using modeled database user encounter two well known issue returned result mean something result assumed query author The first trap It occurs master table linking multiple table relationship The issue derives name way model look draw diagram linked table master table This type model look similar type model used When trying calculate sum aggregate using standard SQL master table get unexpected incorrect result explanation missing The solution either adjust model SQL This issue occurs mostly database decision support system software query system sometimes includes specific method handling issue The second issue trap A chasm trap occurs model suggests existence relationship entity type pathway exist certain entity occurrence For example Building Rooms hold Computers You would expect able query model see Computers Building However Computers currently assigned Room repair somewhere else shown list You need another relation Building Computers capture computer building This last modelling issue result failure capture relationship exist real world model See detail A semantic model model concept sometimes called platform independent model It intensional model At latest since well known An extensional model one map element particular methodology technology thus platform specific model The UML specification explicitly state association class model extensional fact considering extensive array additional adornment provided specification provided prior candidate semantic modelling language Peter Chen father ER modeling said seminal paper In original article Chen explicitly contrast diagram record modelling technique Several author also support Chen program Chen accord philosophic theoretical tradition time Ancient Greek philosopher Socrates Plato Aristotle BC modern associate knowledge apprehension unchanging Forms The form according Socrates roughly speaking archetype abstract representation many type thing property relationship one another Lucidchart free ER diagram tool make database modeling fast efficient collaborative Start scratch template easily draw ER diagram online We shape need make professional entity relationship diagram When use Lucidchart ER diagram software finished work look Lucidchart perfect creating wide range function allows create dozen diagram well Use build network UML diagram flowchart mockups You collaborate instantly Lucidchart With chatting commenting member team page Plus document stored safely cloud available whenever need Some ER diagram generator clunky hard use With Lucidchart simply open ER diagram library begin dragging dropping shape Lucidchart give simplicity without skimping power You start making ERD Lucidchart We make diagramming intuitive fun When open new document Lucidchart instant access dynamic toolbox Our clean inviting interface take complexity diagramming In minute professional ERD ready share If need import old file collaborate using Microsoft Visio use Lucidchart import export function put everything right place We work Lucidchart fully integrated G Suite quickly open application Google environment Take advantage integration Jira Software Confluence streamline workflow Our user agree easy make diagram Lucidchart We also make simple showcase work Download standard file format embed ERDs HTML webpage More Examples Over user trust Lucidchart keep page Contact sale Lucid Software Inc Professionally designed template get started quickly Support many different notation type collaboration work team Access diagram anywhere Creately Mobile Shopping Mall Management System ER Diagram Hospital Management System Restaurant Management System Creately award winning diagram software renowned ease use Drawing matter dragging dropping smart object semi automate process adding relationship connecting object And feeling lazy take advantage With Creately drawing ER diagram becomes simply easy Just start drawing clicking button see difference Creately take care drawing part allowing focus structure database Our creation automatic object make easy add attribute relationship etc ER diagram No need draw line connect object added automatically And collaboration feature make easy work team Multiple people work online diagram modify seeing change instantly This feature alone save lot time spent back forth mail discussion Given feature question Creately perfect software You draw complex ER diagram online help colleague teammate Creately ER diagram software support online collaboration allows work together team You share ER diagram one click want see Plus sharing diagram social medium easier Creately easy sharing feature And worry privacy diagram Creately data protection technology completely take care Start modeling database Creately Copyright Cinergix Pty All right reserved Cinergix Pvt Ltd All Rights Reserved Learn create Entity Relationship Diagram tutorial We provide basic overview ERDs give training make ER diagram correct cardinality Entity Relationship Diagrams comprised main category entity attribute relationship Entities object concept associated important customer order product Attributes represent property trait entity customer phone number home address Relationships demonstrate link entity Another main aspect ERD cardinality defines relationship entity numerical way Certain symbol signify minimum maximum relationship different entity Additional ERD information Learn sign Follow u Facebook Twitter Instagram LinkedIn Let u learn ER Model represented mean ER diagram Any object example entity attribute entity relationship set attribute relationship set represented help ER diagram Entities represented mean rectangle Rectangles named entity set represent Attributes property entity Attributes represented mean ellipsis Every ellipse represents one attribute directly connected entity rectangle If attribute divided tree like structure Every node connected attribute That composite attribute represented ellipsis connected ellipse attribute depicted double ellipse attribute depicted dashed ellipse Relationships represented box Name relationship written inside All entity rectangle participating relationship connected line A relationship two entity participating called Cardinality number instance entity relation associated relation When one instance entity associated relationship marked The following image reflects one instance entity associated relationship It depicts relationship When one instance entity associated relationship marked N The following image reflects one instance entity left one instance entity right associated relationship It depicts relationship When one instance entity associated relationship marked The following image reflects one instance entity left one instance entity right associated relationship It depicts relationship The following image reflects one instance entity left one instance entity right associated relationship It depicts relationship Each entity involved relationship Total participation represented double line Not entity involved relationship Partial participation represented single line Copyright All Rights Reserved formerly Diagramly free online diagram software You use flowchart maker network diagram software create UML online ER diagram tool design database schema build BPMN online circuit diagram maker import file Please ensure JavaScript enabled An also called entity relationship model graphical representation entity relationship typically used computing regard organization data within database information system An entity relationship diagram specialized graphic illustrates relationship entity database Also Known As ER Diagram Diagram ERD ER Diagram software excellent communication tool used confirm business requirement provide direction architecture design team move forward physical database design rapidly Edraw Max ideal building entity relationship diagram Chen ERD diagram ORM diagram Martin ERD database model diagram It affordable easy illustrating entity relationship diagram simply drag drop Then add connector among entity relationship shape style color want An additional arrow style attached connector illustrate relationship different entity Works Windows XP Vista Citrix Works bit Windows Compatible Linux distribution Debian Ubuntu Fedora etc Edraw Max support five type entity relationship diagram The different entity relationship diagram using different symbol represent relationship entity database information management project But ER diagram often use box represent entity Diamonds normally used represent relationship oval used symbolize attribute Entities Symbol Entity place object event concept Relationships Symbol Relationship entity The following symbol entity relationship diagram based Chen ERD us rectangle represent entity diamond represent relationship appropriate object If entity set participates relationship set connected line Attributes drawn oval connected line exactly one entity relationship set The following Martin ERD symbol based symbol used Martin notation draw analysis design diagram Object Role Modeling commonly used describes database model information rule analysis ontological analysis data modeling field software engineering object may exist object class belong relationship exist object The step involved Identify entity Determine significant interaction Analyze nature interaction Draw entity relationship diagram When create entity relationship diagram one first thing consider entity wish record information For example family database probably wish record information member house job love contact etc However relational database record detail entity also relationship For example family member assigned house every member appointed charge love job Entities thing wish record information database There relationship entity fall three type Any relationship must resolved two relationship An entity relationship diagram example showing simple database business order process The entity relationship diagram shown image contains six entity supplier customer order item product shipment There five kind relationship supplied requested used included sent In example every entity includes attribute associated entity In example one would likely many different attribute Edraw Max perfect flowchart organizational chart mind map also network diagram floor plan workflow fashion design UML diagram electrical diagram science illustration chart graph beginning 
finish-to-start	Dependencies relationship among task determine order activity need performed There four type dependency relationship Finish Start Predecessor must finish Successor start Land must purchased road building start Start Start Predecessor must start Successor start Road excavating must start Asphalt laid Finish Finish Predecessor must finish Successor finish Laying Asphalt must complete line painting completed Start Finish Predecessor must start Successor finish Road excavating must start line painting completed Dependencies relationship preceding task succeeding task Tasks may multiple preceding task multiple succeeding task The common dependency relationship relationship Task P predecessor must finished task S successor start The least common relationship relationship Project Insight project management software support four dependency relationship The chart show Product Development Activity List may look project team determines task relationship In example relationship used It always easier arrange task term relationship soon possible constraint This dependency type easiest relationship others understand usually result longer normal schedule This give schedule You may utilize relationship way shrink duration overall schedule If use soon possible able change schedule Project Insight couple mouse click Project Insight All Rights Reserved Follow Us Proudly developed supported USA In link amongst The define term refers term turn defined There four standard type dependency considered natural dependency The recommends Typically predecessor activity would finish prior start successor activity activity known FS relationship Sometimes necessarily overlap activity option may selected use SS FF SF relationship possible FS logical relationship used If type relationship used shall used sparingly full understanding relationship implemented scheduling software used Ideally sequence activity defined way start every activity logical relationship predecessor finish every activity logical relationship successor SF rarely used generally avoided Microsoft recommends use SF dependency scheduling It easily shown however would work used resource levelling delay successor activity activity shall finished way finish later start logical predecessor activity thus fulfilling requirement There three kind dependency respect reason existence dependency Early schedule often reflected causal logical discretionary preferential dependency assumption resource would available could made available Since least competent project manager scheduler recognized schedule must based resource availability The method necessitates taking account resource dependency well Dependencies modified lead lag Both lead lag applied type dependency defines amount time whereby successor activity delayed respect predecessor activity For example When building two wall novel design one might start second wall day first second team learn first This example relationship In accordance amount time whereby successor activity advanced respect predecessor activity For example project construct new office building landscaping could scheduled start prior scheduled punch list completion This would shown lead If building building ca paint wall putting water pipe wall It would much faster le expensive put pipe first put cement actually build wall around pipe finally paint wall Activity A Activity B said Relationship Activity B start Activity A delay X Real life example simulated Relation relationship rarely implemented project management software probably feature easy create contradictory dependency Focusing Best Practices The strength integrity project schedule built based upon definition deliverable activity estimation duration effort well organization sequencing work effort All three element important one I think project manager struggle organizing deliverable activity manner reflects way work actually performed completed Organizing work involves developing work breakdown structure WBS arranged decomposed structured manner sequencing deliverable activity based upon logical relationship dependency deliverable activity This blog focus establishing managing dependency understandable create reasonable workflow This discussion includes using project management tool like MS Project efficiently define managing dependency within project schedule Understanding type dependency inherent work need completed one important element creating strong project schedule There primary type dependency Creating external dependency within project schedule accomplished couple different way Dependency relationship utilized link two task logical manner possible As case dependency type relationship may represent hard relationship must happen certain manner soft relationship relationship set PM establish logical flow project activity The valid relationship MS Project In addition establishing relationship predecessor successor utilized create lead acceleration overlap lag delay gap schedule activity Here couple example appropriate use lag lead project schedule Dependencies created MS Project using Predecessor Successor field The Predecessor task completed prior current task Successor task completed current task The dependency entered ID Predecessor Successor task Type Dependency Relationship FS SS FF SF Lag two task Below example creating Predecessors Successors within MS project schedule Using Predecessors Successors Split view provides good picture dependency established task Enter email address subscribe blog receive notification new post email Join follower Enter email address subscribe blog receive notification new post email Join follower Kate Luber Available Immediate Download Join Kate Luber Breakout teach envision final image even take shot You go behind scene find break vision order find tool necessary successful shoot From choosing location final edit mind working quickly efficiently manage child short attention span Kate show gather element make vision reality How Kate break vision smaller piece tackle one one bring vision life How Kate plan shoot execute image quickly efficiently manage childrens short attention span return enjoying moment family away camera Learn Kate selects location look ideal shooting location How Kate ass scene shooting plan perfect edit Learn Kate trick drawing viewer image holding attention Learn Kate favorite editing trick strengthen image Learn Kate tip finding processing style Over page PDF detailing Kate image creation process Bonus PDF working backwards find processing style shooting video video Kate hand editing SOOC final image Kate action set Kate Luber lifestyle portrait photographer Oklahoma City As lifelong lover ballet performing art passion photography ignited two daughter born Kate love finding creating magically beautiful moment everyday life Throughout life harnessed analytical mind breaking simple complex task goal make attainable Kate Breakout Finish Start long time favourite Breakout I love tecnical edition simple time make big difference impact photography I new PS LR I video teach lot easy way well explained Thinking finish image smart I changed way I take camera Thanks Kate This brilliant breakout I always admired Kate work editing style She queen colour way brings image life incredible Put together fact one giving person CM forum always willing offer cc know onto winner breakout There beautiful editing video The PDF really make think looking achieve work Goodbye Randomness hello Vision I often admired Kate work intentional shooter clear vision distinct voice Her CC forum way one reason I knew BO would valuable I really connected material since I often shoot hoping meet final vision Her tip planning troubleshooting helpful processing shooting video terrific I think content help beginner photographer also valuable people experienced especially want shoot intention This breakout one PDF editing shooting video full knowledge practical information Her constant feedback personal level I felt like I personal You I definitely keep referring back breakout often This breakout amazing Kate add color tone light make image magical Each editing video show different way achieve effect There much information I definitely watch several time Even child primary focus editing information used type photography This money well spent You go wrong Seriously This fantastic breakout keep getting better daily basis Finish Start much portrait life style tutorial I shot portrait long time landscape macro passion right I found something every video every edit well PDFs pertain almost every type photography I one moment another Kate constant presence board encourage answer question immensely helpful The PDFs easily understood thorough The editing video awesome teaching tool explains hows why editing even added bonus video since class started answer question share knowledge style editing u This far best I spent long time maybe maybe I might inspired borrow someone kid plan shoot Finish Start This breakout amazing And price must regardless photograph The PDF inspiring filled many gorgeous image The editing video amazing I learned much I excited take breakout disappoint This breakout truly amazing If love edit hate edit Kate editing video inspire take image next level She thorough detailed explains everything What I enjoy give thought process hold anything back You get pdf beautiful image get pdf beautiful image along SOOCs note Yes I also like idea going backwards order find vision It make thing easier I going Thank Kate This phenomenal breakout Kate Luber gifted photographer kind generous thorough instructor I learned much watching process great editing video really helped better understand cultivate create personal processing style I awe tremendous amount time energy information provided And Kate image inspiration Don even buy breakout It THAT good Kate amazing artist explains detail process creating truly remarkable work The shooting editing video filled brim tip trick applied one work She excellent teacher breakout filled wealth information inspires push creativity I know I continue learn Run Don Walk Kate breakout Finish Start No matter kind photographer come away tip trick idea excitement try Kate great vision wonderful teaching style She put breakout truly polished product She quite generous information includes really get thinking want produce matter whether shooting people landscape flower I glad refer back whenever I want much take I love breakout I sure Finish Start Kate Luber first official live breakout session I thankful I signed I always admired Kate gorgeous imagery see SOOC image transforms beautiful work art inspiring I learned many different tip apply image I loved active forum answering question giving u bonus content even critique image course breakout Kate pdf full much information video go great detail really apply technique viewing work This breakout want miss This breakout provided wealth information inspiration I loved every single minute I picked many editing tip trick breakout would worth alone Added though beautiful pdfs help explain thought process go making great image break shooting manageable step help achieve vision I able apply I learned image little girl wildlife image Of course also Kate beautiful image throughout provide much inspiration helped latest creative rut Finally come surprise helped numerous time Kate CM forum also constantly present available help breakout forum I say enough great thing breakout feel fired full idea new trick sleeve I loving breakout The Pdf full good idea tip I really love tool provides p video processing shooting one I poor envisioning photo bo really inspirational I glad I purchased breakout Kate amazing photographer In breakout show capture vision I especially love editing video I learned ton already I done material yet I loving breakout Kate talent style shine photography peek inside process extremely helpful anyone looking make photograph stronger She helpful within breakout giving simple effective way make photo tell story want tell I referencing info long breakout close My favorite part editing video well done packed information I already using several tip covered Highly recommend I finished working Breakout record time I might add I addicted breakout sometimes even finish one soooo good I crammed whenever I could find spare minute I always fan Kate work tutorial forum When I saw BO I truly want get I time money yet another breakout I caved I glad I I really enjoy editing Lightroom Photoshop love learning new technique I seen I felt lately I seeing thing I already seen use I hesitant buy editing I want disappointed I learn anything new But I say I really need go back watch Kate tutorial AGAIN I take note time She packed one cool tip trick making vision image become reality I already enjoyed result picture I edited using I learned I definitely highly recommend breakout especially love explore new editing technique I knew breakout Finish Start Kate Luber would amazing Although I small child child focus photography I picked valuable tip trick photography Kate truly master capturing moment Her use light stunning Even used using Photoshop editing Kate make easy follow along editing video Her philosophy imagining finished image great way pick camera intention Kate generous inspiring mentor written breakout truly challenge u slow little think element make image stronger unique As type shooter I often aim capture front beautiful way I think moment hope best Kate breakout give tool I needing try game little improve quality image I creating without changing photographic voice This breakout well worth shooting editing video helpful PDF something I referring back often Jump one live miss extra Fantastic breakout The imagery stunning I hard time concentrating material Go buy You sorry Finish Start wealth information Kate hold nothing back huge fan work make breakout must Finish Start brilliant way think taking portrait It completely changed way I photograph And bonus video information edits improved editing skill tremendously You definitely want sign live Kate help question may She wonderful teacher way putting thing layman term make easier even people like I really surprised much information put breakout When come anything photography related I fly seat pant type person I terrible planning anything especially since I full time working mom much time devote shooting I always huge fan Kate full time working mom also somehow find time make stunning image child Images lifestyle fine art quality truly breathtaking When I heard Kate made breakout devoted process vision I knew breakout made This breakout packed technique inspiration go amazing detail get shot want Finish Start If enough also share editing process detail She generous teacher hold nothing back breakout It clear put heart soul Knowing active Kate forum open I honestly expected lot breakout absolutely delivered I waiting Kate class arrive disappoint I relate mom photographer tip along way spot She give instruction envision execute variety photo give great exercise got pick camera Almost image post pdf give thinking behind also setting She numerous afters editing video I learned She open book give great critique active forum I really feel benefit take class live run Go sign I say enough much I recommend Kate breakout Finish Start Kate really know craft give tool bring image life making intentional choice long pressing shutter This breakout well put together It incredibly rich reading material packed lot inspirational content Taking breakout definitely give freedom get creative image If looking way become master plus get confident Kate take thought process get final image match magical vision want The video favorite part breakout Kate show put thought behind editing She also give tool necessary create encourages learn technique incorporate style I highly recommend sign breakout would like express editing take picture beautiful terrific I looking forward Kate breakout Finish Start since I first heard coming Kate huge encourager forum work beautiful I loving far I even made way way yet I finding reading process fascinating Her imagery completely gorgeous inspiring If follow Kate work also know Photoshop wizard I found I picked lot processing tip breakout breakout worth processing tip trick alone Kate creative think process literally start finish finish start processing huge part clicking shutter final image I looking forward trying Photoshop tip work Kate really present active forum She truly want everyone learn grow So thinking clicking buy breakout live run would great time Kate Breakout Finish Start unique fresh perspective photography I really love explanation vision element make vision Her PDF full amazing eye candy I felt inspired reading I really love photographic style shoot candid created moment discus process detail u For best part breakout editing video minute I already learning new thing Kate master transformation I loved getting peek brain thought process edits I also learned lot new tip trick editing image The bonus PDF also full awesome information finding processing style I think LOT u struggle Kate incredible artist visionary image tell strong story She huge inspiration breakout exceeded expectation Required field marked Project Managers reference project dependency relationship individual task project diagram Preceding task must completed moving next succeeding task All task required achieve sequenced according dependency resource linked task project schedule constructed The project task dependency critical While analysis task dependency large project complex task often requiring computer software consider simple example illustrate concept  Imagine getting bed morning yawning making way kitchen discover forgot preset coffeemaker brew automatically It shake sleep start coffee brewing You know need complete following task Of course proper order process You would press brew completing step A proper sequence event taking account dependency might follows In sequence task could measure coffee filter ground bean Grinding coffee bean predecessor activity measuring coffee filter The measuring step succeeding activity All task predecessor activity step Press Brew Important task include The proper sequence event taking account task dependency Understanding dependency example allows landscaper plan grading digging equipment ensuring availability supply scheduling proper resource step There four type dependency They establish relationship among task They listed order often used There also dependency project Planning dependency fall three category logical preference There four type project planning dependency must able plan manage dependency among task project Dependencies impact scheduling resource activity critical understand relationship looking opportunity improve project schedule There error Please try Please enter valid email address Thank signing Can give example Wikipedia describes like Start finish SF A SF B B ca finish A start I think I ever used I generally thought Start Finish dependency used agree period handover required two activity Consider following scenario In system implementation project would quite normal project personnel provide level support system settling period At point responsibility support must transfer hypothetical example support team For defined period let say two week project resource resource delivering support handover take place one This Start Finish dependency team start support system Project team finish A SF dependency look exactly like FS dependency lead unit time looking network diagram notwithstanding arrow The difference come logic constraint For example FS dependency two day lead saying task scheduled start two day task scheduled finish The assumed logic schedule task start within two day task finish start earlier resource allow start later slipping reason In SF dependency two day lead task start two day task finish else task finish The assumed logic must versus A rough example might use crane hoist heavy object onto floor building construction The work package contains resource human equipment operate crane task It successfully hoist object floor successfully positioned transfer However next work package task contains receiving resource equipment personnel ready start Task although completed target action time ready transfer remain active next package start The output package one input package two must occur together Both David Iain given good example As David said logic driving dependency Most task FS task B ca start task A complete task dependency looked straight SF simply inverts logic task B ca considered complete task A started occurred I always liked example baby sitter want finish minding child cant finish parent return start minding child I think FS dependency useful activity ca finish dependent start Imagine watchman hired take care building night manager tell activity ca finish building administrator come morning The arriving time vary every day watchman finish activity administrator come start working Another example fixed date starting date I place form column removed another already poured cured I know starting date start forming new column fixed date need install rebar column previously Therefore I link column formwork installation b rebar installation SF relationship meaning activity b must start activity considered finished Consider simple example test Microsoft Project see work practically To explain use start finish SF dependency I also explain differs FS dependency You two task Opening day planned Friday need day prepare The task Opening Day move must happen Friday Finish Start Prepare Store Opening run Wednesday Thursday linked FS Opening Day Friday If realise need day prepare change task duration day push task following week happen Start Finish The scenario set task using SF dependency realise need day instead day prepare With SF relationship update duration day keep Opening Day Friday rather move Prepare Store Opening task add duration This mean need start preparation Monday order time Opening Day This term confused misunderstood Even latest edition PMBOK make mess Rather make laughing stock giving example security shift say first security shift second security shift come first shift activity And examine people PMP I strong believer KISS Keep It Simple Stupid Doctrine Take example generator online providing power building Call activity A The generator stop electricity main grid come Call activity involving power main B So predecessor activity A end successor activity B start In network diagram dependency represented follows Box B right Box A represent correct chronological order Arrow start Box B represent activity start end Box A represent activity end This exactly opposite Finish Start dependency This I understood issue relationship used schedule timing successor task task B start finish start task A For example project critical task design construction assemble deliver But task need ready exactly day assembly task start task purchasing electric component purchase fastener Those task scheduled start early enough finish ready day assembly start sooner later Purchasing task finish early waste resource inventory cost store component also component arrive late needed assembly So purchasing component finish day construction start schedule task order finish relative start predecessor task In example start May order finish May start May order finish May On timeline The pink task critical task two dark task dependency task Assemble defined shown The best example Start Finish implementation involves following analysis sake simplicity I provide URL The babysitter example good However concrete example pun intended construction project Let u say buying shed The company sent drawing concrete foundation location foundation bolt set shed The foundation bolt ready cured truck carrying fully assembled shed arrived site Now following task schedule You might hired crane one vendor unload shed separate installation crew The unloading task start mount wire rope prepare lifting point However let crane complete work unloading shed even though installation crew yet started work No unloading task completed installation task start This start finish SF dependency Baby sitter hadover best example make learner understand meaning SF If work completed handover started untill take team start work considered complete hand started An example SF relationship Successor activity Night settling Newyork hour Predecessor activity Daylight rising high Newyork hour If assumed hr lead time activity Successor continues duration hr Predecessor wake verge Completion Successor proceeds hr OR vice versa This take place Cyclic Process everyday All Cyclic Processes formed activity One Successor Predecessor share SF Type relationship This rare type relationship utilized Realtime Projects majority Realtime Project Networks activity Forward Pass Backward Pass cyclic nature The dependency start activity A finish activity B enforce activity B finish activity A started Predecessor activity A successor activity B refer CPM logic timing activity B computed relatively timing activity A although activity B end activity A calculation model following team B supervises site team A arrive activity B fixed start date better modeled hamoc activity team B train team A last week work lag given positive duration overlap software enforce soon possible planning whole programme activity B delivery finish time installation activity activity A B one continuous task split accounting purpose planned activity C dependency Activity A latest part correctly planned activity C A B needed consider one task order scheduled expected activity planned soon possible activity B must float greater equal Suppose rock climbing You start holding one hand finish holding order move Suppose guarding something Replacement team start work order finish Suppose going change energy cable critical system UPS start working order cut electricity My project fire pump I start electrical work fire pump I finish fire pump installation started fire pump complete electrical finish e start finish SF common useful relationship certain condition It primary use requirement continuity In case hour operation must least one shift duty time Shift could linked Shift using SF relationship If shift delayed shift must continue work past initially scheduled time Similarly transition old new system environment required continuity example large bank making change online banking system A Start Finish relationship could used link operation system System could finish System started This article go greater depth Night shift finish Day shift start B finish A start Here take I think SF simply relationship constraint describes happen Second task finish first task start The second task need kind input first task start early input gotten sooner Let say hour input ready start instead finish soon input available considering require input finish let say There must overlap finishing even start mean basically need anything break SF constraint In case run parallel sequential I always looked perspective process flow rather logic drive scheduling The simple example I seen previously revision examination You say I ca sit exam I done revision revision finish drive exam start I plan revision finish time exam exam start drive revision finish In example quite easy understand since practice exam usually fixed completion preparatory work need scheduled fit date exam If exam move time needed revision change relationship keep thing aligned By posting answer agree asked viewed active Get In get see By subscribing agree site design logo Stack Exchange Inc user contribution licensed Southern Cross University University Texas Dallas University Illinois Technical University Lisbon University Amsterdam Budapest University Technology Economics Ghana Institute Management Public Administration Curtin University This article extends previous article Project Network Diagrams used pictorially represent Project Schedule Project Dependencies You also read article Project Dependencies There many way draw Project Network Diagram One Precedence Diagramming Method PDM PDM defines represent Project Dependencies This post describes Relationship Start Start one Logical Relationships The Logical Relationships It Logical Relationship Successor Activity start Predecessor Activity started In word Dependent Most Project Management Authors treat definition SS Relationship standard However Scheduling Software treat SS Relationship slightly differently They treat SS Relationship So one one activity Starts Automatically Started The common natural relationship Finish Start FS Start Start Relationship sometimes used The Project Managers flexibility defining relationship activity Usually possible transform SS Relationship FS Relationship You also look complete set definition PDM Logical Relationships Let u consider two activity A B The Project Team need total day complete activity B Start S A Starts S B S A S Let u consider activity A B Let u also consider A Predecessor B Successor Required field marked If question post I personally respond question You start PMP prep downloading free guide DDA Flats Saket New Delhi Phone When create relationship called task dependency These dependency drive project schedule Every change make predecessor task schedule affect linked task affect next task line By default Project creates link work every situation Project support four type task dependency If want switch different link type see link f Task B start Task A done This default link type Project commonly used Task A must complete team start Task B link s Task B start Task A start They start time Task B begin time Task A begin To save time want level concrete one end foundation still poured end But Task B start Task B also started link ff Task B finish Task A done They end time Task B end time Task A end Your team adding wiring building inspecting time Until Task A get done able finish Task B link sf Task B finish Task A begin Task B finish time Task A begin This type link rarely used The roof truss building built You finish Task B Task A begin 
fixed-date release	A release must delivered known future date The scope release possibly cost need flexible Contrast Posted December siddharta Recently someone asked following situation At start project high level estimation done It estimated six moth project based executive committed date customer This necessary customer needed lead time setup infrastructure hire people run needed know date get everything prepared It month go release Various uncertainty resolved see actually take another three month The team pressurised meet date client would stand make loss hired people software ready The scenario fairly typical business world I want state I see nothing wrong commitment I heard many people talk agile team never make commitment always right path Software developed isolation many case downstream dependency software built There may need start marketing perhaps need start training sale team In example see client need start hiring couple month date hiring process take week But hired people release date pushed two month good situation So need know advance software would ready What answer situation Luckily agile perfectly suited handle Here technique The first thing realise everything agile fixed date That timebox fixed start date end date Everything agile based timeboxes word dealing fixed end date We handle varying scope Usually everything high priority And prioritising well high priority feature completed early release So possible cut scope release end date Agile actually much better way handle fixed date waterfall process This waterfall hard cut scope near end release development already complete whole application integration testing So option extend date cut quality bad choice compared cutting scope Adjusting scope fairly standard response dealing fixed date On hand making commitment late possible technique organisation practice It technique become popularised mainstream agile work Chris Matts Olav Maassen I highly recommend book topic appropriately enough called Going back example top post ask last responsible moment fix release date Since client need month hire everyone answer need fix date think month work remaining There value fixing date earlier client still need start two month go Yet project project date get fixed right start project So date fixed many month advance knowledge minimum uncertainty highest And uncertainty come bite team near release date A better approach leave date open start It time commit yet Then see month work remaining work client fix date This give client lead time get hiring done MUCH accurate since way project uncertainty resolved pretty good idea release date It also instructive see movie release date committed Like software movie also many downstream dependency Marketing start much advance marketing start early le effective Distributors selected contract negotiated advance paid The film transported movie theater booking open couple week release Copies sent critic reviewer review paper release All activity require sticking precise release date However see release date committed see follow commit late principle outlined At first nothing mentioned release date After movie settled may see initial trailer vague date like Coming Once shooting done ongoing may see something specific like December It couple month release actual date finalised In theater December By time movie complete pretty accurate date Imagine movie took software approach fixed release date December even started It simply recipe success Maybe learn Beautiful RayBan Oakley sunglass website cheap novel come see Nice post And clear informative Silver Stripe Software Pvt  Agile ALM DevOps Continuous Delivery VersionOne Support SAFe Enterprise Integration Hub Training transformation agile success Product article video Learn leading company succeed u A global network agile expert Learn agile DevOps product Research benefit partner Login update add class Videos article VersionOne Pick medicine The latest news community Comprehensive article agile methodology World agile survey DevOps basic thought leadership Thought leader agile DevOps Agile management development product article Our origin value focus agile success Job opening info working u Top reason choose VersionOne The folk support VersionOne team The benefit agile VersionOne The latest news u Specifics government procurement Community event thought leadership Planning estimating agile world depend single key metric development team describes much work team get done per iteration We describe velocity detail separately Given team known velocity last project known release plan represents much scope team intends deliver given deadline Release deadline often fixed imposed externally thing tradeshows accounting pressure contractual obligation But since goal get working software user hand quickly possible order make course correction soon possible every effort made keep release software development cycle short possible Agile release cycle certainly kept shorter year often short month month A release turn made iteration For given project iteration length typically fixed length somewhere week month If release month iteration going week release consist iteration In environment software may delivered user least subset user incrementally end iteration every couple iteration After initial feature list identified prioritized team hold release planning meeting establish overall release schedule determine feature likely delivered The overall release plan term prioritized feature used directly feed individual iteration plan Some agile method stress clear separation responsibility programmer customer During planning customer responsible business decision prioritization programmer responsible task estimation development execution Agile method also strongly discourage management capriciously imposing technology choice development group instead giving developer much latitude possible choose best tool system project The goal initial release planning estimate roughly feature delivered release deadline presuming deadline fixed choose rough delivery date given set feature scope fixed We use information decide whether project produce enough ROI least pay therefore whether proceed Initial release planning meeting rarely last longer day two stand stay meeting entire day First customer present prioritized feature delivered Ideally developer already devised rough estimate much work required implement feature Using developer estimate customer feature priority team lay release plan mapping feature roughly first iteration Developers may find fairly feature pose design architectural risk may therefore ask customer consider assigning earlier iteration anyway order address potential risk early project possible It enormously helpful development team velocity previous release already known In case scope fixed divide total estimate required feature team velocity provide approximate number iteration required deliver functionality thus deadline If deadline fixed typical multiply velocity number iteration get initial sense many feature delivered If development team velocity known must provide estimate release plan must understood le precise first iteration reliable velocity number derived The initial release plan rarely satisfies party either enough functionality delivered much time seems necessary deliver desired functionality But agile world team look hard truth face develops software development plan around No one belief scope miracle satisfy everyone Instead practicing collective denial team us real metric negotiation make hard choice close start project possible Agile thought leader agree adjust scope deadline resource quality given project variable respond well adjustment deadline scope Extensive research shown larger team tend deliver lower quality system slowly smaller team tend deliver higher quality system faster It may indeed necessary add programmer team likely slow team least awhile speed Once accept finding accept release planning must adjust either scope deadline produce release plan agreed workable sponsor customer developer manager stakeholder The fact team make hard choice front reduces overall risk project It increase chance team produce feature set return stakeholder investment adequately deadline The initial release plan understood rough It must detailed enough get u started predicting project deliver enough return investment pay If initial release plan predicts ROI low justify project cancel project waste much money In agile project plan continuously correct course go One primary mechanism course correction allowing release plan evolve response kind feedback It take least couple iteration team velocity settle Iterations sometimes deliver le functionality planned sometimes Features architectural choice design choice framework technology choice might prove risky simply unworkable The user interface might require revision Staff might lost added Feature priority might change All factor help u revise refine release plan continuously When new iteration plan published revised release plan reflects new reality Many agile team plan deliver small amount functionality first iteration often called Iteration order explicitly allow working initial technical logistical issue perhaps also stressing architecture end end This critical team little agile experience For team without good velocity metric might mean end second third iteration velocity become stable reliable Some team also schedule two iteration project close stabilization integration testing bug fixing user documentation completion In ideal agile project would required real world depends specific agile practice team follows organizational structure overall complexity system deliverable expected team complexity system deployment similar factor Some team get without agile planning release level For example ASP may simply deliver software production every iteration every week thus every iteration effectively release simple agile planning iteration may suffice If hand level visibility required management software release management level progress status change initial software development plan etc planning management invaluable Releases typically range month For longer release may make sense break several The number iteration within release typically driven schedule If release month long iteration week iteration scheduled release For smaller team may make sense entire team participate input accountability purpose For larger team organization subset team may selected elected represent team Release planning meeting typically last hour Generally quite bit work done prior release planning meeting term project approval budgeting vision team identification etc With respect functionality customer likely spent time working development identify initial feature well potentially breaking providing initial estimate As information uncovered functionality delivered system understood business need evolve priority change overall release almost definitely change Although anticipated evolution software release management time need communicated appropriate stakeholder Project issue tracking Service desk customer support Manage business project Document collaboration Git code management Team chat video file sharing Answers support inspiration Cloud service health Frequently asked question Feature suggestion bug report Documentation Portfolio Jira allows configure release date easy step Configure date close window Was helpful I run constant issue When project start client typically list functionality built application As team would like follow Scrum But next thing client asks date The client deadline go market So valid need know date tell rest business application arrives Since team ca plan one sprint time typically visibility end date The client say I already told exactly functionality I need Tell build app How deal situation like agile Scrum Agile release planning based operate feature In Scrum release planning handled controlling scope meet deadline deadline simultaneously This rarely practical problem political one shop Agile release planning based iteration In order release planning Scrum Number iteration release calculated using following variable formula The value turned back calendar time estimate multiplying interations length Sprints week month  Let say total backlog story point plan use Sprint length Your team historical velocity project large cone uncertainty fudge factor standard multiplier result planning velocity story point per Sprint applying fudge factor So release plan Product Backlog Items would You turn calendar time estimate Based information project schedule state take approximately week ship feature currently Product Backlog This based information currently available treated planning value rather ironclad guarantee As project progress cone uncertainty narrow team make accurate estimate amount remaining work Product Backlog In addition Scrum team become accurate measuring velocity project continues calculation redone time time true schedule based accurate data becomes available In addition Product Owner may add remove scope form Product Backlog Items throughout project This expand reduce scope project obviously impact estimated schedule Changing project scope generally trigger recalculation release date happens Finally Scrum strives provide product end every Sprint While may sense contains backlog item product stable releasable state Sprint Review organization choose ship earlier sufficient value present product justify shipping current state This cashing earned value ship minimum viable product deemed good enough provide Scrum team significant agile advantage The tool Scrum help situation velocity I believe know velocity many story point sprint check product backlog planning user story Using two estimation possible delivery date This highly inaccurate based If product owner PO negotiate delivery customer based progress delivered user story The PO figure user story must customer start business It subset whole product backlog therefore formula provide better estimate uncertainty lower whole backlog Alternative one check historical data see long take deliver similar app check risk see provide estimation using Alternative two try way Kanban handle situation In case know velocity historical data try talk customer figure crucial feature Sit team estimate project old fashioned way In mean time try I recommend start initial estimate If customer understands benefit frequent delivery helpful one schedule upstream project going Zsolt good starter I giving vote Scrum work well fixed release date long recognized simple reality That Scrum one two truth You either get work backlog done You know You release specific date work managed complete date If client internal bos give fixed date ship use technique like Zsolt talk estimate much work At start development general guideline commit think This Hofstadter law stats always underestimate work even take law account Then joy Scrum move project able use velocity refine prediction deliver By time way development rock solid idea shipped This mean need make sure backlog well ordered Deliver important stuff first minor stuff So ship everything missing MVP stuff If client say But must ship different problem Scrum wo fix need take agile value chain I recommend Innovation Games Prune Product Tree Buy Feature faced Note One thing I noticed post mentioned Since team ca plan one sprint time This flag Teams working outside normal sprint product owner groom backlog plan future work By time get sprint already good idea sprint I got one team worked Product Owner working plan change next eight sprint month A separate topic one something I wanted bring thinking The idea Scrum team focus delivering customer want To work demonstrate listen feedback adapt This approach recognises hard customer get requirement spot front It much easier build successful product constant feedback adaptation If client want fix scope end date project get full benefit Scrum approach I would suggest talking client selling idea Scrum approach give chance shape product want There uncertainty end date offset value getting product right Of course situation client hard deadline In situation work prioritised backlog requirement far time allowed If client introduces new requirement project proceeds may reduce far list get In effect delivered delivered driven much customer delivery team Use buffered Moscow rule Regards By posting answer agree asked viewed active Get In get see By subscribing agree site design logo Stack Exchange Inc user contribution licensed Project issue tracking Service desk customer support Manage business project Document collaboration Git code management Team chat video file sharing Answers support inspiration Cloud service health Frequently asked question Feature suggestion bug report Documentation release used manage joint release date milestone When create release commit Jira Software release transformed regular release Jira project part release Create release following step Once created release group existing release project one You group already existing release following step Your new release visible The release date aggregated release The start date earliest start date end date latest end date release Select release want modify click see detail From able edit remove delete add release align release date When create new release new release created per project detail Add release existing release going release detail view clicking Select release want delete click click You delete release without deleting child box Exclude release part release plan well In following case TIS company improve loading data time Android since receiving user complaint In order accomplish project backend team work Android client side team Each team work different project release combine effort get improvement done Was helpful Maybe work vendor must bid work response RFP Or perhaps company want hire software development organization particular project sure structure contract agile shop Then maybe need outsource part development need structure contract agile team Whatever situation need know successfully contract development agile This presentation agile expert author Mike Cohn start quick introduction user story assemble requirement document part contract It move cover general advice planning project Explore project Gain insight estimating velocity new team If want overcome problem improve work user story register Add little detail user story team finish iteration Put much There plenty mistake team make splitting user story Here five I announcing release free training series writing user story User story deliberately vague first detail need added eventually There What tester start sprint nothing test That problem Offshore Product Development Software Testing Development May It often difficult software development team effectively prioritize workload The request change new feature come thick fast enterprise organization Every department want top priority fight client project development team limited capacity deliver When developer firefighting mode constantly asked change gear take new task efficiency plummet The path clearing backlog lie proper planning system prioritization clear roadmap provides stability predictability A time box release model deliver benefit IT business client Fixing release date immediately introduces stability process It also allows different business group reliably predict new feature change request going rolled Everybody hate release date slip time box release cycle alleviate Finding right cycle team depend project somewhere four eight week good place start A fixed period cycle allows development calculate exactly much get done current resource The cycle reduced time Different company project want different cycle length The important thing fixed date release Triage sorting incoming request ensuring highest priority one dealt first Get business group rank request based important client They submit limited list top ten ranked request Set deadline submission week two cycle begin Everyone get round table slot request release backlog The scrum master product owner developer QA need put head together ass request estimate deliver When cycle drawn signed locked If business group want change request submit something new must aware considered next cycle Failure apply rule make impossible current crop priority delivered time There occasionally genuine emergency accommodated always build contingency Saving capacity deal important client demand special emergency case sensible sure establish urgency accepting new request Once everyone used new system priority regularly delivered every cycle promised business group client feel benefit It may possible plan ahead create roadmap stretch six month year future Fixing release date project submission deadline really help improve efficiency Setting realistic plan methodical approach clearing software release backlog best way forward everyone concerned Over past year KMS Technology building DevOps practice help customer navigate meaningful transition From client journey internal compass pointing u direction But It difficult choose right framework next application development If shopping around JavaScript framework right doubt looking Angular React Ember Vice President Testing Adam Satterfield recently great session people QASymphony Quality Jam Adam discus experience tester bringing quality DevOps process key strategy ensure quality Our mission accelerate client deliver cost effective unique inventive solution leveraging effective process framework proprietary toolkits engaging knowledgeable resource Recommend article The ultimate balancing act achieve agile project management nirvana All agile software project goal project need deliver need delivered within budget However managing three constraint complex juggling act So let take cue iron triangle planning learn balancing different variable help agile software team achieve agile project management nirvana The iron triangle model constraint constraint considered iron ca change one constraint without impacting others The original iron triangle proposed Martin Barnes follows waterfall approach product development scope fixed resource time variable For software team would mean team start project defining product requirement determine project scope list work item The resource schedule variable estimated depending fixed scope Constraints iron triangle The purpose iron triangle give product team necessary information make help business For example team faced fixed scope might halfway project realize wo hit release date The variable play Time accept later release date Resources add people project increase cost As software development evolved century need better collaboration ability respond quickly customer feedback became crucial thus agile methodology born If team practice waterfall development new agile development important thing remember difference fixed estimated Unlike waterfall development agile project fixed schedule resource scope varies While scope project might change agile development team commit fixed iteration work sprint using scrum framework WIP limit using kanban framework It also best practice keep team fixed throughout development process By keeping team consistent product project become efficient developed trust continuity The idea scope agile development software build deliver However agile focus requirement rather trying come deep detailed requirement upfront The scope project get regularly managed groomed prioritized product manager tool like The product manager decides work accomplished next sprint based agile qualitative quantitative feedback various channel market condition customer feedback competition And resource time fixed easier development team react market change deliver value customer faster This transparency constraint keep team honest consistent fast release cadence key tenant agile development looking project lens iron triangle team able adapt without abandoning plan As project become bigger team needed time box get longer Thus notion fixing resource time scope varies valid approach agile project agile planning requires flexible iron triangle allows team plan ahead ensures meeting business objective Think instance lean startup movement notion minimum viable product MVP An MVP definition small set feature scope delivers customer value To get MVP team might need stick fixed scope number feature time variable ca release without certain feature release date get pushed Only launching MVP team switch variable scope Regardless difference waterfall agile development using iron triangle right wrong way It help make best decision reach business goal A tool like visualizes building block plan scope people time help team plan You easily play scope team time plan next product release using team existing data JIRA Software Check video see work Connect business strategy development reality Building software building house different benefit agile planning Structuring team responding change JIRA Software tip thrown good measure Product Marketing Manager Atlassian If already account sign second Subscribe blog signing subscribing RSS feed Alex Ballarin Latre This common myth frequent people used develop software within context closed scope traditional project The Scrum framework agnostic come set context software development talk complex product development In general agile software development avoids concept project Software development activity frequently outsourced IT company technical domain Most time collaboration shaped project contract based iron triangle model This model identifies four aspect software development endeavor tightly related product scope delivery time contract cost last frequently overlooked product quality It happens often later constraint become impediment case contract accurate bigger likely change agreed succeed project Why The main reason continue using fixed scope project The last available edition famous Standish Group show le project considered successful people buying software project would well considering continue Trying maximize four aspect iron triangle time usually entail losing Agile software development generally change fixed scope project approach fixing resource time quality estimating scope Due transparency prioritization feature provided product backlog Scrum probability troubled project decrease significantly Another source criticism fixed scope project produce software many unused feature The classical ROI job study Jim Johnson reveals feature delivered project rarely never used Although gut feeling tell reality may different big waste money people time Projects planned Scrum From point view product management usually called release management The scope management tool product backlog estimated development start Scrum call empirical process control avoid waste due requirement identified early lightest scope definition made creates trust product buying part The transparency leg empiricism entail radically honest customer risk delivering full scope expected timeframe eventually allocating reasonable contingency form extra sprint The Product Owner responsible involving stakeholder progress tracking helping shift original scope mindset value delivered mindset Scrum used plan track development fixed scope although common belief traditional project management concept fixed scope project revisited help customer evolve healthier product management mindset  
functional service	A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition From session Xiaoyuan Cao Noboru Yoshikane Ion Popescu Takehiro Tsuritani Itsuro Morita KDDI R D Laboratories Japan Your account may give access The unified network infrastructure presented Moreover function abstraction virtualization based service design concept orchestrated optical system control customized service provisioning realized optical network OSA Slideshare us cooky improve functionality performance provide relevant advertising If continue browsing site agree use cooky website See Slideshare us cooky improve functionality performance provide relevant advertising If continue browsing site agree use cooky website See detail This slide deck address importance proper functional design creating resilient distributed system also system It start explaining pitfall many developer fall getting started resilience Quite often effect fundamental creating bulkhead choosing communication paradigm system robustness runtime heavily underrated Instead pure technical measure like circuit breaker backpressure etc often overestimated Unfortunately technical measure help create robust system functional design lead highly coupled service availability one service functionally totally depends availability another service The true need call many service need available answer client request To make worse design approach like functional decomposition DRY repeat design layered architecture exactly lead problem suitable designing distributed system This slide deck offer silver bullet solve problem actually I believe silver bullet least guiding principle Additionally show choice communication paradigm influence bulkhead design way creates option create good service design also support resiliency functional level As always slide deck without voice track information missing But I hope slide also provide helpful hint Remark As dismiss reusability slide tends get quite attention one remark slide On voice track I usually add If find something worth made reusable satisfies commercial constraint Fred Brooks see http detail put service Instead create library put functionality And make sure change library mean user upgrade time library user update whenever fit user schedule Otherwise would introduced tight coupling back door LinkedIn Corporation Clipping handy way collect organize important slide presentation You keep great find clipboard organized around topic Looks like clipped slide already category provides allowing customer develop run manage application functionality without complexity building maintaining infrastructure typically associated developing launching app Building application following model one way achieving architecture typically used building application FaaS extremely recent development cloud computing first made available world October followed Functions Functions available public use IBM OpenSource premise system provide capability FaaS capability also exist private platform demonstrated Schemaless trigger Serverless computing architecture customer direct need manage resource also achieved using service These service however typically different implementation architecture implication scaling In PaaS system system continually run least one server process even auto scaling number longer running process simply added removed meaning scalability visible developer problem In FaaS system function expected start within millisecond order allow handling individual request In PaaS system contrast typically application thread keep running long period time handle multiple request This difference primarily visible pricing FaaS service charge per execution time function whilst PaaS service charge per running time thread server application running Personalize experience access trial downloads The fastest open advanced analytics SQL database Securely access analyze enterprise public text audio video data An intuitive hunt investigation solution decrease security incident Minimize risk impact cyber attack Autonomous operation business lens Intelligent automation service desk configuration asset management A open platform transforms data chaos security insight SQL analytics solution handling large amount data big data analytics protection sensitive data rest motion use across system Standardize manage project portfolio activity decision Lifecycle management methodology deliver software speed quality Lifecycle management solution deliver software speed quality Unified comprehensive extensible application software quality platform Agile project management solution plan execute track Agile project A collaborative flexible Agile requirement delivery platform Requirements management solution provides traceability process Ensures Agile project success effortless Agile planning tracking An application lifecycle solution unleashes power development team Change configuration management streamlines development release faster Integrated version issue defect management increase productivity An integrated software change configuration management tool Achieve full transparency across multitude tool system Builds package change artifact speed mainframe application development Enable faster efficient parallel development scale A development environment streamlines mainframe COBOL activity Intelligence analysis technology provides insight core process Fuel mobile apps cloud initiative process automation An ESB deploys architecture without centralized hub A comprehensive suite CORBA product Provides highly embeddable CORBA ORB source code system Enterprise CORBA technology distribution scale Develop deploy distributed application CORBA solution An environment manages mainframe file fast problem resolution An ETL solution replicates Unisys MCP DMSII data database real time Lifecycle management methodology deliver software speed quality Lifecycle management solution deliver software speed quality Integrated quality management software standardize testing fix defect Gain control across area software testing matter methodology Make automated testing efficient help developer tester collaborate A powerful lightweight testing solution continuous integration testing A test framework accelerates functional test automation A manual software testing solution streamlines speed Agile testing Automated functional regression testing enterprise software application Easily record run export Selenium script Silk WebDriver A lab real device help build app experience insight Run test network condition detect issue deployment Dev test faster app simulation software simulates service behavior Enable IT team easily test mainframe application change scalable hardware Powerful load testing view application system performance performance testing multiple concurrent testing project Simple scalable SaaS delivered performance testing solution Automated software load stress performance testing open sharable model Run test network condition detect issue deployment Dev test faster app simulation software simulates service behavior Identifies security vulnerability software throughout development Provides comprehensive dynamic analysis complex web application service Application Security managed service Gain valuable insight centralized management repository scan result Accelerate app delivery isolating experience issue line code Run test network condition detect issue deployment Dev test faster app simulation software simulates service behavior Manage mobile quality actual device lab build app experience Automated functional mobile testing replicates end user experience Connect Dev Ops automating deployment pipeline reduce feedback time Centralized planning control entire software release lifecycle A continuous deployment solution provides automation release management Synthetic transaction monitoring solution ass app performance production Define track report service level business perspective Proactively monitor application find performance issue affect user Real user monitoring detect triage isolate end user performance issue production End end solution application performance management Creates centralized request center serf storefront IT Agentless easy use system monitoring Detect triage isolate performance issue user action line code Detect triage isolate issue negatively impact User Experience Helps business IT work together via approach IT management Orchestrates integrates process faster software development delivery Creates centralized request center serf storefront IT Predictive data protection solution across hybrid IT environment Enterprise backup disaster recovery software file application VMs Advanced analytics reporting application Data Protector environment Advanced file analytics software understanding managing unstructured data Cloud based endpoint backup solution file sync share analytics VM backup replication VMware vSphere Microsoft environment PC backup solution data stored computer Simplifies resource management Storage Area Network increase availability Protects key business system downtime disaster Provides disaster recovery hardware appliance Disaster Recovery us virtual infrastructure capacity protect server Backup disaster recovery solution ensures critical data always available A development environment streamlines mainframe COBOL activity Transforms deliver powerful end user experience across device Development environment COBOL enable developer produce enterprise apps Provides familiar environment maintain improve apps written A code analysis visualization tool provides full oversight code change Capture analyze measure value cost risk application portfolio Find hidden logic within portfolio extend value Store data within RDBMS without changing application source code Make COBOL data contained within COBOL data file available reporting tool A data management system Vision file Transparent access Relational Database Management Systems Email IM teamwork disaster recovery Provides secure email calendaring task management today mobile world Backup disaster recovery solution ensures critical email always available Protect network messaging system malware virus harmful content Provides secure team collaboration document management workflow feature Provides secure file access sharing device Seven essential tool build IT infrastructure including secure file sharing Provides secure file access sharing device Print across enterprise platform device Enables secure access corporate data user mobile device Secure manage mobile device user want work personal device Provides single enterprise federation cloud application Run terminal emulation apps mobile device A terminal emulator provides access application Protect sensitive information securely authentication scalable archiving regulatory legal investigative need Archive business communication case assessment search eDiscovery governance ECM software meet regulatory privacy requirement File analysis discover classify automate policy unstructured data Structured data archiving retire outdated application reduce data footprint Respond litigation investigation quickly accurately Apply enforce manage information legal hold litigation investigation File analysis discover classify automate policy unstructured data Provides automated management file storage user work group Discover stored access File Reporter Storage Manager solution suite bundle Securely access analyze enterprise public text audio video data Dynamic monitoring analysis automated remediation Dashboards represent IT value bringing business intelligence IT data An operational intelligence solution leverage data help identify insight Provides IT management data needed perform forecasting Comprehensive capacity planning management performance monitoring Consolidate data across environment reduce repair time improve efficiency Agentless easy use system monitoring Monitor apps system network better visibility IT service delivery A service management solution delivers holistic view mixed IT environment Software service desk help desk management quickly handle change Manage hardware software asset across procurement lifecycle disposal Collects store manages update show data infrastructure configuration Streamlines automates way provide IT service business Helps business IT work together via approach IT management Creates centralized request center serf storefront IT Automate simplify deployment management hybrid IT service Orchestrate task across complex IT prcoesses single action Continuous deployment solution providing automation release management server time low risk within budget Unifies fault availability network performance monitoring device Drive automated configuration change security compliance across network A monitoring suite virtualization UNIX Microsoft apps database Predict overall call quality efficiently identify upgrade needed A VoIP troubleshooting tool identifies explains call quality problem Secure enterprise file print storage service mixed IT environment Provides automated management file storage user work group Examines report unstructured file data forecast storage growth A discounted bundled offering File Reporter Storage Manager Automate server lifecycle management across heterogeneous server environment Orchestrate task across complex IT process single action Automate database application middleware lifecycle management Proactive IT environment monitoring solution Proactively monitor process find performance issue affect user monitoring providing visibility user behavior fast resolution IT service level management software report service level Provides automated endpoint management software distribution support Package test deploy containerized Windows apps quickly easily Automates patch assessment monitor compliance security vulnerability protection device feature total protection Protects data laptop desktop ease Provides automated endpoint management software distribution support Enable user securely access data respecting privacy device freedom Secure manage mobile device user want work personal device Provides report integrate licensing installation usage data Seven integrated product help track manage protect endpoint device A collaborative flexible Agile requirement delivery platform Requirements management solution providing traceability process Capture analyze measure value cost risk application portfolio Find hidden logic within portfolio extend value Ensures Agile project success effortless Agile planning tracking Intelligence analysis technology provides insight core process Capture analyze measure value cost risk application portfolio Find hidden logic within portfolio extend value Use modern productive tool develop application directly mainframe Easily maintain modernize z Systems application Enable faster efficient parallel development scale Provides multiple change management interface maintain mainframe apps Fuel mobile apps cloud initiative process automation Manage mainframe file fast problem resolution Enable IT team easily test mainframe application change scalable hardware Mainframe comparison tool support data text directory file Connect Dev Ops automating deployment pipeline reduce feedback time Centralized planning control entire software release lifecycle Execute IBM mainframe COBOL workload Windows Linux Cloud Modernize IBM mainframe workload using Microsoft Azure Orchestrates integrates process faster software development delivery Detects change synchronizes multiple environment restores failed system Desktop mobile cloud terminal modernization IBM HP UNIX mainframe application Desktop terminal access modernization Unisys mainframe application Desktop terminal access modernization IBM HP UNIX mainframe application Web service platform IBM HP UNIX application data integration A Unisys MCP DMSII data synchronization tool analytics BI application A solution provides protection A platform enhancing mainframe access control application security management A open platform transforms data chaos security insight A comprehensive threat detection analysis compliance management SIEM solution An intuitive hunt investigation solution decrease security incident Detect unknown threat analytics Download deploy content dramatically save time management A adaptable solution simplifies use SIEM Consulting help build mature enterprise security operation capability Finds repair configuration error lead security breach downtime Identifies responds unmanaged change could lead security breach Provides easy compliance auditing protection IBM iSeries system encryption tokenization data masking key management Scalable encrypted email solution desktop cloud mobile FIPS Level hardware cryptographic appliance meet compliance standard Automated encryption key lifecycle management appliance The full solution secure automated file transfer management inside across perimeter Identifies security vulnerability source code early software development Provides comprehensive dynamic analysis complex web application service Gain valuable insight centralized management repository scan result Manage entire application security program one interface Gain visibility application abuse protecting software exploit Delivers intelligent identity management framework service enterprise Provides automated user access review recertification remain compliant Provides single enterprise federation cloud application Integrate host modern security framework Move beyond username password securely protect data application Enables user reset password without help IT Streamlines authentication enterprise apps single login experience Enables IT administrator work system without exposing credential Limits administrative privilege restricts directory view specific user Edit test review Group Policy Object change implementation Provides Exchange administration restricts privilege specific user Protect critical data reduce risk manage change Change Guardian Protect critical data reduce risk manage change Change Guardian Finds repair configuration error lead security breach downtime Provides easy compliance auditing protection IBM iSeries system Protect network messaging system malware virus harmful content Scalable encrypted email solution desktop cloud mobile Delivers protection device feature total protection Proactive laptop desktop data protection automatically lock threat Automates patch assessment monitor patch compliance security vulnerability Enable user securely access data respecting privacy device freedom Provides automated endpoint management software distribution support Package test deploy containerized Windows apps quickly easily Open support incident search resource product View support maintenance plan well handbook TTP Program Access consulting premium support service Learn certification instruction academic corporate partner We let know soon free trial ready MAIN MENU BACK BACK View related solution ExecuPharm Functional Service Solutions Our Functional Services Solutions FSS team established help client accelerate pipeline development let focus best To strengthen commitment client PAREXEL recently acquired leading global functional service provider creating one largest global team This acquisition strengthens offering allowing client fulfill clinical development outsourcing need single integrated company resulting Through customizable supply resource management process easy use tracking system clinical study This model help lead way business continuity productivity lead decrease cost study complexity time market increase efficiency global awareness accountability process visibility We provide functional service client including Through proprietary candidate tracking system robust database access additional global candidate allowing u deploy FSP team little day We identify suitable candidate using three step process Utilize pool existing resource identify individual coming assignment available transition one new role Recruiters review potential candidate CV match client job requirement also seek additional candidate referral existing employee utilization business partner In depth candidate screening prequalification process one PAREXEL Subject Matter Experts SMEs proving quality candidate directly match client requirement Learn range engagement model including full functional outsourcing well customized solution Learn value outsourcing clinical research service author Natalie Morrison Learn open collaboration commitment mutually agreed upon goal accelerate value CRO alliance More What You Need Stronger Start Phase I Your journey new molecule new medicine start appropriate subject world class facility timely result provides comprehensive early phase testing service clinical unit three continent Improving Your Journey Improving Every Step Your Clinical Trials During part journey regulatory submission Phase specialist optimize every step clinical trial every mean possible Our trusted expert including renowned former regulator know institute proactive compliance strong track record helping company get regulatory crisis They well versed biopharmaceutical medical device diagnostic regulation ICH guidance focused success product company Journeys course varied destination But whether taking new molecule market exploring differentiate current product evaluating new geographic option Integrated Product Development team shorten product time market provide strategic bandwidth marketplace resource help product achieve commercially In era traditional opportunity sustained growth throughout product journey limited Biologics biomarkers genomics personalized medicine proteomics offer promising alternative commercial dynamic biopharmaceutical industry uncertain Successful commercialization longer gaining regulatory approval It meeting need growing number stakeholder including physician patient government payer Success requires integrated pharmaceutical teamwork including right Medical Communications expertise needed address traditional silo R D marketing regulatory focus goal Learn PAREXEL ExecuPharm Functional Service Solutions provide customized solution meet need Anthony Southers General Manager Global Operations Business Development ExecuPharm Frederick LeMoine Vice President Business Development Andrew Copestake Vice President Business Development Brian Yang Vice President Business Development Linkedin Updates CAREERS AT PAREXEL Copyright PAREXEL International Corporation With rise cloud microservices alike talk lot resilience need create robust distributed system Unfortunately usually talk technical aspect pattern technology library While important ingredient resilient software design worthless without corresponding functional service design A simple example If service A always need input service B something useful service A never become robust respect failure service B matter much effort put technical robustness measure In session explore much functional design affect overall robustness solution spoiler lot learn deliver better resilient functional service design Quintiles help maximize global consistency variabilize cost structure At Quintiles Functional Service Provider FSP solution Global Functional Resourcing GFR group help staff easily engaging early help develop custom staffing optimal staffing point lifecycle We employee country bringing global access local expertise including local language capability major region There several functional service provider market select right one Working BPOs give resourcing flexibility global scale bring strong clinical operational expertise Working niche CROs give operational expertise may able meet need global scale At Quintiles GFR Team provides operational expertise flexibility needed reduce cost time increasing productivity ensuring high quality operational delivery ensure data accurate patient safe Plus offer operational insight optimize process across program portfolio help capture value clinical program 
heading	This software package allows heading calibration Watson gyro sensor provide heading output This program calibrates heading Watson sensor taking four reading To use software must gyro sensor You must also able accurately point installation platform heading hold position take data Click button download The software available download website written English version Windows OS We worked make sure foreign language version Windows use feature software However user running Windows language English may experience problem software may generate error Switching default language English USA solve issue The Watson Terminal software simple way view data output Watson sensor digital output It allows access communication port Windows PC The user open close port change baud rate log data received port text file If question software operates look You also call u send u Click button download This free app best found communicating wirelessly via Bluetooth Android device Watson Industries responsible way software Please share problem might app designer A link download Google App Store convenience Watson Industries developed number software package use gyro product They provided free charge without warranty kind Custom software package created low cost u give u call All software Copyright Watson Industries All right reserved Designed Select software update depending Multifunction Display MFD using perform Remote Update Updating via Series display Updating via G Series system Firmware update process done risk Before initiating update process sure backup make copy important file If firmware process interrupted product may function properly therefore interrupt process ensure unit reliable power supply Damage caused incomplete upgrade covered Raymarine warranty Please make sure latest ACU software installed otherwise issue may arise The included pilot software complete Bob Olstein Olstein Capital Management weighs Greenlight Capital David Einhorn proposal boost GM stock price If need information go walk process If ca find code looking please go back review find alternate code use suggest revision next version list Broadway Floor Office New York NY Phone Menu Menu We never busy talk someone nice By Print Page December Predicting future something often Aptify However try anticipate future different possible future help association prepare whatever lie ahead A big piece trying We recently asked Many spoke change AMS space The day bundled AMS million one feature may fading Association management software still main meal growing menu side option give association flexibility pick choose useful functionality feature staff member This preference creating emerged change consumer behavior change association technology marketplace Association staff bringing consumer perspective office We used way go shopping We customize purchase size color frequency format This customization trend changed way people view association product service In response many association offer learner menu educational format bite snack conference session webinar meal conference online course You also see trend new membership sponsorship model offering customized menu benefit Over last year many association changed membership model creating tiered membership structure hybrid membership said author senior vice president Marketing General Incorporated Associations access extensive diverse selection technical tool including association management software option ever Think number variety solution exhibit hall earlier week compared five year ago Many association also look outside association technology marketplace software It uncommon business department shop online without help IT department technology marketplace SaaS solution best meet department need author respected leader AIIM global community information professional FASAE founder CEO DelCor Technology Solutions long awaited day AMS vendor would focus importantly association community would embrace The AMS longer membership It hold learn member interest behavior see impact product service use data make better decision strategy product development content marketing You improve staff AMS user experience improving ability collect analyze data T Some data analytics firm mentioned DeLuca served association community year others new player market Innovative idea emerging association technology space including association management software niche There nothing stagnant association technology market Startups merger acquisition new player market rest laurel settle average Because AMS company merging acquiring association business solution learning management system email campaign system online community said Carden Association consumer different delivery model consider They opt AMS suite service one vendor system variety vendor I one many people calling real innovation community long time scarce quite frankly answered call said founding partner WorkXO He right We heard many association technology success story year ASAE conference industry gathering However also listened private confession frustration association professional stymied quest innovative solution association culture practice Technology provides tool radically transform association delivers value change often requires shift culture mindset process many ready willing adopt But thing technology also help association take first baby step toward transformation You way We enjoy watching client leverage association management software technology make difference member life However Notter pointed association often exception rule I truly excited work done minority association And I actively inviting join u path toward future said I second invitation Where think How see used association future Let u know comment forget download eBook As Director Content Branding Buzz Aptify Jen oversees strategy execution brand management content production across organization global office She thrives bringing compelling content useful information association help grow engage membership She also avid fan modern design thing science fiction We never busy talk someone nice Connect Aptify All Right Reserved Frontiers Microbial metabolism rumen lead desirable undesirable product Volatile fatty acid main source energy carbon ruminant animal main source glucose case propionate The profile volatile fatty acid absorbed rumen also important Microbial metabolism rumen lead desirable undesirable product Volatile fatty acid main source energy carbon ruminant animal main source glucose case propionate The profile volatile fatty acid absorbed rumen also important voluntary intake energy partition Fermentation intermediate serve carbon skeleton ammonia incorporated amino acid synthesised absorbed used host animal Also content nutritionally desirable long chain fatty acid meat milk strongly influenced rumen fatty acid metabolism On hand methane formation rumen wasteful term energy also contributes climate change Also excess rate ammonia release result much nitrogen voided environment urea process environmentally damaging Therefore objective applied rumen microbiology intervene fermentation pathway enhance output desirable product decrease product inefficient production harmful environment Research manipulation ruminal fermentation pathway need basic science understand system applied science strategy manipulate fermentation Central basic understanding rumen energetic metabolism gaining insight control metabolic hydrogen flow With regard nitrogen metabolism efficiency nitrogen utilisation rumen affected catabolism nitrogen compound proteolysis amino acid fermentation incorporation nitrogen microbial biomass intrarumen nitrogen recycling With respect rumen outflow long chain fatty acid much progress made recently elucidating various step complex process biohydrogenation The continuity advance area supported molecular biology technique empirical mechanistic modelling well classical vitro cultivation technique vivo animal experiment Comparative gut microbiology also much potential help understanding microbial ecology flow metabolite We welcome contribution based described approach integration answer question like How profile end product fermentation controlled ii What limit microbial growth rumen iii What impact nitrogen recycling ruminant energy nitrogen economy done ameliorate iv What need know better predict manipulate fatty acid biohydrogenation We would like emphasise approach narrow need elucidated explicits future research hypothesis Original research review perspective hypothesis theory manuscript welcome All contribution Research Topic must within scope section journal submitted defined mission statement Frontiers reserve right guide manuscript suitable section journal stage peer review With unique mix varied contribution Original Research Review Articles Research Topics unify influential researcher latest key finding historical advance hot research area Find host Frontiers Research Topic contribute one author Submission closed Submission closed No record found total view article view article downloads topic view Frontiers Media All Rights Reserved Front page layout Site theme Sign login join discussion Martin Shkreli former pharmaceutical industry executive hedge fund manager facing trial accusation defrauded investor starting Manhattan software company midst million debt offering according regulatory filing Godel Systems company name job posting company note founder tremendous track record A Securities Exchange Commission CNBC said Godel Systems already raised The issued debt convertible equity security Shkreli came public Turing Pharmaceuticals second pharma company founded dramatically hiked price drug Daraprim The drug used treat parasitic infection often given AIDS patient baby The price increase brought attention skyrocketing cost drug also opened host criminal legal trouble Shkreli Shkreli appear New York federal court summer face variety charge including security fraud wire fraud Shkreli pleaded guilty investor two former hedge fund managed misappropriated million asset Retrophin biopharmaceutical company headed according Separately SEC Shkreli accusation misappropriated fund MSMB Capital Management fund founded made material misrepresentation investor fund health Godel Systems Shkreli listed director executive officer website explain company A job listing Full Stack JavaScript Developer say Godel professional software company aim leading information provider data workflow communication solution financial law scientific professional Godel first vertical target financial market additional future vertical planned law science We plan revolutionize data aggregation communication model million user across multiple industry new exciting way You must comment Nearly UNL College Engineering student tour business industry Omaha community Friday August part annual NUBE Experience Organized College Engineering Greater Omaha Chamber Commerce industry tour part daylong learning opportunity freshman college campus Lincoln Omaha This sixth year college annual Fall Industry Tours mark return Omaha event held Other city host trip include Grand Island Columbus Norfolk Lincoln Students arrive TD Ameritrade Park downtown Omaha tour facility led professional engineer At group take part one five walking tour Union Pacific Harriman Center ConAgra Brands NRG Kiewit Training Center Riverfront area Omaha Freedom Center Capitol District Gene Leahy Mall Flywheel After tour student board bus Baxter Arena luncheon expo meet representative local industry discus career opportunity engineering field Students conclude day Omaha tour local company firm including BuilderTrend Claas Conductix Wampfler Lozier NTT Security Valmont organization civic project including Aksarben Village Clean Solutions Omaha Missouri River Wastewater Treatement Plant MRWWTP Improvement Project Henry Doorly Zoo Metropolitan Utilities District Platte West Water Treatment Plant Omaha Public Power District power plant University Nebraska Medical Center Some part site work best JavaScript enabled 
implementer	Our leading industrial innovation platform solution turn possibility reality Learn PTC product solution Build develop deploy smart connected solution Computer Aided Design Software Product Lifecycle Management Software Software Solutions Service Augmented Reality Enterprise See PTC product solution Ensuring successful PTC Technology PTC IoT Transformation Advisory Practice Accelerate time value Deliver value PTC solution cloud Services enable use PTC technology effectively Knowledge Help PTC Technology Users Share idea get answer customer support forum blog Your online destination creating IoT application ThingWorx Flexible learning experience enable reach goal View All PTC Resources Support PTC Technologies Experience value PTC Technologies Try PTC product Learn buy product Renew PTC product subscription Search hundred IoT application solution resource Contact PTC sale representative PTC Implementer leading change management solution IBM available market today providing software configuration management SCM Application Lifecycle Management ALM deployment IBM operating system running Power Systems IBM System iSeries server Utilizing graphical user interface provides developer IT manager easy use environment speed development managing streamlining critical development process At heart Implementer Developers Workbench System security integrity paramount With Implementer receive secure scalable flexible solution protect production development testing environment IBM server PTC Implementer provides rich integration variety party product including American Software CA Hawkeye Systems Pathfinder Help Systems ROBOT IBM Rational Developer Power Edwards World Software LANSA Lawson Software Original Software TestBench Infor Infor BPCS Infor PRMS We chose PTC Implementer coherent architecture build deployment capability across multiple platform including IBM well ability satisfy compliance demand greatly reduce cycle time With PTC Implementer one system manage application across organization cut half level effort needed change deployment April IBM Power Systems April IBM Power Systems IBM Power Systems IBM Power Systems May IBM Power Systems IBM Power Systems IBM Power Systems learn new release Discussion started Separate name comma Status Full Time Location London UK Visual leading provider Apparel Software Solution currently looking ERP Specialist following qualification join team ROLES AND RESPONSIBILITIES manage customer requirement implement plan meet customer expectation implementation progress Training assistance needed contract compliance customer satisfaction REQUIRED SKILLS MS Business Administration Information Technology similar degree Equivalent work experience related area attitude player skill learner OTHER SKILLS AND REQUIREMENTS customer support role Apparel industry travel needed basis project client location Compensation Your Message Please attach resume Comments closed Oracle told partner Sunday new channel program designed ensure successful implementation across portfolio cloud software going live The Cloud Excellence Implementer CEI program addressing critical implementation phase cloud service engagement first introduced partner June Oracle shared detail around benefit participating rigorous criterion join Oracle channel learned Sunday Oracle PartnerNetwork session kicked OpenWorld conference San Francisco It much looking larger partner making sure adhere high standard But also appeal smaller implementers since also going look regional perspective well modular level Penny Philpot group vice president worldwide alliance channel told CRN new program This ensuring customer find best implementation possible said The program already commitment many resellers integrator Oracle channel start accreditation process unique dozen Oracle product Camillo Speroni Oracle vice president Worldwide Strategic Alliances told partner attending Oracle PartnerNetwork keynote Sunday lot work went figuring identify reward partner developing proven repeatable skill around SaaS portfolio Oracle create criterion different cloud module Speroni said breaking ERP suite high level granularity It allow every one room differentiate said based unique history customer base geographic knowledge employee skill set accreditation The program global framework executed regional level due significance placed geographic expertise partner practice said Partners want recognized program result charge higher rate see better margin need commit train certify consultant Telecom cloud giant dominated news October executive move merger update product Here six thing happened telecom industry last month solution provider know Jeffrey Puritt CEO business process outsourcing specialist speaks CRN company expanding workforce positioned growing BPO market Partners remain heart company long I said Cisco CEO Chuck Robbins keynote Cisco Partner Summit CRN live Dallas Cisco Partner Summit Visit page latest news show Tax Accounting Articles accounting tax news Thomson Reuters You seek expert advice peer ask question search answer Browse popular product tax accounting brand rely The buy save quantity discount pricing Home Products ONESOURCE Certified Implementers Specialized annual training available certain ONESOURCE software product In addition depending product selected may also eligible receive For information Certified Implementer Program contact Carol Fox Vice President Head Global Accounts Camelback Road Suite Phoenix AZ River Crossing Parkway Suite Indianapolis IN Tom DeMetrovich Ross Avenue Dallas TX Bryan Hartney Evelyn C Kaupp North Wacker Drive Chicago IL South Flower St floor Los Angeles CA Park Avenue New York NY North Wacker Drive Chicago IL 
interface control	An provides record interface information drawing diagram table textual information generated project The underlying interface document provide detail describe interface interface An ICD umbrella document system interface example interface specification describe include The purpose ICD control maintain record system interface information given project This includes possible input potential output system potential actual user system The internal interface system subsystem documented respective interface requirement specification interface might document Interface control document key element control documented interface system well specify set interface version thereby bound requirement An form interface software system describes access function service provided system via interface If system producer want others able use system ICD interface spec equivalent worthwhile investment An ICD describe detailed interface documentation characteristic system use connect The function logic system described requirement design document needed DIDs In way independent team develop connecting system use interface specified without regard system react data signal sent interface For example ICD associated interface documentation must include information size format measured data ultimate data intended use user An adequately defined interface allow one team test implementation interface simulating opposing side simple communication simulator Not knowing business logic system far side interface make likely one develop system break system change business rule logic Provision limit sanity checking pointedly avoided interface requirement specification Thus good modularity abstraction leading easy maintenance extensibility achieved Critics requirement documentation system engineering general often complain documentation ICDs often present may useful well although explicitly named An ICD need textual document It may evolving table dynamic database representing subsystem DB view set interaction diagram etc ICDs often used subsystem developed asynchronously time since provide structured way communicate information subsystem interface different subsystem design team SOFTWARE IN PRACTICE Definition Email page friend If I want communicate I need pay complement careful I say make intelligible Morris West An Interface Control Document ICD describes interworking two element system share common For example communication interface described term data item message passed protocol observed timing sequencing event An ICD may also describe interaction user system software component hardware device two software component This class document typically used complex interface exist component developed different team It jointly prepared interfacing group It common practice evolve ICD requirement design phase project The requirement interface specified approved document fleshed design follows The requirement describe interface achieve together constraint design follows The design describes interface implemented For example case communication interface following technical detail provided A user interface typically described follows A hardware interface described circuit diagram Rate definition Did help Suggest improvement Request information Exchange idea member community Chambers Associates Pty Ltd The communication boundary Global Positioning System system well within GPS known interface Interfaces documented Interface Control Documents ICDs ICDs formal mean establishing defining controlling interface documenting detailed interface design definition GPS program Interface Specifications ISs specific type ICDs ISs specify single government office agency necessary required approval authority document However procedure process development control maintenance ICDs ISs If seeking ICD appear page please contact GPS Directorate Interface Specification defines requirement related interface GPS space user segment radio frequency link link Revision H dated Sep signed Mar Interface Revision Notices IRNs make change Together six document replace prior version new design The first four rolled one file provided separately Interface Specification defines requirement related interface GPS space user segment radio frequency link Revision D dated Sep signed Mar Interface Revision Notices IRNs make change Together five document replace prior version new design Interface Specification defines characteristic signal transmitted GPS satellite navigation receiver radio frequency link While multiple GPS signal broadcast band Interface Specification defines signal denoted Civil Revision D dated Sep signed Mar Interface Revision Notices IRNs make change Together four document replace prior version new design Interface Control Document defines functional data transfer interface GPS Control Segment CS GPS user community Operational Control System OCS Evolution Plan AEP system era Revision A signed Jan replaces prior version new design Interface Control Document defines functional data transfer interface GPS Next Generation Operational Control System OCX GPS user community The ICD describes data file transferred interface mean distributed capture interface OCX era Revision B dated Sep signed Oct replaces prior version new design It incorporates Interface Revision Notices IRNs relative The GPS Directorate host Public Interface Control Working Group ICWG Open Forum Sept discus eight Proposed Interface Revision Notices PIRNs released June The Interface Control Working Group ICWG specialized technical working group comprised appropriate technical representative interfacing activity interested participating organization The ICWG serf forum develop provide interface requirement well focus interface detail definition issue ICWG member include representative GPS Directorate Air Force government agency office contractor industry organization The detailed description requirement ICWGs provided GPS ICWG Charter ICWGs document publicly releasable referred Public ICWGs structured ICWG additional requirement The additional requirement include coordinating meeting document public For additional information ICWG please contact GPS operated maintained Air Force maintained National Coordination Office Positioning Navigation Timing  Website host NOAA  This page last modified August Interfaces documented using interface control document ICD describe system interface well rule communicating ICDs help ensure compatibility system segment component often considered key element effective system design development The purpose ICD clearly communicate possible input output system potential action whether internal system transparent system user An ICD may describe system interface lowest physical element circuit voltage watt etc user interface subset thereof The level detail included ICD dependant upon requirement stakeholder successfully deliver project requirement ICDs define development team system input output internal interface interface system subsystem user An ICD describe interface characteristic system using An ICD also include anything meaning intended use data Any feature function logic supporting system interface outlined within separate design specification document Defining ICD way allows team develop connecting system without concern data treated system This allows development team work without requirement knowing business logic technical aspect behind system allows modularity lead easy maintenance extensibility system The Federal Enterprise Architecture FEA Reference Model contains component reference many item considered defining ICDs Some item include An ICD also allows project team leverage system providing developer information necessary build complementary application simply interface existing system Some example interface ICD may required include Defense Acquisitions Made Easy Interface Management identifies develops maintains external internal interface necessary system operation It support control measure ensure internal external interface requirement change properly documented accordance configuration management plan communicated affected configuration item The three main area interface management Interface management also address following area The key proper interface control establishing interface management plan ass existing emerging interface standard profile update interface abandon obsolete architecture An interface management plan functional physical interface two component system The component internal external system Many external interface identified process accompanying document architecture The Interface Control Working Group ICWG specialized technical working group composed appropriate technical representative interfacing activity interested participating organization The ICWG serf forum develop provide interface requirement well focus interface detail definition timely resolution issue The ICWG requires collaboration external program office contractor system system system environment As system interface control requirement developed documented made available appropriate stakeholder These interface control requirement documented Interface Control Document placed configuration control Interface Control Documentation includes Interface Control Drawings Interface Requirements Specifications documentation depicts physical functional interface related system component Interface Control Documentation product ICWGs comparable integrated team purpose establish maintain compatibility interfacing system component Updated Surface interface control fundamentally important crystal growth engineering catalysis spectroscopy among process application Understanding role ligand regulating surface property plasmonic metal nanocrystals growth received considerable attention However underlying mechanism diverse functionality ligand yet fully addressed In contribution report systematic study interface control seeded growth gold nanocrystals leading diverse exotic nanostructures improved surface enhanced Raman scattering SERS activity Three dimensional transmission electron microscopy revealed intriguing gold shell growth process mediated bifunctional ligand BDT lead unique crystal growth mechanism compared ligand subsequently concept interfacial energy control mechanism growth mode proposed responsible seeded growth favoring strongest interfacial energy generating asymmetric island growth pathway internal This additionally favor incorporation BDT plasmonic nanogaps thereby generating strong SERS activity maximum efficiency configuration obtained along seeded growth Numerical modeling used explain observation Interestingly strategy used engineer structural diversity system using gold nanoparticle seed various size shape varying Au Au ratio This rendered series diverse exotic plasmonic nanohybrids gold nanorods embedded tag Janus surface distinct surface functionality These would greatly enrich plasmonic nanostructure toolbox various study application anisotropic nanocrystal engineering SERS Raman bioimaging nanoantenna device The Supporting Information available free charge DOI Additional TEM electron tomography image SERS spectrum various gold nanostructures additional FDTD simulation enhancement gold nanostructures Citation data made available participant Linking service For comprehensive list citation article user encouraged perform search Sixteenth Street Washington DC Ein ICD zu deutsch etwa beschreibt wie eine Schnittstelle eines Systems aufgebaut ist und wie sie angesprochen werden kann Dabei ist e unerheblich wie da System selbst funktioniert Komplexe Systeme lassen sich modular Untersysteme zerlegen die untereinander über festgelegte Schnittstellen miteinander kommunizieren Beispielsweise legt da ICD de Navigationssystems fest welche Signale ausgesandt werden und wie sie zu interpretieren sind Das ICD versetzt Hersteller die Lage Navigationssysteme zu bauen ohne das sie etwas über den Betrieb der Satelliten oder die Erzeugung der Signale wissen müssen We employ mixed monolayers carboranethiols alter work function gold silver systematically We use isomer symmetric carboranethiol cage molecule vary molecular dipole moment direction enable work function tunability wide range minimal alteration surface energy Mixed monolayers carboranethiol isomer provide ideal platform study fabrication organic transistor improved device performance demonstrated interface engineering Materials method synthesis spectrum pure mixed SAMs gold silver AFM image thin film nm cyclic voltammogram This material available free charge via Internet Citation data made available participant Linking service For comprehensive list citation article user encouraged perform search Sixteenth Street Washington DC 
interface task	The type extends make task file folder primary unit interaction Instead showing entire hierarchy information tree document interface show subset tree relevant This address problem dealing large hierarchy large set document The interface composed mechanism allows user specify worked model task context DOI ranking focusing mechanism filter highlight relevant document The interface validated statistically significant increase productivity It broadly adopted programmer key part The technology also referred task context model programming paradigm The interface invented PhD Kersten previously worked team combined idea crosscutting aspect Early precursor interface include interface metaphor Edit Read Wear document editing tool The first description interface concept appeared conference publication The first implementation interface started project called Eclipse created March The technology evolved input contribution thousand open source community developer In research group demonstrated utility interface model In Mylyn implementation bundled majority Eclipse IDE distribution In alternate implementation interface became available including NetBeans Cubeon tool By tool provided integration Mylyn In NBTaskFocus got introduced provided Mylyn like feature NetBeans IDE The primary goal interface scope information shown computer application relevant user current task Based user interaction uniquely identifiable element information available user assigned DOI ranking The frequently recently user interacted element information higher DOI element task The DOI ranking information element used within interface four way Elements certain DOI threshold reduce number element presented Elements according DOI instance element highest interest shown top list The element colour indicate range DOI Finally display structured information element based DOI instance text corresponding element low DOI automatically elided The DOI value information element interacted part task derived stored history interaction event recorded user work application This approach requires user indicate start task The collection interaction event take place single task call task context interface demonstrated effective reducing information overload improving productivity The Eclipse Mylyn project NBTaskFocus NetBeans IDE implementation Interface Mylyn filter sort highlight fold manages tree expansion numerous view within Eclipse IDE based currently active task NBTaskFocus filter project panel manages automatic task context NetBeans IDE A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition The interface described following topic provide programmatic access functionality available within Task Scheduler These topic contain description interface list property method defined interface remark special circumstance noted using interface The following interface introduced Task Scheduler used Windows Vista operating system Organizations IT Information Technology department effective organization lack If organization use maintain software server efficiently effectively money drain But easy see direct impact user experience consumer application user conversion true user experience enterprise segment software marketplace Computer software automates business organization usually slow evolving However user experience enterprise application direct impact organization performance When application enterprise employ provide better user experience usability people efficient productive The greater cost human resource within organization bigger impact What organization people Usually perform duty individual job work task manager delegate The bigger organization specialized role Specialization help people achieve optimal performance applying strongest skill relevant task within specific opposed everything average success But specialization particular activity brings communication issue Figure show In contrast generalist may anything le delegate communicate subtasks others With need delegate task provide feedback number communication tool voice phone email application As organization grow need automation task management increase Automated task management help manager track understand happening reduces risk ensures right task get completed right time Though automation highly useful many business process still require human interaction For example people may need handle approval exception management perform activity necessary advance business process The concept task flow drive user contrast Create Read Update Delete CRUD user interface many legacy application ineffective approach automating user action Unfortunately many CRUD application still common use business everyday life Users CRUD application encounter instruction document workflow following way Open screen represents data Change attribute data object Go different screen edit instance changing To change prescription patient healthcare application example doctor might need following A CRUD workflow fairly efficient type low value business But task greater complexity importance CRUD workflow becomes inefficient Plus case risk error increase user may miss step process multiple user may thing number different reporting term user action impossible While easy generate report often object A changed example difficult even impossible answer question What step user typically struggle What typical user performance term workflow completed similar analytics question provide actionable information The idea behind inductive user interface important figure two thing The user interface cornerstone Command Query Responsibility Segregation CQRS ultimate pattern creating scalable business software As organization become process driven used workflow engine Business Process Management BPM software automate process worklist application like shown Figure emerged A typical worklist application let user view list task navigate task detail complete task There still gap market offer user really need For example vendor software lack internationalization software basic feature task filtering prioritization need improvement If task fully supported process flow must redesigned support alternative scenario Now let forget jargon instead focus people work We must consider It may necessary assign task directly particular person group creating task pool worker select task For example company team performs verification client might assign task people directly group task either case based geographic region cover The three key thing worker need perform task follows A adequately represents task provides answer following question For operation task becomes work item someone need get done time location There typical pattern occur operation Modern application typically user interface A properly designed user interface guide user process resulting much better user experience Plus offer guidance interactive user assistance help user take right action Thus application user experience becomes integral part process By focusing user intention action instead data object take giant step toward creating software user experience make user efficient effective productive Principal Technologist SoftServe Austin Texas USA With year experience providing technological leadership research development Oleksandr focus accelerating Product Development Services PDS advanced analytics cloud solution technology innovation In work prior joining SoftServe actively participated creation spread competency architecture assessment security user interface UX design mobility Haskell ALM He also pioneered technological enterprise consulting offering Oleksandr certified multiple area information technology IT certification include Microsoft Certified Professional Certified TIBCO AMX Business Works Integration IBM Certified SOA Solution Designer We let know new article appear Enter mobile number email address send link download free Kindle App Then start reading Kindle book smartphone tablet computer Kindle device required To get free app enter mobile phone number Fulfillment Amazon FBA service offer seller let store product Amazon fulfillment center directly pack ship provide customer service product Something hope especially enjoy If seller Fulfillment Amazon help increase sale We invite Task analysis important aspect user interface design insuring end product usable practical Written task analysis expert book first book provides coverage task analysis It cover detail every step task analysis process discus methodology behind Hackos Redish wisely offer u three thing need user task analysis practical advice practical advice practical advice Shneiderman University Maryland This book well written thorough loaded technique example resource bring analysis everyone Conner Director Usability Learnability PeopleSoft Inc User Task Analysis Interface Design help design great user interface focusing important step process first one You learn go observe user work whether employee company people customer organization You learn find user really need asking want going process understanding trying accomplish JoAnn Hackos Janice Ginny Redish internationally known expert usable design take process conduct user task analysis You learn How interface designer use user task analysis build successful interface Why knowledge user task environment critical successful design How prepare set site visit How select train user task analysis team What observation make question ask question avoid How record report learned development team member How turn information gathered design idea How create paper prototype interface design How conduct usability test prototype find right track This book includes many example design success challenge product every kind There problem loading menu right GitHub home million developer working together host review code manage project build software together Use Git checkout SVN using web URL To use Refer usage When developping debugging helpful run task locally You locally create folder mimic input structure task see run You set task interface use local folder Then locally run task read write directory Note need remove task task run workflow system To run local folder need setup data like workflow system includes following For detail see Run time information like passed token used user impersonation Contents look something like Place input sting port file inside input directory Create folder named input directory port fill input data file You see output folder populated file created If output string port file created output folder For output directory port folder created generated file This file creted task completion contains final status note 
list processing language	historically family long history distinctive fully Originally specified Lisp widespread use today Only older one year Lisp changed since early day many existed history Today best known Lisp dialect Lisp originally created practical influenced notation It quickly became favored programming language AI research As one earliest programming language Lisp pioneered many idea including The name derives LISt Processor one Lisp major Lisp made list Thus Lisp program manipulate source code data structure giving rise system allow programmer create new syntax new embedded Lisp The interchangeability code data give Lisp instantly recognizable syntax All program code written parenthesized list A function call syntactic form written list function operator name first argument following instance function take three argument would called Lisp invented MIT McCarthy published design paper entitled Recursive Functions Symbolic Expressions Their Computation Machine Part I He showed simple operator notation function one build language algorithm first AI language already included many concept recursion came used Lisp McCarthy original notation used bracketed would translated As example equivalent Once Lisp implemented programmer rapidly chose use abandoned surfaced attempt Lisp first implemented computer Russell read McCarthy paper realized McCarthy surprise Lisp function could implemented The result working Lisp interpreter could used run Lisp program properly Lisp expression Two became primitive operation decomposing list Contents Address part Register number Contents Decrement part Register number term register used mean memory register nowadays called memory location etymology term Lisp dialect still use operation return first item list rest list respectively The first complete Lisp compiler written Lisp implemented Tim Hart Mike Levin MIT This compiler introduced Lisp model incremental compilation compiled interpreted function intermix freely The language used Hart Levin memo much closer modern Lisp style McCarthy earlier code Lisp difficult system implement compiler technique stock hardware routine developed graduate student made practical run Lisp computing system efficiency still problem This led creation dedicated hardware running Lisp environment program During great effort made unify work new Lisp dialect mostly successor like NIL New Implementation Lisp single language The new language somewhat compatible dialect replaced book note compatibility various construct In published Common Lisp standard ANSI Information Technology Programming Language Common Lisp Since inception Lisp closely connected research community especially system Lisp used implementation programming language used famous AI system In AI research spawned commercial offshoot performance existing Lisp system became growing issue Over history Lisp spawned many variation core theme language Moreover given dialect may several instance dozen implementation Differences dialect may quite instance Common Lisp us keyword name function Scheme us Within dialect standardized however conforming implementation support core language different extension library After declined somewhat Lisp recently experienced resurgence interest Most new activity focused around implementation includes development new portable library application Many new Lisp programmer inspired writer pursue language others considered antiquated New Lisp programmer often describe language experience claim substantially productive language This increase awareness may contrasted Lisp brief gain Dan Weinreb list survey Common Lisp implementation eleven actively maintained Common Lisp implementation Scieneer Common Lisp new commercial implementation forked CMUCL first release The community created new supporting infrastructure wiki collect Common Lisp related information list resource lisp popular IRC channel allows sharing commenting code snippet support written Lisp collect content various blog user discus Lisp topic service announcing job offer weekly news service hosting site open source Common Lisp project library manager Common Lisp year Lisp celebrated OOPSLA There regular local user meeting Boston Vancouver Hamburg Other event include European Common Lisp Meeting European Lisp Symposium International Lisp Conference The Scheme community actively maintains Several significant new implementation Chicken Gambit Gauche Ikarus Larceny Ypsilon developed last year The Revised Report Algorithmic Language Scheme standard Scheme widely accepted Scheme community The process created lot quasi standard library extension Scheme User community individual Scheme implementation continue grow A new language standardization process started led R RS Scheme standard Academic use Scheme teaching computer science seems declined somewhat Some university MIT longer using Scheme computer science introductory course There several new dialect Lisp Lisp Flavored Erlang represent two major stream Lisp development These language embody significantly different design choice successor The primary influence Scheme It many feature Lisp Machine Lisp large Lisp dialect used program designed efficiently implementable personal computer workstation Common Lisp large language standard including many data type function macro language element well object system Common Lisp also borrowed certain feature Scheme Scheme statically scoped properly dialect Lisp programming language invented It designed exceptionally clear simple semantics different way form expression Designed decade earlier Common Lisp minimalist design It much smaller set standard feature certain implementation feature full specified Common Lisp A wide variety programming paradigm including imperative functional message passing style find convenient expression Scheme Scheme continues evolve series standard Revised Report Algorithmic Language Scheme series recent dialect Lisp principally target well CLR Ruby VM compiling It designed pragmatic language Clojure draw considerable influence place strong emphasis immutability Clojure provides access Java framework library optional type hint call Java avoid reflection enable fast primitive operation Further Lisp dialect used many application editor later Nyquist Scheme The potential small size useful Scheme interpreter make particularly popular embedded scripting Examples include successfully embedded image processor generic name LIBREP Lisp interpreter John Harper originally based language embedded Lisp first language structure program code represented faithfully directly standard data quality much later dubbed Thus Lisp function manipulated altered even created within Lisp program without manipulation This generally considered one main advantage language regard expressive power make language suitable syntactic macro A conditional using syntax invented McCarthy Fortran context He proposed inclusion made part specification For Lisp McCarthy used general took popularized Lisp deeply influenced leader research team developed turn Lisp influenced Smalltalk later dialect adopting programming feature inheritance class encapsulating instance message passing etc  The object system introduced concept The provides multiple inheritance multimethods yielding flexible powerful form It served template many subsequent Lisp including object system often implemented via object system defined term Lisp second language Smalltalk still one language posse metaobject system Many year later Alan Kay suggested result confluence feature Smalltalk Lisp could regarded properly conceived programming system Lisp introduced concept system walk looking unused memory Progress modern sophisticated garbage collection algorithm generational garbage collection stimulated use Lisp lecture said Largely resource requirement respect early computing hardware including early microprocessor Lisp become popular outside community language Because suitability complex dynamic application Lisp enjoying resurgence popular interest Lisp Unlike language distinction made expression code data written expression When expression produce value Common Lisp possibly multiple value embedded expression Each value data type McCarthy paper introduced two type syntax sexps mirror internal representation code data express function never found favor almost Lisps today use manipulate code data The use parenthesis Lisp immediately obvious difference programming language family As result student long given Lisp nickname However syntax also responsible much Lisp power syntax extremely regular facilitates manipulation computer However syntax Lisp limited traditional parenthesis notation It extended include alternative notation For example XMLisp Common Lisp extension employ integrate Extensible Markup Language The reliance expression give language great flexibility Because Lisp written list processed exactly like data This allows easy writing program manipulate program Many Lisp dialect exploit feature using macro system enables extension language almost without limit A Lisp list written element separated surrounded parenthesis For example list whose element three These value implicitly typed respectively two integer data type called symbol declared The empty list also represented special atom This entity Lisp atom list Expressions written list using The first element list name function name macro lambda expression name special operator see The remainder list argument For example function return argument list expression evaluates list The quote preceding example special operator return argument without evaluating Any unquoted expression recursively evaluated enclosing expression evaluated For example evaluates list Note third argument list list nested Arithmetic operator treated similarly The expression evaluates The equivalent would Lisp notion operator implemented language Arithmetic operator Lisp able take number argument A increment operator sometimes implemented name giving syntax equivalent returning new value Special operator sometimes called special form provide Lisp control structure For example special operator take three argument If first argument evaluates second argument otherwise evaluates third argument Thus expression evaluates Of course would useful expression substituted place Lisp also provides logical operator The operator return first nil argument respectively evaluate James Another special operator used bind variable value evaluated within expression This operator also used create function argument list argument expression expression function evaluates returned value value last expression evaluated The expression evaluates function applied take one argument bind return number one greater argument Lambda expression treated differently named function invoked way Therefore expression evaluates Here function application execute anonymous function passing value Named function created storing lambda expression symbol using macro defines new function named global environment It conceptually similar expression In original two fundamental atom list A list finite ordered sequence element element either atom list atom symbol A symbol essentially unique named item written string used either variable name data item For example list contains three element symbol list number The essential difference atom list atom immutable unique Two atom appeared different place source code written exactly way represented object whereas list separate object could altered independently list could distinguished list comparison operator As data type introduced later Lisp dialect evolved concept atom lost importance Many dialect still retained predicate defining true object con A Lisp list Each cell list called Scheme composed two called These respectively equivalent field discussed article Of many data structure built con cell one basic called A proper list either special empty list symbol con point datum may another con structure list point another proper list If given con taken head linked list car point first element list cdr point rest list For reason function also called referring con part linked list rather say tree Thus Lisp list atomic object instance container class Java would A list nothing aggregate linked con A variable refers given list simply pointer first con list Traversal list done list taking successive cdrs visit con list using several map function list Because con list universal Lisp system common misconception Lisp data structure In fact simplistic Lisps data structure vector hash table structure forth Parenthesized represent linked list structure There several way represent list A con written car cdr A longer proper list might written notation This conventionally abbreviated An improper list may written combination two list three con whose last cdr list fully specified form Lisp provides many procedure accessing controlling list Lists created directly procedure take number argument return list argument Because way list constructed procedure used add element front list Note procedure asymmetric handle list argument list constructed The procedure appends two list one another Because Lisp list linked list appending two list Lisp list simple linked list share structure one another That say two list final sequence con For instance execution following Common Lisp code list respectively However tail structure list It copy con cell pointing memory location list Sharing structure rather copying give dramatic performance improvement However technique interact undesired way function alter list passed argument Altering one list replacing affect This change thereby also change possibly unexpected result This source bug function alter argument documented reason Aficionados avoid destructive function In Scheme dialect favor functional style name destructive function marked cautionary exclamation point bang read replaces car con In Common Lisp dialect destructive function commonplace equivalent named replace car This function rarely seen however Common Lisp includes special facility make easier define use destructive function A frequent style Common Lisp write code functionally without destructive call prototyping add destructive call optimization safe Lisp evaluates expression entered user Symbols list evaluate usually simpler expression instance symbol evaluates value variable name evaluates However form evaluate entering Lisp return Any expression also marked prevent evaluated necessary symbol list This role special operator abbreviation one quotation mark For instance usually entering symbol return value corresponding variable error variable To refer literal symbol enter usually Both Common Lisp Scheme also support operator termed Scheme entered character This almost plain quote except allows expression evaluated value interpolated quoted list comma operator If variable value evaluates evaluates The backquote often used defining macro expansion form quoted form Lisp equivalent literal It may possible modify value mutable literal program code For instance function return quoted form code call function modifies form may alter behavior function subsequent iteration Modifying quoted form like generally considered bad style defined ANSI Common Lisp erroneous resulting undefined behavior compiled file coalesce similar constant put memory etc Lisp formalization quotation noted others example idea The Lisp family split use dynamic static lexical Clojure Common Lisp Scheme make use static scoping default embedded language use dynamic scoping Since version Emacs us dynamic lexical scoping A fundamental distinction Lisp language Lisp textual representation program simply description internal data structure linked list symbol number character etc would used underlying Lisp system Lisp us implement powerful macro system Like macro language macro return code compiled However unlike C macro macro Lisp function exploit full power Lisp Further Lisp code structure list macro built function language In short anything Lisp data structure Lisp macro code In contrast language parser output purely internal language implementation manipulated programmer This feature make easy develop language within language For example Common Lisp Object System implemented cleanly language extension using macro This mean application need different inheritance mechanism use different object system This stark contrast language example Java support multiple inheritance reasonable way add In simplistic Lisp implementation list structure directly run program function literally piece list structure traversed interpreter executing However substantial Lisp system also include compiler The compiler translates list structure machine code execution This code run fast code compiled conventional language Macros expand compilation step thus offer interesting option If program need precomputed table macro might create table compile time compiler need output table need call code create table run time Some Lisp implementation even mechanism allows code present compile time macro would need present emitted module Lisp language often used interactive may combined IDE The user type expression command line directs IDE transmit Lisp system Lisp entered expression result For reason Lisp command line called The basic operation REPL follows This simplistic description omits many element real Lisp quoting macro The function accepts textual input par internal data structure For instance type text prompt translates linked list three element symbol number number It happens list also valid piece Lisp code evaluated This car list name addition operation Note read single symbol read number one hundred read string The function evaluates data returning zero Lisp data result Evaluation mean interpretation Lisp system compile every expression native machine code It simple however describe evaluation interpretation To evaluate list whose car name function first evaluates argument given cdr applies function argument In case function addition applying argument list yield answer This result evaluation The symbol evaluates value symbol foo Data like string evaluates string The list evaluates list It job function represent output user For simple result trivial An expression evaluated piece list structure would require traverse list print To implement Lisp REPL necessary implement three function function Naturally implementation complex since must also implement special operator like This done basic REPL one line code The Lisp REPL typically also provides input editing input history error handling interface debugger Lisp usually evaluated In argument evaluated innermost order argument undefined leaving room optimization compiler Lisp originally control structure many added language evolution Lisp original conditional operator precursor later structure Programmers Scheme dialect often express loop using Scheme commonality academic computer science led student believe tail recursion common way write iteration Lisp incorrect All Lisp dialect iteration construct Scheme loop complex expression Moreover key issue make objective rather subjective matter Scheme make specific requirement handling thus reason use tail recursion generally encouraged Scheme practice expressly supported language definition By contrast ANSI Common Lisp require optimization commonly termed tail call elimination Thus fact tail recursive style casual replacement use traditional construct discouraged Common Lisp matter stylistic preference potentially one efficiency since apparent tail call Common Lisp may compile simple program correctness since tail recursion may increase stack use Common Lisp risking Some Lisp control structure equivalent language syntactic keywords Expressions using operator surface appearance function call differ argument necessarily case iteration expression may evaluated In contrast major programming language Lisp allows implementing control structure using language Several control structure implemented Lisp macro even programmer want know work Both Common Lisp Scheme operator control flow The difference operator deepest difference two dialect Scheme support using procedure allows program save later restore particular place execution Common Lisp support continuation support several way handling escape continuation Often algorithm expressed Lisp either imperative functional style As noted Scheme tends favor functional style using tail recursion continuation express control flow However imperative style still quite possible The style preferred many Common Lisp programmer may seem familiar programmer used structured language C preferred Schemers closely resembles language Because Lisp early heritage list processing wide array function relating iteration sequence In many case explicit loop would needed language like loop C Lisp task accomplished function The true many functional programming language A good example function Scheme called Common Lisp called Given function one list applies function successively list element order collecting result new list This applies function corresponding pair list element yielding result Here example Common Lisp code The basic program Lisp syntax lends naturally recursion Mathematical problem enumeration recursively defined set simple express notation Evaluate number An alternative implementation take le stack space previous version underlying Lisp system optimizes Contrast iterative version us macro The following function revers list Lisp function thing Various object system model built top alongside Lisp including Due problem keeping track many bracket say LISP acronym Lots Irritating Single Parentheses LISP acronym programming language designed easy manipulation data string Developed John McCarthy commonly used language artificial intelligence programming It one oldest programming language still relatively wide use More organization looking hop cloud wagon facing application data integration roadblock Getting around difficult approach help You forgot provide Email Address This email address appear valid This email address already registered Please You exceeded maximum character limit Please provide Corporate Address By submitting Email address I confirm I read accepted Terms Use By submitting personal information agree TechTarget may contact regarding relevant content product special offer You also agree personal information may transferred processed United States read agree In LISP computation expressed function least one object Objects function data item constant variable data structure LISP ability compute symbolic expression rather number make convenient AI application Find content member offer By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States The DevOps journey well underway many obstacle remain New product using artificial intelligence machine learning Testing internet thing one thing AI take next level A LogiGear executive share company A complicated new game required complicated testing strategy help outside Here game maker Anki learned IBM joined Docker MTA program make easier enterprise modernize existing application using container This product update explores new database software release ScaleArc SQL Server integrated Learn architecture help digital transformation despite many structure exist Expert AWS gave automation capability boost release CloudFormation StackSets feature let dev team deploy VMware Cloud AWS provides option Dedicated Hosts offer increased isolation But majority AWS Amazon SQS enables user process track task queue Combine Lambda CloudWatch add extra message Oracle great job getting Java SE released earlier year modularity various smaller update may enough At JavaOne Oracle identified four project significant impact future Java Project Valhalla Whether secure cloud secure mobile device secure IOT interaction organization making blockchain security In feature highlight development tool augment phase type application development Cloud vendor making easier IT business people collaborate infrastructure strategy Microsoft Windows Azure Platform Appliance integrates private hybrid public cloud The Agile philosophy rigid dogmatic good The DevOps evangelist better pay attention risk DevOps Out old new right Not much come application security Old danger linger remain Warning All IoT product could set DevOps practice principle back year thanks lack industry All Rights Reserved Next Previous Up To untutored eye Lisp strange programming language In Lisp code parenthesis everywhere Some people even claim name stand Lots Isolated Silly Parentheses But claim unwarranted Lisp stand LISt Processing programming language handle list list putting parenthesis The parenthesis mark boundary list Sometimes list preceded apostrophe called Lisp Lists basis Lisp A abbreviation special form need think special form See PC PC Magazine PC among federally registered trademark Ziff Davis LLC may used third party without explicit permission We updated encourage read clicking A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition Lists play important role Lisp reason historical practical Historically list Lisp original composite data type though decade since data type These day Common Lisp programmer likely use vector hash table class structure use list Practically speaking list remain language excellent solution certain problem One problem represent code data order support macro particular Lisp may explain language feel lack list More generally list excellent data structure representing kind heterogeneous hierarchical data They also quite lightweight support functional style programming another important part Lisp heritage Thus need understand list term gain better understanding list work better position appreciate use The key understanding list understand largely illusion built top object instance primitive data type Those simpler object pair value called function used create take two argument return new con cell containing two value These value reference kind object Unless second value another con cell con printed two value parenthesis separated dot dotted pair The two value con cell called name function used access At dawn time name mnemonic least folk implementing first Lisp IBM But even lifted assembly mnemonic used implement operation However bad name somewhat meaningless considering individual con cell best think simply arbitrary pair value without particular semantics Thus Both also able place given existing con cell possible assign new value either value Because value con cell reference kind object build larger structure con cell linking together Lists built linking together con cell chain The element list held con cell link subsequent con cell held The last cell chain I mentioned Chapter represents empty list well boolean value false This arrangement mean unique Lisp called However language outside Lisp family provide extensive support humble data type So I say particular value list I really mean either reference con cell The con cell first item list reference another list another con cell containing remaining element The Lisp printer understands convention print chain con cell parenthesized list rather dotted pair When talking structure built con cell diagram big help diagram represent con cell pair box like The box left represents box right The value stored particular con cell either drawn appropriate box represented arrow box representation referenced value For instance list consists three con cell linked together would diagrammed like However time work list wo deal individual con cell function create manipulate list take care For example function build con cell cover link together following expression equivalent previous expression Similarly thinking term list use meaningless name synonym use dealing con cell list Because con cell hold kind value list And single list hold object different type The structure list would look like Because list list element also use represent tree arbitrary depth complexity As make excellent representation heterogeneous hierarchical data XML processor instance usually represent XML document internally list Another obvious example data Lisp code In Chapters write HTML generation library us list list represent HTML generated I talk next chapter using con cell represent data structure Common Lisp provides quite large library function manipulating list In section Functions Mapping look important function However easier understand context idea borrowed functional programming The essence functional programming program built entirely function side effect compute result based solely value argument The advantage functional style make program easier understand Eliminating side effect eliminates almost possibility action distance And since result function determined value argument behavior easier understand test For instance see expression know result uniquely determined definition function value You worry may happened earlier execution program since nothing change result evaluating expression Functions deal number naturally functional since number immutable A list hand mutated seen ing con cell make backbone However list treated functional data type consider value determined element contain Thus list form functionally equivalent list containing four value regardless con cell actually used represent list And function take list argument return value based solely content list likewise considered functional For instance sequence function given list always return list Different call functionally equivalent list argument return functionally equivalent result list Another aspect functional programming I discus section Mapping use function function treat function data taking argument returning result Most Common Lisp function written functional style I discus later mix functional coding style first understand subtlety functional style applied list The reason list function written functionally allows return result share con cell argument To take concrete example function take number list argument return new list containing element argument For instance From functional point view job return list without modifying con cell list One obvious way achieve goal create completely new list consisting four new con cell However work necessary Instead actually make two new con cell hold value linking together pointing second con cell head last argument list It return con cell containing None original con cell modified result indeed list The wrinkle list returned share con cell list The resulting structure look like In general must copy last argument always return result last argument Other function take similar advantage list ability share structure Some like specified always return result share structure particular way Others simply allowed return shared structure discretion implementation If Common Lisp purely functional language would end story However possible modify con cell created ing need think bit side effect structure sharing mix Because Lisp functional heritage operation modify existing object called functional programming changing object state destroys since longer represents value However using term describe operation lead certain amount confusion since two different kind destructive operation operation operation operation used specifically side effect All us destructive sense function use cover change state existing object But bit unfair describe operation destructive intended used code written functional style described using functional terminology However mix nonfunctional operation function return result need careful inadvertently modify shared structure For instance consider three definition After evaluating form three list share structure like list previous diagram Now consider happens modify The change also change shared structure first con cell also third con cell ing change value con cell affecting list On hand kind destructive operation recycling operation intended used functional code They use side effect optimization In particular reuse certain con cell argument building result However unlike function reuse con cell including unmodified list return recycling function reuse con cell raw material modifying necessary build desired result Thus recycling function used safely original list going needed call recycling function To see recycling function work let compare nondestructive function return reversed version sequence recycling version function Because modify argument must allocate new con cell element list reversed But suppose write something like By assigning result back removed reference original value Assuming con cell original list referenced anywhere else eligible garbage collected However many Lisp implementation efficient immediately reuse existing con cell rather allocating new one letting old one become garbage allows exactly The stand meaning need allocate new con cell The exact side effect intentionally specified allowed modify con cell list typical implementation might walk list changing con cell point previous con cell eventually returning con cell previously last con cell old list head reversed list No new con cell need allocated garbage created Most recycling function like nondestructive counterpart compute result In general recycling function name counterpart except leading However including several commonly used recycling function recycling version recycling version family sequence function In general use recycling function way use nondestructive counterpart except safe use know argument going used function return The side effect recycling function specified tightly enough relied upon However water muddied handful recycling function specified side effect relied upon They recycling version variant recycling version sequence function friend Like return concatenation list argument build result following way nonempty list passed set last con cell point first con cell next nonempty list It return first list head result Thus variant relied walk list structure list argument con cell holding old value new value otherwise leave list intact It return original list value would computed The key thing remember exception rule ca rely side effect recycling function It perfectly acceptable arguably good style ignore reliability side effect use like recycling function value return Although use recycling function whenever argument recycling function wo used function call worth noting recycling function loaded gun pointed footward accidentally use recycling function argument used later liable lose toe To make matter worse shared structure recycling function tend work Nondestructive list function return list share structure assumption con cell never modified recycling function work violating assumption Or put another way sharing structure based premise care exactly con cell make list using recycling function requires know exactly con cell referenced In practice recycling function tend used idiomatic way By far common recycling idiom build list returned function consing onto front list usually ing element onto list stored local variable returning result ing This efficient way build list create one con cell modify local variable zip list reassigning Because list created entirely within function danger code outside function reference con cell Here function us idiom build list first number starting zero The next common recycling idiom immediately reassign value returned recycling function back place containing potentially recycled value For instance often see expression like following using recycling version This set value old value except removed However even idiom must used care share structure list referenced elsewhere using instead destroy structure list For example consider two list earlier share last two con cell You delete like However likely perform necessary deletion setting third con cell disconnecting fourth con cell one holding list Because third con cell also first con cell following modifies well If used instead would built list containing value creating new con cell necessary rather modifying con cell In case affected The idiom probably account percent us recycling function Other us possible require keeping careful track function return shared structure In general manipulating list best write code functional style function depend content list argument modify Following rule course rule using destructive function recycling otherwise Once code working profiling show need optimize replace nondestructive list operation recycling counterpart certain argument list referenced anywhere else One last gotcha watch sorting function mentioned Chapter also recycling function applied list However function nondestructive counterpart need sort list without destroying need pas sorting function copy made In either case need sure save result sorting function original argument likely tatter For instance With background way ready look library function Common Lisp provides manipulating list You already seen basic function getting element list Although get element list combining enough call move list extract element bit tedious So Common Lisp provides function named ordinal return appropriate element More generally function take two argument index list return th element list Similarly take index list return result calling time Thus simply return original list equivalent Note however none function efficient term work done computer equivalent combination way get th element list without following reference The composite function another family function may see used time time Each function named placing sequence four representing call call Thus Note however many function make sense applied list contain list For instance extract list given thus list passed must contain another list first element In word really function tree rather list These function used often old day And even Lisp hacker tend avoid longer combination However used quite bit older Lisp code worth least understanding work The function also used able place using list nonfunctionally Table summarizes list function I wo cover detail Another important aspect functional style use function function take function argument return function value You saw several example function previous chapter Although used list vector kind sequence Common Lisp also provides six mapping function specifically list The difference six function build result whether apply function element list con cell list structure function like Because always return list require argument Instead first argument function apply subsequent argument list whose element provide argument function Otherwise behaves like function applied successive element list argument taking one element list per application function The result function call collected new list For example like except instead passing element list function pass actual con cell Thus function access value element list via con cell also rest list via work like except way build result While build completely new list hold result function call build result splicing together result must list Thus function invocation provide number element included result like pass element list mapped function like pass con cell Finally function control construct disguised function simply return first list argument useful side effect mapped function something interesting cousin family While con cell list typically considered synonymous quite right I mentioned earlier use list list represent tree Just function discussed chapter allow treat structure built con cell list function allow use con cell represent tree set two kind map I discus function next chapter Adapted originally short verb When place given expands call function Lispers one still use still use directly modern style use Typically simple object number drawn within appropriate box complex object drawn outside box arrow box indicating reference This actually corresponds well many Common Lisp implementation work although object conceptually stored reference certain simple immutable object stored directly con cell The phrase used language standard invention Lisp literature simply us term kind operation leading confusion I trying dispel The string function similar return result counterpart specified modify string argument place For example examination us recycling function Common Lisp Open Code Collection CLOCC diverse set library written various author instance idiom accounted nearly half us recycling function There course way thing The extended macro instance make particularly easy likely generates code even efficient version This idiom account percent us recycling CLOCC code base used operation vector since still return sorted vector ignore fact use return value sake consistency roughly equivalent sequence function work list Also confusingly take index first argument opposite Another difference signal error try access element index greater equal length list return In particular used used extract various part expression passed macro invention destructuring parameter list For example could take apart following expression Like Thus primitive two function could build top could build top In Lisp dialect filtering function like idiomatic way filter list This reference Processing If previous version use reference included software Help menu If see error suggestion If prefer technical reference visit Arduino come basic example communicating Processing Examples Communication These useful want write Arduino Processing program talk This work best communicating simple information If want control Arduino board Processing program may want use Arduino library Processing described This library allows control Arduino board Processing without writing code Arduino Instead upload standard firmware program board communicate using library The firmware called Firmata included Arduino software The corresponding Processing library downloaded Library Processing Updated Library Processing Updated property file Note run Linux need change Linux case sensitive work change letter folder library Processing Library These function Processing Arduino Library communicate Processing Arduino upon Firmata sketch installed return list available serial device If Arduino board connected computer call function device list create Arduino object Parent without quote name name serial device one name returned rate speed connection typically Note library rate parameter optional set digital pin input output servo mode return value digital pin either pin must set input writes digital pin return value analog input writes analog value PWM wave digital pin support pin value always always writes value servo motor value If trouble getting work ask help If found bug Arduino Firmata library Processing please report 
memory map	free GPS mapping software PC iPhone iPad Android Windows Mobile choose world catalog topographic map nautical chart adventure map developer outdoor adventure mapping software Topographic Maps eg USGS topo quad Nautical chart eg NOAA chart Copyright Inc In structure data usually resides memory indicates laid Memory map different meaning different part operating system It fastest flexible cache organization us The associative memory store address content memory word In memory map passed order instruct memory layout It contains information regarding size total memory reserved region may also provide detail specific architecture In implementation memory map refers store mapping certain process virtual memory layout space relates physical memory address In native program memory map refers mapping loaded file memory region These memory map used resolve actual symbol The PC BIOS provides set routine used operating system get memory layout Some available routine This BIOS interrupt call used running OS get memory size configuration It supported AMI BIOSses dated August later The operating system set AX call int If error happened routine return CF Carry Flag set If error routine return CF clear state register described following Input SMAP buffer structure How used The operating system shall allocate SMAP buffer memory byte buffer Then set register specified Input table On first call EBX set Next step call INT If error interrupt call return CF clear buffer filled data representing first region memory map EBX updated BIOS OS call routine The next region returned buffer BIOS set EBX zero done You must JavaScript enabled browser utilize functionality website This website requires cooky provide feature For information please see To accept cooky site please click Allow button Welcome guest easiest quickest way get Ordnance Survey Explorer Landranger map PC iPhone iPad Android device Turns mobile outdoor GPS make navigation safer easier fun Buy DVD USB download easiest quickest way get marine chart derived UKHO Admiralty PC iPhone iPad Android device Turns mobile tablet chart plotter make navigation safer easier fun Buy DVD download easiest quickest way get CAA VFR aviation chart PC iPhone iPad Android device Turns mobile tablet chart plotter make navigation safer easier fun Buy CD download easiest quickest way get OS Street View AZ London PC iPhone iPad Android device Turns mobile tablet digital street atlas GPS position Buy CD USB download Explore past Cassini Ordnance Survey historical map Unlimited printing use PC mobile tablet GPS Buy CD download Try OS map anywhere Great Britain PC iPhone iPad Android Order Explorer Landranger Street map today Download free trial Download Download  This free update existing user edition discounted older edition Copyright Publishing Ltd Website You must JavaScript enabled browser utilize functionality website This website requires cooky provide feature For information please see To accept cooky site please click Allow button Welcome guest To access new Memory Map store need account License Management system If already one login using detail If create one clicking link If account License Management system please log using detail Checking Remember Me let access shopping cart computer logged Required Fields Here current previous version software user Windows XP Vista Your existing map license user data effected removing updating software For use MacOS Yosemite later For use For info Remote Tracking For use For info AIS  This free update existing user edition discounted older edition Copyright Publishing Ltd Website software available PC mobile device Select platform option Download All software apps free condition option may like consider Minimum system requirement running software EULA End User Licence Agreement This free update existing user edition discounted older edition Copyright Publishing Ltd Website The PC app drive everything leading brand recreational mapping software tailored outdoor pursuit software included branded mapping product  Used thousand outdoor enthusiast sailor across world boast award winning software largest range map chart compatible wide range Mobile Devices handheld GPSs Below illustrated example popular feature The first step planning trip look map chart publishes wide range international map chart may also use map scan paper map use software Route planning simple clicking mouse Click put starting point click creating route instant distance compass bearing estimated time It easy requires licence upgrade click detail World powerful aide planning route Bring map life within continuous virtual landscape Pan zoom fly map change simulate effect sun different time day Select camera angle height position record play back print export custom journey All mapping product published include elevation data World resolution appropriate type coverage mapping Print full colour personalised map scale choice size Personalise map route mark note The added grid coordinate margin allow plot use printed output way would full size map sheet Create Route Card distribute companion necessary information one document Route Cards printed emailed posted web site Route Cards created HTML know bit HTML code tailor suit need connecting GPS Laptop use integrated GPS Windows Mobile Smartphone compatible Personal Navigation Device PND transform fully featured GPS plotter See position high quality moving scroll move us traditional navigational tool terminology guide help work map including Track logging Range Bearing Positions Estimated time ETA Cross Track Error XTE Velocity Made Good VMG clearing bearing alarm zone much easy build history trip even include feature outdoor athlete Import track log handheld GPS one created live GPS see exactly together speed distance covered profile graphical form Some GPS unit record heart rate pedal cadence also displayed graphically Create digital journal adding picture text sound program file point map By linking mark simple double click open photo sound recording file ideal navigation includes principle navigation feature expect Maps selected sent PC Mobile Device downloaded fly available free AppStore free download site available Android Market early included PC software fully compatible PDAs SmartPhones running Windows Mobile operating system Windows Phone yet supported Development expected late application run well Net Books PC Tablets small form factor PCs  This free update existing user edition discounted older edition Copyright Publishing Ltd Website 
module  testing	Module testing process testing individual subprogram subroutine class procedure program Instead testing whole software program module testing recommend testing smaller building block program Module testing largely white box oriented The objective Module testing demonstrate proper functioning module demonstrate presence error module Module testing allows implement parallelism testing process giving opportunity test multiple module simultaneously Module Testing recommended Here tip consider performing Module Testing Penetration tool help identifying security weakness ing network server web What Spiral Model Spiral Model combination waterfall model iterative model Each phase What Agile Testing Unlike WaterFall method Agile Testing begin start What Monkey Testing Monkey defined kind testing deal random When create new product make sure requirement met client get A typical software automation requires automation tool like QTP Coded UI I question entry mean module testing test many aspect tester I puzzling solve problem method Equivalence Classing Because I think initializing Ac Kh equivalence classing Thanks entry hope answer question Yes module testing tester test many input possible In case test possible input need use equivalence class limit number test case But particular example tester test legal input Now suppose PokerLib Hand class consists card There combination combination If working sort gambling machine company like Bally code absolutely must correct would need test combination This would best done tester using module testing external test harness But developer could still use unit testing eliminate many bug possible Chris You quite correct definition crux issue The IEEE long ago published specific definition unit testing module testing also element testing component testing almost never used practice The folk adopted term Unit Testing refer development related activity automatically associate term Unit Testing Ultimately terminology intended clarify simplify communication I never quibble formal definition IEE anyone else Your idea using term interaction interesting sure improvement clarity computer program thought sort ineraction change machine state Maybe chat PNSQC From Chris BlainSent August PMTo James McCaffreySubject RE Your blog entry The Difference Between Unit Testing Module Testing View blog entry seems discussion always run exact definition unit module Your post seems argue developer test unit tester test module Maybe could expand definition clarifying goal unit testing module testing contrast would clearer Taking another tack I wonder replaced module interaction might closer useful idea If take definition tester interested module testing give lot work However interaction something I think time likely developer thinking especially write module really enjoy blog looking forward presentation Comments closed No credit card required Chapter Module Unit Testing Up point largely ignored mechanic testing size program tested However large program say statement class require special testing treatment chapter consider initial step structuring testing large program module testing Chapters enumerate remaining step Module testing unit testing process testing individual subprogram subroutine class procedure program More specifically rather initially testing program whole testing first focused smaller building block program The motivation threefold First module testing way managing combined element testing since attention focused initially smaller unit program Second module testing eas task debugging process pinpointing correcting discovered error since error found known exist particular module Finally module testing introduces parallelism program testing process presenting u opportunity test multiple module simultaneously The purpose module testing compare function module functional interface specification defining module To reemphasize goal testing process objective show module meet specification No credit card required In method individual unit set one computer program module together associated control data usage procedure operating procedure tested determine whether fit use Intuitively one view unit smallest testable part application In unit could entire module commonly individual function procedure In unit often entire interface class could individual method Unit test short code fragment created programmer occasionally development process It form basis component testing Ideally independent others Substitutes used assist testing module isolation Unit test typically written run ensure code meet design behaves intended Because class may class testing class frequently spill testing another class A common example class depend order test class tester often writes code interacts database This mistake unit test usually go outside class boundary especially cross boundary introduce unacceptable performance problem unit Crossing unit boundary turn unit test integration test test case fail make le clear component causing failure Instead software developer create abstract interface around database query implement interface By abstracting necessary attachment code temporarily reducing net effective coupling independent unit thoroughly tested may previously achieved This result unit also maintainable Unit testing commonly may still performed manually The favor one The objective unit testing isolate unit validate correctness A manual approach unit testing may employ instructional document However automation efficient achieving enables many benefit listed article Conversely planned carefully careless manual unit test case may execute integration test case involves many software component thus preclude achievement goal established unit testing To fully realize effect isolation using automated approach unit code body test executed within outside natural environment In word executed outside product calling context originally created Testing isolated manner reveals unnecessary dependency code tested unit data space product These dependency eliminated Using automation framework developer code criterion result known good test verify unit correctness During test case execution framework test fail criterion Many framework also automatically flag failed test case report summary Depending upon severity failure framework may halt subsequent testing As consequence unit testing traditionally motivator programmer create code body This practice promotes healthy habit software development unit testing refactoring often work together best solution may emerge Parameterized unit test PUTs test take parameter Unlike traditional unit test usually closed method PUTs take set parameter PUTs supported various test framework Suitable parameter unit test may supplied manually case automatically generated test framework Testing tool like exist generate test input PUTs The goal unit testing isolate part program show individual part correct A unit test provides strict written piece code must satisfy As result affords several benefit Unit testing find problem early This includes bug programmer implementation flaw missing part specification unit The process writing thorough set test force author think input output error condition thus crisply define unit desired behavior The cost finding bug coding begin code first written considerably lower cost detecting identifying correcting bug later bug may also cause problem software Code impossible difficult test poorly written thus unit testing force developer structure function object better way In TDD frequently used unit test created code written When test pas code considered complete The unit test run function frequently larger code base developed either code changed via automated process build If unit test fail considered bug either changed code test The unit test allow location fault failure easily traced Since unit test alert development team problem handing code tester client still early development process Unit testing allows programmer code upgrade system library later date make sure module still work correctly The procedure write test case whenever change cause fault quickly identified Unit test detect change may break Unit testing may reduce uncertainty unit used testing style approach By testing part program first testing sum part becomes much easier Unit testing provides sort living documentation system Developers looking learn functionality provided unit use look unit test gain basic understanding unit interface Unit embody characteristic critical success unit These characteristic indicate use unit well negative behavior trapped unit A unit test case document critical characteristic although many software development environment rely solely upon code document product development When software developed using approach combination writing unit test specify interface plus refactoring activity performed test passing may take place formal design Each unit test seen design element specifying class method observable behaviour Testing catch every error program evaluate every execution path trivial program This superset The true unit testing Additionally unit testing definition test functionality unit Therefore catch integration error broader error function performed across multiple unit test area Unit testing done conjunction activity show presence absence particular error prove complete absence error To guarantee correct behavior every execution path every possible input ensure absence error technique required namely application proving software component unexpected behavior An elaborate hierarchy unit test equal integration testing Integration peripheral unit included integration test unit test Integration testing typically still relies heavily human testing difficult automate manual testing often appears faster cheaper Software testing combinatorial problem For example every Boolean decision statement requires least two test one outcome true one outcome false As result every line code written programmer often need line test code This obviously take time investment may worth effort There also many problem easily tested example involve multiple In addition code unit test likely least buggy code testing quote Never go sea two chronometer take one three Meaning two contradict know one correct Another challenge related writing unit test difficulty setting realistic useful test It necessary create relevant initial condition part application tested behaves like part complete system If initial condition set correctly test exercising code realistic context diminishes value accuracy unit test result To obtain intended benefit unit testing rigorous discipline needed throughout software development process It essential keep careful record test performed also change made source code unit software Use system essential If later version unit fails particular test previously passed software provide list source code change applied unit since time It also essential implement sustainable process ensuring test case failure reviewed regularly addressed immediately If process implemented ingrained team workflow application evolve sync unit test suite increasing false positive reducing effectiveness test suite Unit testing embedded system software present unique challenge Because software developed different platform one eventually run readily run test program actual deployment environment possible desktop program Unit test tend easiest method input parameter output It easy create unit test major function method interact something external application For example method work database might require mock database interaction created probably wo comprehensive real database interaction Here set test case specify number element implementation First must interface called Adder implementing class constructor called AdderImpl It go Adder interface method called add two integer parameter return another integer It also specifies behaviour method small range value number test method In case unit test written first act design document specifying form behaviour desired solution implementation detail left programmer Following simplest thing could possibly work practice easiest solution make test pas shown Using design specification one significant advantage design method The design document used verify implementation The test never pas unless developer implement solution according design Unit testing lack accessibility diagrammatic specification diagram may generated unit test using automated tool Most modern language free tool usually available extension Free tool like based framework outsource another system graphical rendering view human consumption Unit testing cornerstone relies automated This automated unit testing framework either third party created within development group Extreme programming us creation unit test The developer writes unit test expose either software requirement defect This test fail either requirement implemented yet intentionally expose defect existing code Then developer writes simplest code make test along test pas Most code system unit tested necessarily path code Extreme programming mandate test everything possibly break strategy traditional test every execution path method This lead developer develop fewer test classical method really problem restatement fact classical method rarely ever followed methodically enough execution path thoroughly tested Extreme programming simply recognizes testing rarely exhaustive often expensive economically viable provides guidance effectively focus limited resource Crucially test code considered first class project artifact maintained quality implementation code duplication removed Developers release unit testing code code repository conjunction code test Extreme programming thorough unit testing allows benefit mentioned simpler confident code development simplified code integration accurate documentation modular design These unit test also constantly run form Unit testing also critical concept As emergent design heavily dependent upon refactoring unit test integral component Unit testing framework often product distributed part compiler suite They help simplify process unit testing developed Examples testing framework include open source solution various testing framework known collectively solution Development Testing dotTEST Testwell It generally possible perform unit testing without support specific framework writing client code exercise unit test us mechanism signal failure Unit testing without framework valuable adoption unit testing scant unit test hardly better none whereas framework place adding unit test becomes relatively easy In framework many advanced unit test feature missing must Some programming language directly support unit testing Their grammar allows direct declaration unit test without importing library whether third party standard Additionally boolean condition unit test expressed syntax boolean expression used test code used statement Languages unit testing support include Some language without support good unit testing Those language include Software Unit Tests also called Software Module Tests called dynamic test This requires execution software unit The software executed target system emulator simulator suitable test environment Within range dynamic test state art distinguishes structural functional test The structural dynamic test performed knowledge module internals mind This mean branch path function module considered test designed function test object tested time checked branch software covered Functional unit test also called test They simply kind test consider system black box This mean testing done without special knowledge consideration internal structure software The data flow control flow internal timing internal interaction deliberately unconsidered Inputs stimulated supplied peripheral device simulation environment The output software checked expected value behaviour related supplied input The following feature common test Especially safety relevant software required prove certain code coverage performing unit test coverage required safety critical software This mean least condition coverage achieved test case Condition coverage make sure branch software executed even branch empty To achieve necessary instrument code measurement After run test evaluate coverage If condition coverage achieved sufficient test case test case added dynamic test desired coverage achieved It said test case cover possibility condition coverage achieved However said test case definitely sufficient reached Therefore coverage minimum requirement software unit test safety critical system To perform unit test need test bench There quite number professional system available either testing PC environment target hardware Generally say everything needing target hardware potential problem The target hardware might exact target system evaluation board used test However case much benefit integration target system never complete valid The better approach would keep hardware related part program dedicated HW abstraction layer This part tested special environment emulator All rest software standard C could also tested PC based environment We give example setting test Perl script environment How Perl based test environment look like The test environment contained Perl script It us Perl Inline package feature use C function Perl script To achieve script two part At top Perl part appended C part The general procedure execute main Perl script part Perl automatically set compile C part build DLL The Perl script use function DLL required This mean global variable within DLL accessed Perl besides fact data model C Perl quite different To access global variable necessary write called get function read use Perl This purpose evaluate result To set input value test C function called set function established The operation flow follows If test step used multiple time varying data recommendable use nested loop get combination possible input data For micro controller application proprietary division function written You could simply use c b would eventually lead exceeded runtime since normal division made use lengthy library function provided maker compiler A smart solution fast division function found make sure give result standard division computer The following test approach helped develop function rounding problem beginning finally gave prove new function performance standard division Standard Article Published Online JAN DOI Copyright John Wiley Sons All right reserved Book Title Additional Information Morell Marciniak J  Testing Encyclopedia Software Engineering  Hampton University American Software Professional A software unit low level component software system specification A unit may small commercial block code large set coupled routine In case unit referred A module sometimes used describe small subsystem composed several For purpose article term used interchangeably referring type testing employed lowest level system decomposition The technique described however greater applicability testing outside unit module Testing directed single module unit called It consists test planning test data development test monitoring execution evaluation result Test planning involves specifying adequacy criterion judge test assessing project constraint resource available selecting testing technique achieve adequacy criterion within given constraint scheduling testing process Developing test data includes specifying test data characteristic well selecting test data characteristic To execute module selected test data requires supplying test data monitoring execution capturing result sometimes needed simulate behavior unimplemented routine called within module The module may need additional code display internal behavior Evaluating result determines success execution well degree adequacy criterion satisfied After finishing test given module decision must made whether module sufficient quality included system The goal module testing therefore enable informed decision Relevant information includes result test execution test Coverage may specified term specification implementation set potential error Adequacy criterion typically specified term one three coverage Each coverage give rise class testing technique Different testing technique catch different type fault comprehensive testing program incorporate technique class mentioned Software Testing Complete Guide Posted In A component lowest unit application So Component testing name suggest technique testing lowest smallest unit application An application thought combination integration many small individual module Before test entire system whole imperial every component OR smallest unit application tested thoroughly In case module unit tested independently Each module receives input processing generates output The output validated expected feature The software application huge nature challenge test entire system whole It may lead many gap test coverage Hence moving Integration testing functional testing recommended start Component testing What You Will Learn Components tested soon created chance result retrieved component test dependent component turn developed So order test component use Stubs Drivers Before I jump brief Stubs Drivers I brief The reason Stubs driver also used Integration testing may lead confusion two testing technique Integration testing technique technique combine component sequentially test integrated system together Data one system traversed another system correctness data validated integrated system Unlike module testing single tested thoroughly integrating component So say Component testing performed Integration testing Both Integration Component us dummy program used call function lowest module case calling function exist referred code snippet accepts top module return response As explained earlier component tested individually independently So may feature component dependent component developed currently So order test component undeveloped feature use stimulating agent would process data return calling component This way making sure individual component tested thoroughly Up till must established Component testing Well may right But mean technique could used Black box testing technique Consider huge web application start Login page As tester agile world could wait till entire application developed made ready test In order increase time market must start testing early So see Login page developed must insist made available u test As soon Login page available test execute test case positive negative ensure Login page functionality working expected The defect would log stage would act lesson learned development team would implemented coding consecutive page Hence testing early ensured better quality page yet developed Because consecutive page yet developed may need stub validate login page functionality may want simple page stating logging successful case correct credential error message popup window case incorrect credential You go earlier tutorial insight Stubs Drivers I explained lowest unit application tested independently An joining layer component Testing platform interface component interact called Interface testing Now testing interface bit different These interface mostly testing interface would similar Black Box technique rather would kind API testing Web Service testing using tool Once Interface testing done come During Integration test combine individual tested component one one test incrementally We validate Integration individual component combined one one behave expected data altered flowing module another module Once component integrated tested test entire whole This test validates business requirement implemented software I would say Component testing done side side Unlike Unit testing done development team testing done Testing team It always recommended Component testing done kicking Integration testing If Component testing rock solid find fewer defect integration testing There would issue issue would related integration environment configuration challenge You ensure functionality component integrated working fine Appreciated written long article Component Testing But nowadays everyone moving Agile Methodology How much value component testing provide considering sprint duration factor Will practically possible tester component testing even struggling get time regression testing Good Article good explanation Thanks detailed information Component Testing Thanks good explanation In statement Example mentioned In order increase time market must start testing feel In order reduce time market must start testing Hope actually meant Thank providing knowledge testing important part software testing Quality Assurance software achieved strict quality checking parameter Software Testing Help Read Technology shaping functional test SiP advanced packaging technology putting component together tighter space previously seen Often package contained module something chip package great deal smaller printed circuit board Testing module often requires test These module typically inserted small form factor serve electronics system product Internet Things device smartphones wearable gadget Functional testing memory contained single memory module SIMMs dual memory module DIMMs going year There memory module well But testing memory chip memory module relatively uncomplicated compared testing heterogeneous integrated module combine multiple different chip An SiP implementation IoT may involve module contains sensor type processor application processor microcontroller chip wireless connectivity memory power management IC That heterogeneous integration challenge test The industry turning power semiconductor module including rectifier module Schottky module bipolar transistor module MOSFET module module module transceiver module photovoltaic solar module including flexible PV module among application Work heating display projection module containing diode well The whole concept behind ensuring maximum quality package smart pairing quality impacted key device based continuing quality factor device question said David Park vice president worldwide marketing The last thing want package megabuck part whole MCP test could fail part failed The challenge MCPs ensuring performance one part negatively impact performance overall device The way use big data Park noted one key concern effect multiple part module overall quality device You want screen part negative impact final yield What right kind test parametrics make type device together quality spec parametric performance spec Then overall end product going work great You bring type device still good device work well part board We spend lot time trying randomly Once identify signature important automatically help sort pair right device MCP We want get bottom testing component SiP MCP final SiP Vastly downstream information value whoever aggregating thing onto populated board system whatever may It taking advantage manufacturing test equipment company anyway already generating test Leveraging benefit It benefit entire supply chain That big Module testing different testing PCB The module testing trend kind fit idea chipsets conventionally known PCB test said Luke Schreier director automated test marketing Both viewed kind system type way interact On chip side focused around blasting vector checking response On board level much geared toward Does thing work assembled accomplish functional task While may individual test subassemblies piece even like test check specific component idea typically much test functional test This module concept sits somewhere get away typical way testing chip You want able capture defect may come interconnection different element want able capture defect may come firmware possibly running processor inside way feel putting native environment perform And begin look like board test It kind place two world right trying find way little bit ATE paradigm trying borrow Schreier said It start perspective element might still want able use conventional digital functional test using vector able ass immediately going approach On hand acknowledges limitation insight would get pure chip side On board side remaining goal capture end use product like customer would like customer experience using In way typically lot interaction firmware software environment individual function IC All piece work together customer experience going able meet expectation So start higher level stack involved able really understand whether device working expect Sometimes also might mean running longer period time That interaction test come module level maybe lineage crossed past But module either One thing may little bit similar chip RF type chip need actually perform final test system level said Joey Tun NI principal market development manager semiconductor test When put module together talking like would complete assembly We NI tend RF analog side thing So example experience module experience IoT module may Bluetooth integrated Those type module normally work This always intuitive though A lot test people shy away shifting module test test mechanic dealing typical handling interfacing environment single chip said Schreier They could complicated assembly Sometimes test system end looking quite elaborate mechanically take significant amount floor space accommodate robotics capability necessary test It start look like board testing That certainly true kind structure exist putting board tray able tested parallel start look quite bit different sometimes typical chip ATE environment Testing time take quite bit longer On level look like neither chip board testing immediately kind hybrid still trying achieve massive parallelism speed find chip ATE world Schreier noted NI good working relationship proponent implementing test today electronics We collaborating Tun said module testing mostly driven application involved IoT device smartwatches SiP module technology almost Tun noted Module testing done device protocol level You need protocol specific module It like digital It sometimes USB Module testing depend variation Market opportunity rise Tun concluded IoT module RF space These primary market Module testing could coming soon test floor near Hi Jeff Don forget IEEE standardizing technique SIP testing New tool required point competition Racing drive sensor cost automotive market Industrial IoT dominates market confusion still rampant sector What come optical inspection clear problem More precision new material much smaller universe company help make market attractive Technical issue increase cost go market benefit Chipmakers wrestle EOS ESD issue chip incorporated industrial automotive application New tool required point competition embedded memory technology ramp wake flash scaling issue Chipmakers exploring nanosheet nanoslab hexagonal FETs Funding field hurdle persist Demand equipment soar business model support rising price Focus cutting cost across board turn still quite bit cut Email Interests Design Low Performance Manufacturing Process Tech Packaging Test Electronic IoT Security Automotive 
monitor and control risks	The Risk Monitoring Control process applied If risk event occurs project execution likelihood identified sometime earlier analyzed appropriate response action planned deal captured Risk Register For part Risk Monitoring Control process putting action risk planning done earlier project It important understand risk monitoring intended daily process across entire project lifecycle Project team member stakeholder encouraged vigilant looking risk symptom well new project risk Newly identified risk symptom previously identified risk communicated immediately evaluation action process tracking identified risk monitoring residual risk identifying new risk executing risk response plan evaluating effectiveness throughout project life cycle comp  The planned risk response integrated project management plan proces therefore executed risk trigger fire But result risk response must evaluated In addition process Risk Monitoring And Control evaluate whether comp pp  The subject operates base comp pp comp Karsten Reincke Layout based Template Project risk control risk monitoring keep track risk response performing plan well place new risk project managed You must remember risk negative positive impact Positive risk risk taken project potential benefit outweigh traditional approach negative risk one could negatively influence cost project schedule The purpose project risk control Identify event direct effect project deliverable Assign qualitative quantitative probability consequence event might affect project deliverable Produce alternate path execution event control mitigated Implement continuous process identifying qualifying quantifying responding new risk The main goal risk monitoring control To confirm risk response implemented planned To determine risk response effective new response needed To determine validity project assumption To determine risk exposure changed evolved declined due trend project progression To confirm policy procedure happen planned To monitor project new risk To monitor risk trigger Risk trigger event cause threat risk become reality For example identified fact one pump set available replacement take six week arrive In middle irrigation recycling process test discover water pressure tends fluctuate beyond pump tolerance level If find way solve problem risk become reality Make sure identified risk must provide response plan It much help risk becomes reality issue alternate execution path emergency procurement plan Main input effectively monitor control risk Risk management plan Risk Register Risk Tracker Risk response plan Project communication New risk identification Scope change Outputs Risk Monitoring Risk Control Workaround plan Corrective Preventive action Change request Risk response plan update Risk database Checklist update Enter email address Delivered By The book cover Risk Management describing tool method reduce occurrence consequence risk financial management construction project raising funding contract strategy estimating budgeting cost control It includes chapter covering international project risk bringing together issue risk management prime contracting PFI funding construction project undertaken away contractor main home market ISBN copy Gower Having undertaken risk analysis evaluation described previous chapter lead project risk manager look risk mitigation taking appropriate action achieve project objective revision project schedule budget scope quality Risk management therefore regarded integral part project management additional extra These final phase risk management involve establishing specific action plan manage risk importantly identification plan drive inform support risk response planning Effective risk management demand active process regular risk review commitment anticipate influence event happen taking proactive approach provide knowledge information predicted event inform possible improve quality decision making avoid covert assumption false definition risk make project management process clear transparent assist delivery project objective term benchmarked quality time cost threshold allow development scenario planning event identification risk provide improved contingency planning provide verifiable record risk planning risk control To achieve risk management effective efficient requires risk response planning The commonest form risk response planning Risk action plan input include risk management plan list prioritized risk risk ranking project prioritized list quantified risk probability analysis project list potential response risk identification process help suggest response individual risk category risk level risk project stakeholder able As risk owner involved developing risk response trend qualitative quantitative risk analysis result Trends result make risk response analysis le urgent important There number tool technique employed risk response planning phase discussed option available action risk based one risk response action namely Terminate Treat Tolerate Transfer risk see Where possible reduce risk probability mitigation response treat might address risk impact targeting linkage determine severity The output risk response planning include following Identification residual risk Residual risk remain action taken These may also include minor risk accepted addressed example adding contingency amount cost project time allowed Identification secondary risk Risks arise direct result implementing risk response termed secondary risk Having identified suitable response need planned managed Detail contractual agreement Contractual agreement may entered specify party responsibility specific risk occur These also include insurance item appropriate avoid mitigate threat Identify contingency Contingency reserve amount may needed need allocated The probabilistic analysis project risk threshold help project manager determine amount contingency needed reduce risk overrun project objective level acceptable organization Detail input process Most response risk involve expenditure additional time cost resource require level assurance spending justified level risk reduction Alternative strategy must fed back appropriate process knowledgeable area Detail input revised project plan The result response planning process must incorporated project plan ensure agreed action implemented monitored part overall project Several risk response strategy often available consideration project team strategy likely effective selected risk Specific action developed implement strategy However advisable primary secondary strategy selected Figure developed John Wiley Sons Reproduced permission Action plan needed significant risk identified particular high criticality impact matrix The action plan must cost effective likely use technique three point estimate covered end The content typical action plan cover description planned activity ownership start date identified risk trigger condition cost resource requirement secondary risk comment action status employing widely used BRAG coding blue mean completed action green mean plan amber indicates may achieved red unlikely achieved For whatever reason mitigation action proving successful risk become problem Fallback Plan need initiated Although consider unnecessary luxury great benefit fallback plan already developed time quickly put service The content fallback plan similar mitigation action plan namely description plan recovery clear ownership start condition cost resource requirement secondary risk consequence fallback plan action comment action status using BRAG coding implemented It recognized occasion effective fallback recovery plan Residual risk may also present rarely seek remove risk entirely therefore even action plan initiated small level risk likely remain It common action plan fallback plan introduce risk secondary risk also need documented accounted assessing response Despite risk identification planning action industrial activity entirely free risk many organization regulator around world require safety risk reduced level As Low As Reasonably Practicable ALARP The ALARP region lie unacceptably high negligible risk level Even level risk judged ALARP region still necessary consider introducing risk reduction measure address remaining residual risk The ALARP level reached time effort cost risk reduction measure become unreasonably disproportionate additional risk reduction obtained Project risk reduced employing strategy already discussed increasing number effectiveness control The concept stage new project offer greatest opportunity achieve lowest residual risk considering alternative option This standard approach offshore oilfield development concept selected design progress attention move considering alternative layout system option maintain risk reduction optimize safety In industry example attention safety management culture collecting feedback improving procedure managing change maintain residual risk ALARP level However advance technology accepted ALARP design stage may regarded plant becomes operational warranting necessary periodic risk review Working ALARP principle mean risk reduced level low reasonably practicable considered achieved legislation established standard good design practice complied resource term cost time difficulty risk required implementation additional measure may reduce risk disproportionately large compared potential benefit gained This naturally suggest resource would better applied reduce risk another area business For industry ALARP major feature risk management process first stage demonstrate risk within established acceptance criterion risk tolerability inside intolerable zone shown These criterion may legislative industry company standard risk demonstrated tolerable reference relevant industry best practice professional necessary suitable quantitative assessment Once determined risk tolerable region next stage ALARP demonstration determine additional practicable risk reduction measure reasonable implement All risk reduction measure assessed determine whether technically viable offer significant benefit In many situation assessment based simply professional judgement experience recognized best practice In situation effort required implement risk reducing measure term cost time difficulty resource required need formally evaluated risk benefit likely achieved Where effort shown grossly disproportionate benefit measure rejected Where effort disproportionate measure implemented immediately convenient point time especially risk impact health safety During design development demonstration ALARP inherent throughout process relies assessment conclusion reached project team By asking question Are proposed control arrangement good enough Can anything better team us experience expertise verify residual risk associated design managed ALARP level Moving operation stage ALARP achieved reviewing existing control measure questioning anymore done In case improvement may involve redesign modification also change procedure process even established way working illustrates relationship risk resource required reduce occurrence ALARP position segregate cost mitigation residual hazard ALARP may assessed several way varying documenting purely subjective evaluation based engineering judgement taking fully quantitative approach risk reduction expressed measurable parameter formally evaluated cost During project risk monitoring control process keeping track identified risk monitoring residual risk identifying new risk This process also ensure execution risk plan continually evaluate plan effectiveness reducing risk Resource allocation also monitored appropriate allocated agreed action Immediate risk action built project activity integral part overall project management plan Other action dependent upon risk materializing triggered occurrence risk metric milestone event Risk monitoring control also record risk metric associated implementing contingency plan need course ongoing process duration project Naturally risk change project matures new risk may develop anticipated risk disappear The element process risk monitoring control shown Attention risk monitoring control process provide information assist making effective decision advance risk occurring Communication project stakeholder needed periodically ass acceptability level risk project The purpose risk monitoring determine risk response implemented planned risk response action effective expected new response developed project assumption still valid risk exposure changed prior state additional analysis trend risk trigger occurred correct policy procedure followed previously identified risk occurred Risk control may involve choosing alternative strategy implementing contingency plan taking corrective action even project It important risk response owner report periodically project manager risk team leader effectiveness plan unanticipated unwanted effect programme correction needed mitigate risk occurrence Some activity risk monitoring control use trigger indicate risk occurring defined risk response planning stage This one output action plan trigger event consequence cause activation corrective action fallback plan updating risk plan use risk identification checklist The concept monitoring feedback risk information standard system approach shown The final stage risk control monitor risk metric milestone required contingent action implemented monitor effectiveness risk management action ensure predicted effect feedback lesson action effective There number project control tool effective indicator managing project risk In looking closed loop feedback system noted applicable range project control area When choosing object control loop application project manager must consider value control provided judge cost obtaining The factor need considered degree detail needed provide desired status performance information frequency feedback needed project status performance accuracy feedback measurement required provide desired status performance information timeliness feedback including soon data required support decision making project level management attention required obtain information type record must maintained format information must provided cost producing using data Generally greater frequency level detail accuracy timeliness serve increase cost process From John Wiley Sons Reproduced permission As new risk identified throughout project possible increased project exposure exceed available contingency However risk retired occur become business issue addressed fallback plan risk window date passed without risk occurring due either good management change circumstance simply passage time On basis retired risk contingency set aside released point made available contingency new risk may immerge On basis risk management plan maximum benefit project must monitored typically involve coordinating risk activity alongside project work monitoring resource usage limit resolving conflict monitoring risk ensure remain within agreed project limit monitoring risk ensure become large manage effectively monitoring risk ensure threaten viability project objective risk project outlined risk strategy implementing agreed problem resolution process risk issue fall outside authority project team For example environmental risk may impact one project stakeholder implementing agreed problem resolution process risk issue effectively managed risk owner consequence stakeholder may adversely affected Such escalation demonstrates good project management viewed admission failure Having looked risk monitoring control project said project closure also integral part construction process lifecycle although practice importance often underestimated even ignored Formal closing construction project warrant completion organized controlled manner This phase usually includes following four activity obtaining acceptance project result client balancing project budget closing final account invoice payment warranty detail conducting project closure meeting Importantly project closure also present opportunity learn project experience benefit individual company involved respect future similar project As fifth activity suggested documenting experience gathered As part review process questionnaire distributed among project participant instance member design supervision team client representative supplier project participant aimed gaining number individual assessment specific aspect design planning implementation project The information obtained using questionnaire compiled summarized final project report distributed among member project team discussed project closure meeting A report study facilitate discussion project experience gone right went contrary plan improved This may also known Learning Experience LfE documented stored accessible repository organization project knowledge It may serve basis assessment process implementation improvement modified cost risk allocation contingency potential project Project closure used may follow company industry process The set good practice example document issued PMI Project Management Institute Association Project Management The PRINCE Project Management methodology Both process discussed Project closure accordance APMs consists two main process Closing project This process necessary finalize activity group project management process It allows project project stage formally closed includes opportunity completion acceptance work gathering project documentation Subject assessment also problem failure project stage opportunity review area success project produce conclusion applicable work Contract closure This process necessary finalize contractual requirement covering provision good professional service pertaining whole project particular contraction phase activity This procedure associated actual checking project result well financial settlement project stage Project closure accordance PRINCE methodology call assessment project effectiveness profitability us business case term Specification business case answer project assist development company question expected result worth dedicated time money invested profit generated The document describing original business objective serve basis comparison actual situation thus aid final financial settlement project The methodology establishes among thing following three key criterion necessary closing project Has project constructed required product specified project plan WBS delivered installed shown functional Are project resource support finished function longer needed Are contractual consequence closure project Answers three question contained project completion report prepared project manager aimed summarizing project performance comparison document prepared earlier particular document include project plan risk plan discussed together cost plan project programme Whilst suggestion main refer risk management project end opportunity also exists review lesson knowledge experiential learning effectiveness project wider action For example preventative action may put place reduce likelihood risk high medium project closure review present ideal opportunity question effective risk materialize action ineffective reason retrospect might different action effective Such lesson used improve ongoing risk planning organization future project share good practice current project example project archive project evaluation review post implementation review monitor risk metric milestone Project closure therefore involve checking whether risk metric milestone reached whether contingent management action required ensuring indicator continue give clear picture status project risk closed The role responsibility process presented Practical Practical Practical Opinion Practical Practical From Project Management Construction From ProjectThink From Leadership From Managing Risk Projects From Designs Methods Practices Research Project Management From A Short Guide To Operational Risk There group content type Site Companies failing appropriately prioritise resource compliance Managing Risk Maximising Opportunity Control Risks independent global risk consultancy specialising helping organisation manage political integrity security risk complex hostile environment We support client providing strategic consultancy expert analysis investigation handling sensitive political issue providing practical protection support Our unique combination service geographical reach trust client place u ensure help effectively solve problem realise new opportunity across world Political Violence Crime Incident Report Cyber Threat Landscape Report Webcast A conversation Hui Chen Control Risks Group Holdings Ltd registration  While project management team project management team leader careful complete characterization risk often find position realize particular project particular facet project fact come set series inherent risk After likely potential risk properly organized categorized project management team project manager effectively determine best way deal risk The entire process identifying risk establishing method dealing referred This process refers process detailing tracking identified risk well also identification new risk may arise This also includes business response plan well making thorough evaluation effectiveness This term defined edition No comment yet add voice Required field marked Managing Risk Maximising Opportunity Control Risks help client monitor political security environment protect investment counter unforeseen risk seize opportunity Depending exact requirement variety solution offer client need continuously monitor development global regional basis Our client include world top corporation government draw one industry largest team political security expert Our analysis informed enhanced international office network source well presence operating experience complex uncertain dynamic business environment across globe For information service please The Belt Road Initiative BRI unprecedented opportunity develop regional economic integration maritime connectivity also present risk Control Risks explores three fundamental question Rakhine Crisis Test detonating nuclear weapon test firing ballistic missile nothing new come North Korea What new frequency United States increasingly aggressive rhetoric response Control Risks Group Holdings Ltd registration  begin learning software business creative video instruction recognized industry expert Learn step take manage risk project underway Voiceover When developed Risk Management Plan identified risk response would use handle project underway need keep eye risk becoming jump appropriate Risk Management Plan risk decided track owner person job keep assigned risk regularly update risk Let take look owning risk mean implement proactive risk mean take step avoid mitigate plan contingency risk positive take step good thing could watch sign high priority watch event trigger contingency If risk occurs response chose track result regularly report risk Are sure want mark video course unwatched This affect course history report certificate completion course Type entry box click Enter save note Press video thumbnail jump immediately timecode shown Notes saved account also exported plain text MS Word PDF Google Doc Evernote You started assessment previously complete You pick left start begin learning software business creative video instruction recognized industry expert Thank taking time let u know think site We unable submit feedback Questions comment suggestion Let u know think To contact u privately please use PMPerfect Risk monitoring control process identifying analyzing planning newly discovered risk managing identified risk Throughout process risk owner track identified risk reveal new risk implement risk response plan gage risk response plan effectiveness The key point throughout phase constant monitoring due diligence key success The input Risk Monitoring Control This good article We always ignore importance risk monitoring plan focus risk management plan Actually continuous process overview risk managment according PMI The latest Project Management Healthcare IT practice Welcome Healthcare IT Project Management Blog Elyse Nielsen This place I share idea I learned thing I like remember thought brighter future Find 
point design	CLICK HERE FOR A SNEAK PEEK INTO THE WORLD OF POINT provides data type tool developing algorithm optimize performance embedded hardware Designer analyzes design proposes data type attribute word length scaling You specify detailed data attribute rounding mode overflow action mix data You perform simulation observe impact limited range precision without implementing design hardware Designer let convert algorithm single precision fixed point You create optimize data type meet numerical accuracy requirement target hardware constraint You determine range requirement design via mathematical analysis instrumented simulation Designer provides apps tool guide data conversion process enable compare result baseline Designer support C HDL PLC code generation Specify property MATLAB code Simulink model Stateflow chart Configure design data type Analyze design identify data type optimize hardware performance Convert design double single precision representation Simulate analyze design Visualize debug effect quantization Discover Designer exploring resource Explore documentation Designer function feature including release note example Browse list available Designer function View system requirement latest release Designer View article demonstrate technical advantage using Designer Read Designer accelerating research development industry Find answer question explore troubleshooting resource Designer apps enable quickly access common task interactive interface There many way start using Designer Test drive Designer Purchase Designer explore related product Contact Ram Cherukuri Designer Technical Expert Designer requires Use Designer solve scientific engineering challenge Choose country get translated content available see local event offer Based location recommend select You also select location following list MathWorks leading developer mathematical computing software engineer scientist The MathWorks Inc HOME PORTFOLIO STYLES ENTERTAINMENT FAQ CONTACT PROMOTIONAL OUR MISSION BRANDING CREATIVE PRINT DESIGN WEB DESIGN MEET THE TEAM DIRECTOR Gary Jones Started general manager became managing director sole owner He qualified lithographic printer graduating Perth College honour included representing WA leading apprentice year learnt aspect trade estimating production sale Gary creative mind eye design work closely team every project Gary would say year experience always building relationship serving mentality great attitude make every opportunity positive experience Gary happily married child aged enjoys family time Kung Fu photography water sport general outdoor activity DESIGNER Elise Bosveld Joined team late moving Tasmania With year experience including Graphic apprenticeship Elise strong passion design recently participated National World Skills Competition judge Graphic Arts She proficient Photoshop Illustrator InDesign Design Elise enjoys Graphic Interior Design sport social outdoor activity bossing men around office mind odd glass wine occasion ACCOUNTS MANAGER Laura McLaughlin Laura qualified Bookkeeper Registered BAS Agent She began bookkeeping career experience range different industry including hospitality retail manufacturing construction She experienced major accounting software package including MYOB Reckon Intuit Xero Laura also Certified Quickbooks Online MYOB Professional Partner Laura enjoys running kid around everywhere odd occasion get min recall used enjoy horse riding OUR PARTNERS Cultivate Agency Our partnership Cultivate Agency enables u offer client full range service including TV production medium planning booking social medium copywriting marketing consultancy digital marketing software application development mobile application development amongst others To see experience visit Firey Production Firey Production take care client video TV filming whether website induction training everything shot highest quality also used TV commercial future To see experience visit DIRECTOR Cultivate Agency Joe Bovell With year senior managerial experience including General Management National Sales Marketing role Joe successful marketing consultancy business range national client He Associate Member Australian Institute Marketing Associate Member Horticultural Media Association Vic He also attained Masters Business Administration MBA Curtin University Technology case study published Organisational Behaviour university text book Specialties All facet marketing including brand management product development brand strategy Highly proficient across diverse range key competency successful business management DIRECTOR Firey Productions James Haywood James Haywood working television industry year James senior journalist worked Chief Staff Channel Perth busy newsroom James many year experience expert camera operator covered nation biggest story James also sought consultant whose leadership helped establish broadcast solution range company organisation government body His script writing technical skill bring Firey Productions leading edge high quality television production HAPPY CLIENTS FIND US point design solution Brought Bridge Contest longer operational We hope code base use others similar project mind A national virtual bridge engineering contest prize middle high school kid grade anyone enter fun Based Bridge Designer client software open source project Web site infrastructure support worldwide participation qualifying semifinal round tiny administrative staff The new Rails back end RubyMine project Thanks JetBrains mega development environment Business VoIP Phone System ad choose Copy Link paste This may possible type ad Briefly describe problem required Please provide ad click URL possible US Phone International Phone As security infrastructure becomes complicated Professional Services expert help every step way We accumulated hundred year Check Point experience help security design deployment operation optimization need Your security infrastructure need frequent updating adapt changing threat Whether need design new topology plan new project professional service expert right experience start project right Armed information deliver effective security predictable cost time scale Getting value security investment mean getting running quickly We offer service accelerate deployment new installs another make lifecycle upgrade seamless Whether choose expert Check Point account manager invest custom training program expertise deliver deep knowledge expert guidance tune security infrastructure You benefit performance reporting configuration review architecture validation many security operation best practice Periodic optimization security infrastructure help detect prevent threat lower total cost ownership previous security investment Our SmartOptimize service boost security performance minimizing exposure emerging risk Or choose health check receive detailed performance assessment recommendation address coverage gap Shelter Island NY Stony Point founded principle finest construction quality project execution exclusive reserve buyer Stony Point DB applies best element custom home building process neighborhood scale Through strong root local home building talent Stony Point DB provides superior product competitive price wide range buyer Every Stony Point home designed licensed architect Our floor plan extremely functional every detail considered Exquisite form scale siting provide home endless curb appeal Our great looking home built living Universal design concept eliminate barrier mobility throughout stage life ensuring safer happier place dwell Every Stony Point home certified building performance A new kind neighborhood new kind lifestyle Right around corner one best city country A place bike walk Where home mean shade tree green walkway inviting porch architect designed abode made true material Earthcraft certified sustainability The River House Condos located mile Downtown Mall designed active lifestyle much The River House Riverside Village offer modern condominium immediate access Rivanna River direct connection Darden Towe Park If eager live Charlottesville want new construction find Lochlyn Hill one best community town lifestyle unique home style location make neighborhood consider new home search Not nestled expansive Pen Park stone throw Rivana Trail wind around entire city Charlottesville The West Point Bridge Design Contest nationwide competition intended promote math science technology education middle school high school The contest provides student realistic introduction engineering engaging design experience The West Point Bridge Designer introduce engineering authentic design experience Official software used enter West Point Bridge Design Contest This software provides tool model test optimize steel highway bridge based realistic specification constraint performance criterion Your objective create optimal bridge design An optimal design one satisfies design specification pass simulated load test cost little possible When use West Point Bridge Designer experience engineering design process simplified form You design highway bridge much way practicing civil engineer design real highway bridge The West Point Bridge Designer give complete flexibility create design using shape configuration want Creating design fast easy experiment many different alternative configuration work toward best possible solution The process use quite similar process used practicing civil engineer design real structure Indeed West Point Bridge Designer quite similar design CAD software used practicing engineer help way CAD software help taking care mathematical calculation concentrate creative part design process WPBD available two format This version software used Engineering Encounters Bridge Design Contest Disclaimer This software formerly known West Point Bridge Designer It maintained distributed Engineering private organization affiliated government Military Academy West Point West Point Bridge Designer download link provides freeware version software West Point Bridge Designer Windows West Point Bridge Designer Mac West Point Bridge Designer Windows West Point Bridge Designer Windows West Point Bridge Designer Windows West Point Bridge Designer Windows West Point Bridge Designer Windows GSA Bridge bridge analysis software automatically sifts multiplicity possible moving load find exactly crucial one structure The analysis program nonlinear finite element analysis program capable analyzing multiple bridge pier structure interconnected bridge span BridgeLink integrated bridge engineering software tool analysis design load rating CSiBridge design allows quick easy design retrofitting steel concrete bridge STLBRIDGE continuous steel bridge analysis design software package use design steel bridge conforming AASHTO Standard Specifications Highway Bridges AASHTO Load Resistance Factor Design Specifications This spreadsheet performs preliminary analysis precast prestressed bridge girder prestress transfer service stage My grader used science fair interesting project later went college engineering became civil chemical engineer Thanks hosting install file I used software summer program almost decade USMA Westpoint moved nonProfit website year back month website went dark due lack funding bridgecontest org download run system let see happend West point bridge designer It interesting try nice In school student usually try building bridge popsicle stick making blueprint Your bridge building software sophisticated yet easy use Stuff like really teach bridge also fun A quick tip The lower bridge stable usually You also add piller middle use lot triangle dimonds Most stable shape Submit review using Facebook ID rated point A total vote cast user reviewed software From object based graphical modeling environment wide variety analysis design option completely integrated across one powerful user interface proven integrated productive practical general purpose structural program market today Software suite designed analysis timber truss structure connected punched metal plate fastener GaLa Reinforcement free program developed part Ilia Alashki Ph thesis ETABS solution whether designing simple frame performing dynamic analysis complex utilizes damper drift control This software program useful rebar detailers working construction civil engineering project GSA Building ultimate building design software steel structure design software steel structure analysis program GSA Bridge bridge analysis software automatically sifts multiplicity possible moving load find exactly crucial one structure AStrutTie model software concrete member disturbed stress region All software resource directory property respective author All downloadable viewable content available provided You agree bear sole responsibility decision download use software listed DISRUPTIVE INNOVATION VALUE DRIVEN PERSPECTIVE TRANSPARENT COLLABORATION SUBJECT MATTER EXPERTS TRANSCEND DEADLINES Flexible option one roof Our diverse team designer engineer help deliver quality product timely manner Select right capability based unique need get job done Our unique blend critical thinking along systematic approach empowers tackle challenging obstacle road success Secure place market u trusted guide From napkin sketch first article single point contact We seamlessly integrate existing supply chain leverage connection diverse market advance product past finish line Streamline time market As design engineering firm established strong relationship various market qualified professional Whether need connect right candidate Ramp meet project deadline hour expertise Increased ROI mean satisfied customer Point Innovation allowed u expand customer support without adding overhead cost They allow u flexibility efficient internal operation Point Innovation expertise match internal resource Bob Larabee Lakeway Lewisville TX Interested project help Interested career 
preventive maintenance	Preventative maintenance maintenance regularly performed piece equipment lessen likelihood failing Preventative maintenance performed equipment still working break unexpectedly Preventative maintenance planned required resource available The maintenance scheduled based time usage A typical example asset time based preventative maintenance schedule serviced every year summer A typical example asset usage based preventative maintenance schedule might scheduled service every Preventative maintenance complex coordinate maintenance maintenance schedule must planned Preventative maintenance le complex coordinate monitoring strategy planned result interpreted Assets suitable preventative maintenance include Unsuitable application preventative maintenance include Planning biggest advantage preventative maintenance le complex strategy Unplanned reactive maintenance many overhead cost avoided planning process The cost unplanned maintenance includes lost production higher cost part shipping well time lost responding emergency diagnosing fault equipment working Unplanned maintenance typically cost three nine time planned maintenance When maintenance planned cost reduced Equipment shut coincide production downtime Prior shutdown required part supply personnel gathered minimize time taken repair These measure decrease total cost maintenance Safety also improved equipment break le often le complex strategy Preventative maintenance require monitoring This eliminates need cost conduct interpret condition monitoring data act result interpretation It also eliminates need use condition monitoring equipment Unlike reactive maintenance preventative maintenance requires maintenance planning This requires investment time resource required le complex maintenance strategy Maintenance may occur often preventative maintenance strategy Unless maintenance frequency optimized minimum maintenance much little preventative maintenance occur The frequency preventative maintenance likely high This frequency lowered without sacrificing reliability analysis used The decrease maintenance frequency offset additional cost associated conducting condition monitoring Maintenance tip use For free Sign insider update news tip following meaning The primary goal maintenance avoid mitigate consequence failure equipment This may preventing failure actually occurs Planned Maintenance Condition Based Maintenance help achieve It designed preserve restore equipment reliability replacing worn component actually fail Maintenance activity include partial complete overhaul specified period oil change lubrication minor adjustment In addition worker record equipment deterioration know replace repair worn part cause system failure The ideal machine maintenance program would prevent unnecessary costly repair Machine maintenance various equipment facility quite nuanced For instance maintaining certain equipment may include preventive maintenance checklist includes small check significantly extend service life Furthermore consideration weather equipment taken account instance case HVAC system maintenance often performed hottest time year Preventive preventative maintenance software one core component computerized maintenance management system CMMS It help business maximize resource minimize operational downtime extend asset life span reduce cost maintaining asset Here cover Preventive maintenance program application help organization manage preventive care opposed corrective predictive care asset These asset include instance manufacturing equipment medical equipment HVAC equipment furniture The primary objective maintenance schedule software prolong life asset preventative upkeep schedule This maximizes asset value limit unnecessary replacement cost It achieves scheduling regular equipment upkeep reducing downtime combining routine task possible subsequently reducing expenditure loss resulting delayed halted production A preventive maintenance system schedule standard asset upkeep task necessary interval equipment oil change vehicle every mile It support ongoing asset care based hour use frequency use variable It also creates schedule regular upkeep alert staff upcoming task generates work order schedule necessary vendor routine care arranges tool resource necessary complete task Preventive task often determined manufacturer recommendation requirement based code legislation expert suggestion standard care similar asset based frequency use performance metric Our preventive maintenance software review help make best purchasing decision There important distinction made maintenance maintenance similar distinct category CMMS software wherein meter sensor predict machine may breakdown Repairs thus performed machine show early sign potential failure opposed method using past repair data set schedule future repair Common feature found planned maintenance software include Before purchasing new preventive maintenance system organization consider following Many company required meet regulation enforced government agency OSHA Preventive software make easier ensure complying national international regulation apply company industry file appropriate report This reduces risk penalty result Preventive maintenance software program deployed Web also known SaaS installed premise Both option benefit drawback important consider one best suited situation For instance cloud software lower initial cost reduces need dedicated IT team vendor provides support However facility based remote location poor Internet bandwidth may best option Additionally need complex customizations SaaS may best fit Meanwhile system generally cost may require IT maintenance upgrade Most preventive maintenance system offer mobile capability mean technician field complete task access information go For example technician maintenance manager These mobile capability expedite maintenance resolution boost staff efficiency cut cost improve communication personnel management Preventive maintenance become valuable necessary effort manager In economic downturn many organization chose defer preventive task ended quite costly equipment asset face untimely replacement Subsequently many facility making investment maintenance planning software store repair history also offer crucial alert notifying manager upcoming task due asset piece equipment Historically institution deferred maintenance lack fund need realign budget However led costly repercussion premature replacement While organization recover many taken initiative upgrade preventative effort avoid expensive major repair Some state organization like California Department General Services even offering preventative update upgrade like plumbing roofing educational process interrupted temporary closure facing many challenge way facility manager maintained asset included everything guest room coffee maker washing machine casino light There system place track work order review past maintenance record even look machinery serial number To fix issue Silver Reef Casino decided invest Bigfoot CMMS The software allowed maintenance staff receive alert whenever asset needed regular maintenance track repair easily access information piece machinery Bigfoot CMMS also helped Silver Reef Casino save money unnecessary replacement cost Instead waiting machine like dryer shut replacement could cost software sent reminder regular repair like installing new dryer belt old one completely broke Maintenance Management Software Pricing Guide Our service simple free customer like software vendor pay u connect quality lead You save time get great advice Vendors get great referral It win everyone Birchwood Court Suite A Johnston Iowa Support Administration Fax Sound Move cursor video Adjust volume clicking audio bar PM defined maintaining plant equipment asset regularly scheduled basis order mitigate future breakdown equipment failure would otherwise result unnecessary production interruption unexpected repair cost In experienced maintenance manager relied upon year professional experience direct knowledge machinery use well reminder yellow notepad list decide would implemented In modern era know reliance certain machine needed attention That today professional maintenance manager rely upon You download create first Work Order generate first PM le minute preventive maintenance software created maintenance manager mind No one want spend hour discovering new piece software work Today customer expect new software application function intuitively possible shortest possible learning curve created preventative maintenance software Why contact today Just call feel maintenance manager invest hundred thousand dollar PM software order obtain functionality Preventive Maintenance Software offer suite outstanding feature optional module No competing PM software package offer sheer number feature option contained preventive maintenance package price par terrific value Why contact today Just call We designed pricing affordable starting remain advantageous grow advanced version module Our pricing competitor preventative maintenance CMMS industry Remember never pay PM Software want need That price version start Or host application No quality PM Software affordable Why contact today Just call proud customer loyalty inspired treat customer like family creating premier computerized maintenance management system facility industry since And kept forefront quality PM Software It type service sale support one customer come know expect When contact reach one office Midwest United States Why contact today Just call Preventive Maintenance customer know company stand ready make PM software reflect unique need expectation see need customize CMMS application Customization optional opportunity business government entity interested certain modification preventative maintenance functionality always stand ready meet unique need expectation Why contact today Just call packed feature option earned title many enthusiastic user fan created expert technical staff long root preventive maintenance field Well advent Internet preventive maintenance CMMS reality MAPCON partner client We lot time experience determining need maintenance management personnel succeeded developing wide array preventive maintenance CMMS feature meet every maintenance contingency MAPCON preventive maintenance software dramatically lower operating cost promotes operational efficiency increase profitability Downtime unexpected breakdown dramatically reduced expensive vendor fix eliminated effective preventive maintenance Longer equipment lifecycles lower part inventory Overall plant efficiency increase labor equipment productivity significantly raising profitability Better work planning scheduling maximizes crew efficiency focusing crew time work order designed keep plant moving Productivity increase using modern preventative maintenance CMMS Software standard Maintenance manager know saving minute per day worker crew labor rate preserve annually organization When implemented properly Computerized Maintenance Management System using MAPCON Preventive Maintenance Software huge cost time saving addition organization bottom line MAPCON provided application detail sought feature Preventive Maintenance Software package contains The provides excellent overview MAPCON series preventative maintenance CMMS The detailed comparison chart delineates detailed list feature comparing Preventive Maintenance Software option MAPCON happily provide asking Your evaluation include fully functional Remember MAPCON PM sofware available either hosted securely server Our version billed monthly Our product owned customer low price also offer allows staff access maintenance management software directly smartphones tablet loaded many advanced feature list page Our handle facility smaller staff affordable price Download today Or call u One important benefit assumption organization want maintenance management software without unnecessary bell whistle added merely drive price point Yet recognizes every organization different priority process That offer compelling array extension module even optional customizations enhance maintenance management capability Within Lite Pro version already bring substantial CMMS performance power many organization need For others however advanced capacity certain context critical maintain existing efficiency practice While extension module differ Lite Pro version please take look offer For printable list ALL feature provided Copyright Why contact MAPCON today Just call Call Preventive sometimes called preventative maintenance regularly performed maintenance piece equipment reduce likelihood failure Preventive maintenance ensures anything value organization receives consistent maintenance avoid unexpected breakdown costly disruption In way would wait car engine fails get oil changed machine equipment building anything value organization need consistent maintenance avoid breakdown costly disruption This work called Planned Preventive Maintenance performed equipment operating normally avoid consequence unexpected breakdown increased cost downtime PM strategy company implement move away reactive maintenance mode begin reliability journey As best program include combination maintenance approach implementing preventive maintenance important step ideal strategy predictive maintenance Though many moving away reliance reactive maintenance mode majority organization still use method today Reactive maintenance involves repairing equipment broken bring back normal operation On surface may seem le expensive operate reactively planned maintenance much le costly study observing reactive maintenance cost time Preventive PM There variety cost associated unplanned outage lost production overtime idle equipment expedited shipment hidden cost Some hidden cost reactive maintenance include When Preventive Maintenance scheduled cost avoided part maintenance resource scheduled accounted streamline process While preventive maintenance determines schedule based manufacturer recommendation average life cycle asset predictive maintenance PdM PdM identified based tracking equipment condition scheduling maintenance reading Additionally PM task performed planned machine shut down PdM activity carried normal operation Predictive maintenance also utilizes various advanced technique infrared thermal imaging vibration analysis oil analysis used predict failure The effective maintenance program leverage reactive preventive predictive method This requires analyzing task identify method best based disruption due equipment downtime Interval cost part labor time equipment history Preventive Maintenance straightforward program establish set motion Maintenance set schedule based calendar date usage often recommendation manufacturer During specified date time equipment shut maintenance professional perform outlined task piece equipment PM also set breakdown trigger Maintenance trigger used alert employee maintenance must performed operational level Breakdown maintenance trigger occur piece equipment break used maintenance performed With time trigger maintenance triggered whenever calendar roll date For example forklift manufacturer suggest performing preventive maintenance every hour operation established trigger Performing maintenance mean extending life asset increasing productivity improving overall efficiency reducing maintenance cost PM require additional tool manufacturer recommendation team willing adopt new maintenance process To achieve buy team important outline benefit PM program identify way PM schedule make job technician mechanic engineer much easier Emergency Response Vehicles leading manufacturer custom fire truck rescue vehicle committed quality value innovation Before implementing eMaint Spartan ERV homegrown system inefficient allow maintenance team prioritize work work performed unplanned With eMaint PMs triggered periodic inspection based calendar interval usage air compressor forklift mileage company vehicle They increased planned maintenance percentage completion rate PMs continues improve CMMS designed help schedule plan manage track maintenance activity The feature within CMMS PM Task Generation PM Scheduling Inspections work together offer continuous improvement support organization Preventive Maintenance program Within CMMS system eMaint user leverage PM calendar meter based PM task asset include detailed description guideline information vital effectively performing work Developing effective preventive maintenance program requires generating PM task CMMS system tool make important improvement PM Schedules empower user coordinate labor resource part needed complete work well automatically generate PM task based daily weekly monthly basis based usage A CMMS solution also help organization keep inspection pas compliance audit ease With CMMS user record inspection accurately generate corrective work order equipment fails inspection Keep pace auto trigger corrective getting away spreadsheet With effective Preventive Maintenance PM program organization experience improvement overall business process cost including increased productivity decreased waste improved work execution reduced unexpected breakdown A PM program support CMMS help spark serious quantifiable result For example achieved result matter month Other reactive maintenance Preventive Maintenance simplest maintenance strategy implement execute requires following manufacturer recommendation developing static maintenance schedule critical equipment PM help organization avoid unplanned breakdown lost production well equipment labor downtime It also decrease cost maintenance A common issue organization run PM schedule performing inappropriate amount maintenance asset Because maintenance take account health asset frequency maintenance work often high low This prevented preventive maintenance program World class maintenance maintenance planned planned unplanned ratio considered still beneficial compared typical average le But instance make sense leverage reactive maintenance Both method place maintenance plan In case make sense depend reactive maintenance rather following strict preventive maintenance program For example changing lightbulb cheap easy perform cause disruption business process To determine maintenance strategy apply consider question If answered yes question important begin developing Preventive Maintenance schedule asset benefit long run To get started take note equipment throughout organization establish inventory Within list ask question help decide piece equipment include future Preventive Maintenance plan Take look manufacturer recommendation establish effective Preventive Maintenance schedule help figure necessary task desired frequency maintenance Referring back original example could getting oil change car every mile recommended owner manual To effectively leverage Preventive Maintenance schedule important begin critical piece equipment one step time Once get started critical asset create long term plan annual schedule With long term plan established begin creating weekly plan crew These task assigned scheduled ahead time part maintenance resource accounted With Preventive Maintenance scheduling software like eMaint CMMS organization experienced benefit There many application Preventive Maintenance wide variety industry Learn eMaint Preventive Maintenance software benefit organization move toward reliable maintenance strategy attending Sign stay latest webinars white paper industry content Comments closed Chat eMaint sale representative get question answered Sign free trial start experiencing eMaint CMMS solution See eMaint CMMS help team achieve maintenance management goal Contact sale team CMMS need All content website including dictionary thesaurus literature geography reference data informational purpose This information considered complete date intended used place visit consultation advice legal medical professional Planned preventive maintenance PPM allows substantially reduce reactive retain building asset desired level quality Planned preventive maintenance either condition monitored preventive maintenance based fixed execution frequency activity generates calendar schedule A maintenance plan asset based library maintenance activity preset frequency execution asset These frequency based warranty supplier instruction legislation experience For example maintenance would allow schedule yearly inspection along filter cleaning three time year filter replacement six time year However maintenance might late causing reactive maintenance since actual condition asset taken account On hand maintenance might suggest action early necessary asset better condition expected Condition monitored preventive maintenance aim predict asset might fail prevent performing right maintenance Condition monitored maintenance applies asset communicate actual status maintenance system threshold value preset parameter forecast type timing maintenance This monitoring allows maintenance minimizes cost prevents asset failure resulting reactive maintenance An example condition monitored maintenance preset threshold heating installation When temperature installation exceeds threshold value preventive maintenance activity generated avoid failure A second example operating hour exceed preset value next maintenance activity automatically scheduled right time Planon Maintenance Management solution minimizes asset downtime disruption managing entire lifecycle start use ongoing management removal sale asset We know exactly maintain car cost We make smart well considered decision postponing combining advancing maintenance based budget risk engine failure projected lifecycle car several factor For one car easily managed ten car would become issue And project maintenance complex real estate portfolio many building represent enormous financial value include many technical asset many special maintenance requirement A webinar innovative mobile solution connect technician engineer back office support efficient maintenance work Planon recently launched Planon Universe Corporate Real Estate Facility Managers IWMS platform true role based interaction support technician field engineer unifying stakeholder Planning biggest advantage preventive maintenance compared unplanned reactive maintenance many overhead cost avoided planning process The cost unplanned maintenance include lost production downtime higher cost part time lost responding Market indicate unplanned maintenance typically cost three five time planned This maintenance planned equipment shut outside production hour minimize business impact required part staff gathered prior shutdown minimize work execution time In addition cost reduction business continuity also improved planned preventive maintenance asset break le often Compared condition monitored maintenance maintenance require specific monitoring strategy eliminating need interpret actual condition data act accordingly However previously stated maintenance may occur often little strategy Suitable asset preventive maintenance include critical operational function preventable failure mode increasing likelihood failure time Condition monitored maintenance also known aim predict asset failure might occur maintenance needed The goal prevent failure performing required maintenance Ideally condition monitored maintenance would allow maintenance frequency low possible preventing unplanned reactive maintenance reducing cost associated premature maintenance Condition monitoring done using several technique requires asset communicate actual status Example status temperature operating time energy consumption production count error code anything indicates malfunction call need maintenance Choosing correct technique condition monitoring important done consultation equipment manufacturer maintenance expert Suitable asset condition monitored maintenance include operational function failure mode predicted monitoring likelihood failure dependent time Planned preventive maintenance PPM complex implement reactive maintenance requires maintenance schedule known upfront activity planned executed time Condition monitored maintenance even complex maintenance necessitates monitoring strategy connection associated asset In either case maintenance management software solution like necessity When maintenance planned tracked using paper Excel impossible evaluate maintenance scenario plan activity budget manage cost execution help manager properly monitor quality cost compliance involved maintenance Maintenance staff field engineer access work order documentation schedule work order lost work better scheduled executed faster done safer compliant manner maintenance management software integrated part complete suite real estate facility management process This integration allows organization connect preventive maintenance process energy monitoring LEED Breeam assessment utilization occupancy outsourcing maintenance contracting portfolio analysis benchmarking PRESS RELEASE Salvador Gutierrez Vice President Facilities The Planon team provided invaluable support getting u running time within budget working unique PRESS RELEASE The University Portsmouth manages million sq ft Planon Karlo IT Information Manager The Cloud indeed costefficient secure futureproof alternative installation country many language Get everyone involved Make PM team effort unlimited user site license give team member including storekeeper customized access individualized password Remove ineffective task Easily review edit task scheduling conflict inefficient scheduling duplicate missing information Individualized schedule Equipment either new old operational dormant Create individualized schedule piece equipment using extensive scheduling option available Show task completion Attach job photo video document work order show actual PM history Use future training troubleshooting reduce redundant work Trigger fixed time period date actual completion date day week Trigger incremental reading threshold reading Remove conflict different frequency overlap Easily generate preventive maintenance work order date range Create task checklist library attach preventive maintenance schedule Materials module ensuring adequate preventive maintenance spare Basic CMMS preventive maintenance scheduler since cost frill obligation For implementation training customization please For CMMS Please sign free single user account CWorks important tool u Stockholm Globe Arena Fastigheter AB achieve excellence S orderliness arena SGAF goal systematize according Asset Management ISO Energy Environmental Management ISO ISO Users country English Spanish Chinese Bulgarian Romanian Farsi French Swedish Portuguese German Polish Croatian Chosen user various industry including manufacturing mining oil gas education healthcare municipality Users reported low learning curve Even thousand asset implementation fast week We search remarkable people join u exploring discovering better solution together CWorks All Rights Reserved 
PTNG	PRESENTING NEW GENERATION SOFTWARE visit home help http ERIC SIMON MFA RAYMONDE APRIL BA TIM CLARK MFA MA DAVID ELLIOTT MFA TREVOR GOULD MA BARBARA LAYNE MFA ERIN MANNING PhD FRANÇOIS MORELLI MFA LEOPOLD PLOTEK MFA BILL VORN PhD JANET WERNER MFA CATHERINE WILD MFA INGRID BACHMANN MA SHAWN BAILEY MFA ELEANOR BOND BFA GENEVIÈVE CADIEUX BA JUDY GARFIN MFA ELIZA GRIFFITHS BFA LYNN HUGHES Advanced Dip DANICA JOJICH MFA LAROCQUE MFA LUANNE MARTINEAU MFA MARISA PORTOLESE MFA LEILA SUJIR BA KELLY THOMPSON MA PATRICK TRAER MFA ERIKA ADAMS MFA SURABHI GHOSH MFA JEFFREY MITCHELL Jr MFA LINDA SWANSON MFA Visual Arts Building Room VA ext The Department Studio Arts offer program emphasize importance practical work practising artist Through series course ceramic drawing fibre material practice intermedia video performance electronic art painting photography print medium sculpture student increase awareness constitutes creativity understanding aesthetic intellectual aspect art today The Major Studio Art offer student freedom exploration still developing proficiency within disciplinary core The program encourages different creative tradition within solid historical theoretical studio foundation Its primary objective give student choice define need tailoring individualized program study within open parameter Students encouraged choose among series studio art elective progressively establish concentration concentration required disciplinary course While promoting respect discipline program stress diversity versatility across studio option Students may select studio art credit required medium There also similar range student select credit Art History Within specification student may fulfill requirement Major Studio Art either specializing medium combining studio number However student must complete one studio course level intermediate meet level advanced discipline fufill requirement DRAW Studio Art elective Chosen course single medium one following discipline ARTX Ceramics Drawing Fibres Material Practices IMCA Painting Print Media Sculpture Art History elective Chosen Art History ARTT VDEO course chosen Cinema Theatre In addition normal admission procedure Concordia University distinct admission procedure applicant Major Studio Art All applicant must submit work well part admission process For information concerning additional requirement submission deadline date please visit following website The Ceramics program offer student unique opportunity develop individual studio work context link contemporary art practice rich diverse material history A vital program within Studio Arts Department course Ceramics regularly include special collaborative project field trip visiting artist In addition Ceramics program provides student important point departure investigating diverse subject ranging traditional craft practice new technology studio scheduled lab afford student mean develop technical skill seek information specific need Course content level program includes seminar discussion pertinent student work current practice ceramic At advanced level consultation advisor student Ceramics opportunity pursue course CERA DRAW ARTH Chosen Art History ARTT VDEO course chosen Cinema Theatre Chosen Ceramics Fibres Material Practices Sculpture elective Studio Art elective Applicants Ceramics may apply enter directly Major Ceramics enter Major Studio Art intention transferring upon completion first year In addition normal admission procedure Concordia University distinct admission procedure applicant Major Ceramics All applicant must submit work well part admission process For information concerning additional requirement submission deadline date please visit following website Fibres Material Practices program study explores relationship material culture Informed discourse feminism traditional aesthetic Fibres Material Practices program offer opportunity intensive study practical theoretical art technology history textile Such creative critical investigation allied technical proficiency provides base student need develop emerging artist Courses available level ranging introductory class independent study advanced student wishing focus single project Students concentrating area Studio Arts welcome take course offered Fibres Material Practices area FBRS Chosen FBRS FBRS ARTH Chosen Art History ARTT VDEO course chosen Cinema Theatre Studio Art elective Applicants Fibres Material Practices may apply enter directly Major Fibres Material Practices enter Major Studio Art intention transferring upon completion first year In addition normal admission procedure Concordia University distinct admission procedure applicant Major Fibres Material Practices All applicant must submit work well part admission process For information concerning additional requirement submission deadline date please visit following website The Intermedia program offer rich curriculum encourages intermedia traditional discipline new form artistic expression using technology integrated medium practice Students choose course electronic art performance art video focusing one stream selectively combining area study conjunction Studio Arts Faculty Fine Arts course The program provides learning environment student study different combination video performance art immersive environment sound art production Chosen IMCA SCUL EAST Chosen IMCA IMCA Studio Art elective Chosen Fine Arts elective outside Studio Chosen ARTH ARTT VDEO ARTH It recommended IMCA student take three credit CART course offering consultation advisor In addition normal admission procedure Concordia University distinct admission procedure applicant Major Intermedia All applicant must submit work well part admission process For information concerning additional requirement submission deadline date please visit following website The Department Studio Arts provides program Painting Drawing combining theoretical historical practical study undergraduate level The aim provide student broad foundation base creative contribution Studio course seminar independent project varied topic collage pictorial installation popular culture narration supplement core course painting drawing Recognizing importance providing basic skill knowledge atmosphere freedom program supported large number faculty guest artist exposing student full range approach drawing painting A graduate program Painting Drawing available study DRAW PTNG Chosen DRAW Chosen PTNG Chosen DRAW PTNG Studio Art elective Art History Electives Chosen Art History ARTT VDEO course chosen Cinema Theatre In addition normal admission procedure Concordia University distinct admission procedure applicant Major Painting Drawing All applicant must submit work well part admission process For information concerning additional requirement submission deadline date please visit following website The Photography program acknowledges photography discipline distinct artistic historical identity It also recognizes contemporary photographic practice encompasses rich multiplicity formal conceptual approach The course structure program orientation faculty reflect concern student receive strong historical theoretical comprehension medium The program stress need student acquire concept vocabulary necessary critical discussion photographic work others Emphasis placed understanding photography sociological artistic ramification PHOT Photography elective ARTH Chosen ARTH ARTT elective Studio Arts elective PHOT Photography elective Photography Studio Arts elective ARTH In addition normal admission procedure Concordia University distinct admission procedure applicant Major Minor Photography All applicant must submit work well part admission process For information concerning additional requirement submission deadline date please visit following website The Print Media program provides student milieu investigate meaningful relationship exist technology reproduction individual expression contemporary Media offer multiple venue student research intaglio lithography serigraphy digital virtual approach Experimental innovative critical work encouraged Special topic theory course provide support individual aesthetic development explore intersection interdisciplinary practice Students Print Media program expected develop strong critical understanding work relationship contemporary society well develop professional skill awareness diversity inherent art practice Credits chosen Print Media follows Credits level Credits level Credits level Studio Art elective Fine Arts elective Art History elective Chosen Art History ARTT VDEO course chosen Cinema Theatre Credits chosen Print Media follows Credits level Credits level Credits level Studio Art elective Fine Arts elective Applicants Print Media may apply enter directly Major Print Media may enter Major Studio Art intention transferring upon completion first year In addition normal admission procedure Concordia University distinct admission procedure applicant Major Minor Print Media All applicant must submit well part admission process For information concerning additional requirement submission deadline date please visit following website The Sculpture program incorporates contemporary genre divergent approach discipline ranging performance video installation built environment application convergence idea notion intervention practice Within Fine Arts curriculum course offer opportunity intensive study practical theoretical context encouraging student explore relationship object material body space Such creative investigation allied technical proficiency provides base student develop understanding broad range sculptural issue Courses available level including independent study advanced student wishing focus single topic project To enrich artistic training student concentrating area Fine Arts may also take course offered sculpture SCUL DRAW ARTX Studio Art elective Studio Art elective Art History elective Chosen Art History ARTT VDEO course chosen Cinema Theatre Applicants Sculpture may apply enter directly Major Sculpture enter Major Studio Art intention transferring upon completion first year In addition normal admission procedure Concordia University distinct admission procedure applicant Sculpture All applicant must submit work well part admission process For information concerning additional requirement submission deadline date please visit following website  While priority given student within program student wishing enrol course must meet one following prerequisite credit Prerequisite See number A studio course designed familiarize student contemporary art practice theory diverse manifestation The course question boundary traditional art discipline engages creative potential transdisciplinary studio practice range project explore among thing gesture mapping image sound well performative environmental installation credit Prerequisite Any studio course offered Department Studio Arts This intermediate studio course student explore develop body work The content context course diverse student use wide range approach methodology contemporary art production The course provides student opportunity examine potential role artist today based professional practice including art research artist writing exhibition project credit Prerequisite Enrolment BFA program written permission Department This studio course brings together student practice based studio discipline following interdisciplinary practice allowing discussion exchange work relation aspect art making special topic address credit Prerequisite Enrolment BFA program written permission Department This studio course brings together student practice based studio discipline following interdisciplinary practice allowing discussion exchange work relation aspect art making special topic address credit Prerequisite studio course previously enrolment program offered Department Studio Arts written permission Department This course structured support advanced student development mature body work within transdisciplinary framework credit Prerequisite credit completed degree program Studio Arts course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study specific interdisciplinary project supervision ARTX faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program Studio Arts course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study specific interdisciplinary project supervision ARTX faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program Studio Arts course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study specific interdisciplinary project supervision ARTX faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite Enrolment BFA program written permission Department This seminar course provides opportunity student various studio practice discus changing issue Visual material directed reading exhibition visit invited speaker determined special topic credit Prerequisite Enrolment BFA program written permission Department This seminar course provides opportunity student various studio practice discus changing issue Visual material directed reading exhibition visit invited speaker determined special topic credit Prerequisite credit degree requirement written permission Department Students wishing work internship capacity within environment may apply academic credit The internship carried joint supervision qualified professional within outside University Studio Arts faculty member A clearly defined agreement Department student artist institution involved arrived internship undertaken This agreement state clearly nature student participation hour work expected Projects receiving approval internship credit must demonstrate appreciable learning potential student credit Prerequisite credit degree requirement written permission Department Students wishing work internship capacity within environment may apply academic credit The internship carried joint supervision qualified professional within outside University Studio Arts faculty member A clearly defined agreement Department student artist institution involved arrived internship undertaken This agreement state clearly nature student participation hour work expected Projects receiving approval internship credit must demonstrate appreciable learning potential student credit Prerequisite ARTT credit degree requirement written permission Department Students wishing work internship capacity within environment may apply academic credit The internship carried joint supervision qualified professional within outside University Studio Arts faculty member A clearly defined agreement Department student artist institution involved arrived internship undertaken This agreement state clearly nature student participation hour work expected Projects receiving approval internship credit must demonstrate appreciable learning potential student credit Prerequisite See number An introduction clay art medium employing various technique forming shaping decorating firing glazing credit Prerequisite CERA permission coordinator An advanced course technical historical research various ceramic process emphasis glaze use different clay body credit A providing opportunity study specialized aspect ceramic Specific topic course prerequisite relevant case stated Undergraduate Class Schedule credit Prerequisite Written permission Department A course providing opportunity study specialized aspect ceramic credit Prerequisite CERA permission coordinator The development body personal work refinement specific problem clay credit Prerequisite credit Major Ceramics CERA previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study ceramic supervision ceramic faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit Major Ceramics CERA previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study ceramic supervision ceramic faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit Major Ceramics CERA previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study ceramic supervision ceramic faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit An advanced studio course provides opportunity study specialized aspect ceramic Specific topic course prerequisite relevant case stated Undergraduate Class Schedule credit Prerequisite See number A studio course provides technical conceptual introduction drawing focusing distinctive interdisciplinary nature practice Various medium employed examine express form space composition variety graphic subject matter Drawing observation imagination memory covered credit Prerequisite See number A studio course provides opportunity study specialized aspect drawing credit Prerequisite See number A studio course provides opportunity study specialized aspect drawing credit Prerequisite DRAW This studio course intermediate drawing course directed project allow student explore different approach drawing begin develop personal visual language based skill set acquired level Historical contemporary issue art practice addressed course credit Prerequisite DRAW This studio course encourages drawing based personal experience fictitious content influence film book diary illustration A focus character setting alternate world contribute interest narrative form temporality playback loop sequencing credit Prerequisite DRAW This studio course explores range conceptual approach drawing using traditional experimental method Drawing used mean question make proposition body knowledge credit Prerequisite DRAW This studio course focus experience seeing depicting living human body complexity presence credit Prerequisite DRAW A studio course provides opportunity study specialized aspect drawing Specific topic course prerequisite relevant case stated Undergraduate Class Schedule credit Prerequisite DRAW written permission Department A studio course provides opportunity study specialized aspect drawing credit Prerequisite Any DRAW course An advanced drawing class student develop series project order create coherent body work drawing situate within contemporary practice Independent studio practice supplemented reading lecture seminar visit visiting artist credit Prerequisite Any DRAW course This studio course encourages drawing based personal experience fictitious content influence film book diary illustration A focus character setting alternate world contribute interest narrative form temporality playback loop sequencing credit Prerequisite Any DRAW course This studio course explores range conceptual approach drawing using traditional experimental method Drawing used mean question make proposition body knowledge credit Prerequisite Any DRAW course This studio course focus experience seeing depicting living human body complexity presence credit Prerequisite Any Studio Art course An installation studio course taught Painting Drawing area encourages student create work context expanded field It includes experimental pictorial spatial performative conceptual response site consideration using shaped canvas object paint unconventional material credit Prerequisite PTNG written permission Department An advanced studio drawing principal emphasis studio practice developing theoretical concept introduced PTNG credit Prerequisite DRAW An advanced drawing class student develop series independent project allow create coherent body work drawing situate within contemporary practice Independent studio production supplemented reading lecture seminar visit visiting artist credit Prerequisite credit completed degree program DRAW course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study drawing supervision drawing faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program DRAW course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study drawing supervision drawing faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program DRAW course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study drawing supervision drawing faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit A course advanced student provides opportunity study specialized area drawing Specific topic course prerequisite relevant case stated Undergraduate Class Schedule credit A course advanced student provides opportunity study specialized area drawing Specific topic course prerequisite relevant case stated Undergraduate Class Schedule credit Prerequisite See number An introductory course student explore expressive potential various material process fibre structure loom weaving feltmaking basketry surface application experimental construction credit Prerequisite See number An introductory course student explore creative potential printing painting dyeing resist work construction fabric credit Prerequisite FBRS permission coordinator An studio course emphasizes visual conceptual development fibre medium Complex woven structure fibre sculpture installation practice experimental approach explored credit Prerequisite FBRS permission coordinator An studio course textile printing dyeing emphasis development content Interdisciplinary approach photo process sculptural installation combined traditional print dye technique credit Prerequisite credit Studio Art course permission coordinator This studio course introduces Western Eastern Japanese method processing raw material make pulp form sheet paper used expressive art form Printing dyeing cutting bookbinding used consideration paper surface medium credit Prerequisite credit Studio Art course permission coordinator This studio course introduces student making paper part expressive material practice Sculptural process vacuum relief casting armature building explored alongside interdisciplinary approach assemblage book object among others credit Prerequisite FBRS FBRS permission coordinator This studio course explores contemporary social material cultural issue addressed fibre interdisciplinary studio art practice Assigned reading inform critique discussion Examples possible title offering may include Textiles Identity The Sustainable Studio Textiles Without Borders Transformative Cloth Social Political Practices Studio Art among others credit Prerequisite FBRS FBRS permission coordinator This studio course combine digital material approach within context contemporary studio practice Topics may include software textile art electronic textile thematic subject combined electrical material practice Other topic may include use digital technology imaging pattern development textile structure credit Prerequisite credit Studio Art course permission coordinator This studio course test boundary fibre practice produce innovative experimental studio work Students encouraged expand individual interest challenging way Topics may include Textile Arts Public Spaces Wildly Interdisciplinary Practices Fibres Media Radical Papermaking Fibres among others credit Prerequisite FBRS credit Studio Art course permission coordinator A studio course providing opportunity specialized study practice fibre surface explore theoretical critical practical issue interest student towards developing individual aesthetic contemporary art credit Prerequisite FBRS credit Studio Art course permission coordinator A studio course providing opportunity specialized study practice fibre structure explore contemporary theoretical critical practical issue interest student towards developing personal aesthetic art practice credit Prerequisite Written permission Department A course providing opportunity study specialized aspect fibre credit Prerequisite Written permission Department A course providing opportunity study specialized aspect fibre credit Prerequisite credit Major Fibres Material Practices FBRS previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study fibre supervision fibre faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program FBRS previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study fibre supervision fibre faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program FBRS previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study fibre supervision fibre faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite Six credit Fibres Material Practices level written permission Fibres Material Practices coordinator An course student create personal body work refine technical expertise develop visual critical language related fibre textile credit Prerequisite credit completed Studio Arts program written permission Department Internships designed provide professional experience student Students seeking work apprentice capacity established artist wishing pursue research fibre studio research fibre criticism museum work publication related endeavour may apply academic credit The internship carried joint supervision qualified professional internal external University Fibres Material Practices faculty member A clearly defined agreement Department student artist institution involved arrived Professional Internship undertaken Students required submit proposal clearly defines learning objective internship expected workload equal hour required course A Professional Internship request form must completed approved faculty supervisor Department Chair prior registration permission Students supply report upon completion internship faculty supervisor evaluation external supervisor inform final grade submitted faculty supervisor credit Prerequisite FBRS credit completed Studio Arts program written permission Department Internships designed provide professional experience student Students seeking work apprentice capacity established artist wishing pursue research fibre studio research fibre criticism museum work publication related endeavour may apply academic credit The internship carried joint supervision qualified professional internal external University Fibres Material Practices faculty member A clearly defined agreement Department student artist institution involved arrived Professional Internship undertaken Students required submit proposal clearly defines learning objective internship expected workload equal hour required course A Professional Internship request form must completed approved faculty supervisor Department Chair prior registration permission Students supply report upon completion internship faculty supervisor evaluation external supervisor inform final grade submitted faculty supervisor credit Prerequisite Enrolment Intermedia Video Performance Electronic Arts program written permission Department A course introducing video technology tool aesthetic investigation Students work individually develop proficiency medium evolve thematic formal concern The course introduces basic production skill centred use camera desktop technology present basic concept editing Issues specific video discussed analysis demonstration video art credit Prerequisite Enrolment Intermedia Video Performance Electronic Arts program written permission Department This studio course introduction interface real world computer Students learn different digitizing technique well basic communication protocol compression format numerous standard text sound video digital data They also learn create digital artwork using audiovisual scanning printing networking credit Prerequisite Enrolment Intermedia Video Performance Electronic Arts program written permission Department This studio course introduction basic programming technique used create interactive art project It centred learning basic popular programming environment Max Jitter currently used installation performance work interactive music sound art interactive video telematic art robotics This course allows student explore approach audiovisual control well traditional interface credit Prerequisite Enrolment Intermedia Video Performance Electronic Arts program written permission Department This studio course introduction electronics applied artistic project It focus practical application basic electronic principle technique integration electronic component circuit work art From basic electricity motor control flasher beeper motion detector analog circuit digital technology allows student create artwork involving light sound movement sensor interactivity credit Prerequisite Enrolment Intermedia Video Performance Electronic Arts program written permission Department This studio course investigates performance art form social artistic intervention cross visual performing art Reflecting historical importance performance practice visual art student focus production project may reflect issue interventionist action interrelationship installation performance interdisciplinary interface performance practice found performing art This course also examines video performance photography medium generating performative gesture documentation tool credit Prerequisite IMCA VDEO previously concurrently written permission Department A course introducing video technology tool aesthetic investigation Students work individually collaboratively develop proficiency medium evolve thematic formal concern editing system Avid Final Cut Pro introduced Discussions facilitated video screening workshop reading focus class project student work discussion related art issue In addition course offer student opportunity investigate cultural practice inform interrogate contemporary video art credit Prerequisite credit completed degree program within Department Studio Arts written permission Department This studio course focus interactive technology relation contemporary art practice example installation performance kinetic sculpture sound art Students may pursue individual team work developing artistic project This course centred programming environment MaxMSP Jitter focus interactivity use various sensor interface popular microcontrollers credit Prerequisite credit completed degree program within Department Studio Arts written permission Department This studio course focus robotic technology applied art electronics mechanic programming integration The emphasis interdisciplinary cybernetic approach audiovisual medium control expression including movement sound lighting video using computer electronics In order develop robotic art project student create interactive system machine behaviour use various sensor actuator credit Prerequisite credit completed within Intermedia Video Performance Electronic Arts program written permission Department An studio class seminar component focusing development project based video performance electronic art The seminar component course includes series reading presentation extensive range work artist credit Prerequisite credit completed within Intermedia Video Performance Electronic Arts program written permission Department An studio class seminar component focusing development intermedia project based video video sound performance electronic art The seminar component course includes series reading presentation extensive range work artist credit Prerequisite Intermedia Video Performance Electronic Arts program written permission Department A studio course providing opportunity study practice specialized aspect intermedia cyberart credit Prerequisite Intermedia Video Performance Electronic Arts program written permission Department A studio course providing opportunity study practice specialized aspect intermedia cyberart credit Prerequisite credit completed within Intermedia Video Performance Electronic Arts program written permission Department An advanced studio class student create personal body work refine technical expertise develop visual critical language related video performance electronic art Topics presented discussed seminar fashion A group exhibition end year required credit Prerequisite credit completed degree program IMCA course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study supervision faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program IMCA course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study supervision faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program IMCA course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study supervision faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite written permission Department Under joint supervision qualified professional faculty member student employed within industry professional organization relevant institution A clearly defined agreement Department student institution involved established internship undertaken This agreement clearly state nature student participation hour work expected Projects receiving approval internship credit must demonstrate appreciable learning potential student credit Prerequisite written permission Department Under joint supervision qualified professional faculty member student employed within industry professional organization relevant institution A clearly defined agreement Department student institution involved established internship undertaken This agreement clearly state nature student participation hour work expected Projects receiving approval internship credit must demonstrate appreciable learning potential student credit Prerequisite written permission Department Under joint supervision qualified professional faculty member student employed within industry professional organization relevant institution A clearly defined agreement Department student institution involved established internship undertaken This agreement clearly state nature student participation hour work expected Projects receiving approval internship credit must demonstrate appreciable learning potential student credit Prerequisite Intermedia Video Performance Electronic Arts program written permission Department A studio course providing opportunity study practice specialized aspect intermedia cyberart credit Prerequisite Intermedia Video Performance Electronic Arts program written permission Department A studio course providing opportunity study practice specialized aspect intermedia cyberart credit Prerequisite See number A studio course provides technical conceptual introduction painting focusing distinctive nature medium Basic painting material process explored exercise figuration abstraction colour composition construction pictorial space credit Prerequisite See number A studio course provides opportunity study specialized aspect painting credit Prerequisite See number A studio course provides opportunity study specialized aspect painting credit Prerequisite PTNG This studio course intermediate painting class directed project allow student explore variety approach medium begin develop personal visual language based skill set acquired level Historical contemporary issue art practice addressed course credit Prerequisite PTNG A studio course designed focus relationship painting popular culture The course explores impact photography cinema advertising television comic book pulp fiction popular music digital medium convention painting credit Prerequisite PTNG This studio course address contemporary art issue painting exploring body information relation question power race gender sexuality credit Prerequisite PTNG This studio course focus experience seeing depicting living human body complexity presence credit Prerequisite PTNG A studio course designed focus historical contemporary practice abstraction credit Prerequisite DRAW PTNG written permission Department A combination advanced idea painting drawing addressed Special topic approximately one month duration presented guest artist within outside Faculty credit Prerequisite PTNG A studio course provides opportunity study specialized aspect painting Specific topic course prerequisite relevant case stated Undergraduate Class Schedule credit Prerequisite PTNG written permission Department A studio course provides opportunity study specialized aspect painting credit Prerequisite Any PTNG course An advanced painting class student develop series independent project allow create coherent body work painting situate within contemporary practice Independent studio production may supplemented reading lecture seminar visit visiting artist credit Prerequisite Any PTNG course An studio course designed focus relationship painting popular culture This course explores impact photography cinema advertising television comic book pulp fiction popular music digital medium convention painting credit Prerequisite Any PTNG course This studio course address contemporary art issue representation painting exploring body information relation question power race gender sexuality credit Prerequisite Any PTNG course This studio course focus experience seeing depicting living human body complexity presence credit Prerequisite Any PTNG course An studio class designed focus historical contemporary practice abstraction credit Prerequisite Any Studio Art course An installation studio course taught faculty Painting Drawing area encourages student create work context expanded field It includes experimental pictorial spatial performative conceptual response site consideration using shaped canvas object paint unconventional material credit Prerequisite PTNG written permission Department An advanced studio painting principal emphasis studio practice developing theoretical concept introduced PTNG credit Prerequisite PTNG written permission Department A course student encouraged explore world painting consider practice point view woman experience individually collectively credit Prerequisite Written permission Department An exploration collage mean expression evolving historical artistic tradition painting drawing credit Prerequisite PTNG An advanced painting class student develop series independent project allow create coherent body work painting situate within contemporary practice Independent studio production may supplemented reading lecture seminar visit visiting artist credit Prerequisite DRAW PTNG written permission Department Through series special project drawing painting course familiarizes student historical material technique aspect artist concern credit Prerequisite credit completed degree program PTNG course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study painting supervision painting faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program PTNG course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study painting supervision painting faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program PTNG course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study painting supervision painting faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit A course advanced student provides opportunity study specialized area painting Specific topic course prerequisite relevant case stated Undergraduate Class Schedule credit A course advanced student provides opportunity study specialized area painting Specific topic course prerequisite relevant case stated Undergraduate Class Schedule credit An course cover fundamental technique specific colour photography including basic camera function film exposure printing credit Prerequisite Enrolment Major Minor Photography credit Faculty Fine Arts In course student investigate examine numerous aspect photography complex history aesthetic process well different camera darkroom technique specific colour photography Students learn control camera expose film properly transparency negative develop good printing skill colour produce coherent body work They become aware colour contributes structure meaning photograph Other topic include history colour photography aesthetic conceptual issue work contemporary photographer Students expected work technical exercise produce final portfolio demonstrates technical proficiency express individual artistic interest vision credit Prerequisite PHOT ARTH previously concurrently enrolment Major Minor Photography written permission program director A studio course introducing use black white photographic process parallel colour production practice taught PHOT Students taught basic technical skill film processing darkroom technique printing Students also introduced photographic tradition aesthetic Students must produce final portfolio demonstrates technical proficiency express personal artistic interest vision credit Prerequisite PHOT ARTH previously concurrently enrolment Major Minor Photography written permission program director In course student become aware colour contributes structure meaning photograph Topics include history colour aesthetic conceptual issue work contemporary photographer Students expected achieve basic level expertise technique colour make print The goal course student produce final portfolio demonstrates technical proficiency express individual personal artistic interest vision credit Prerequisite PHOT ARTH enrolment Major Minor Photography written permission program director The purpose studio course provide framework within student pursue photographic practice intermediate level Students encouraged explore concept technical component project They develop photographic language specific practice learn work contemporary artist The final portfolio express personal artistic vision credit Prerequisite PHOT enrolment Major Minor Photography written permission program director A continuation PHOT studio course explores technique fine art printing Students introduced advanced darkroom process mural printing quad tone digital printing Students must produce final portfolio demonstrates technical proficiency express personal artistic interest vision credit Prerequisite PHOT ARTH enrolment Major Minor Photography written permission program director A studio course introducing large format photography technique application Demonstrations cover basic view camera operation light metering sheet film exposure development advanced printing Assignments based traditional genre encourage ease aspect large format use personal application credit Prerequisite PHOT ARTH enrolment Major Minor Photography written permission Department A studio course directed towards development individual approach view camera photography Various us advanced technique also discussed Emphasis put development coherent portfolio print expressing personal concern credit Prerequisite PHOT PHOT ARTH enrolment Major Minor Photography written permission program director A continuation PHOT course explores technique colour photography advanced colour printing Aesthetic issue changing attitude towards colour medium role documentary work discussed A final portfolio reflects student personal approach colour photography credit Prerequisite PHOT PHOT previously concurrently enrolment Major Photography written permission program director An introductory studio course investigating technical creative aspect digital photography This course provides student understanding digital image practical application tool within personal approach photography Students explore production digital photograph emphasizing manipulation image software preparation different format Issues related use digital imagery within larger context photography explored credit Prerequisite PHOT enrolment Major Minor Photography written permission Department This advanced course expands basic control skill creative aspect digital technology implementing personal approach use technology Emphasis creative development advanced use technology production portfolio credit Prerequisite Written permission Department An opportunity study limited specialized aspect photography credit Prerequisite Written permission Department An opportunity study limited specialized aspect photography credit Prerequisite credit Major Photography including PHOT ARTH written permission program director A studio course student pursue one extended photographic project black white digital Topics related contemporary photography presented seminar fashion credit Prerequisite credit Major Photography written permission Department A student wishing work apprentice capacity established photographic artist wishing pursue research photographic criticism museum work publication related endeavour may apply academic credit The internship carried joint supervision qualified professional within without University Photography faculty member A clearly defined agreement Department student artist institution involved arrived internship undertaken This agreement state clearly nature student participation hour work expected Projects receiving approval internship credit must demonstrate appreciable learning potential student credit Prerequisite credit Major Photography written permission Department A student wishing work apprentice capacity established photographic artist wishing pursue research photographic criticism museum work publication related endeavour may apply academic credit The internship carried joint supervision qualified professional within without University Photography faculty member A clearly defined agreement Department student artist institution involved arrived internship undertaken This agreement state clearly nature student participation hour work expected Projects receiving approval internship credit must demonstrate appreciable learning potential student credit Prerequisite credit Major Photography written permission Department Students wish additional internship professional milieu may take course credit Prerequisite credit completed degree program PHOT course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study photography supervision photography faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program PHOT course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study photography supervision photography faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program PHOT course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study photography supervision photography faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite Written permission Department A course advanced student provides opportunity study limited specialized aspect photography credit Prerequisite Written permission Department A course advanced student provides opportunity study limited specialized aspect photography credit Prerequisite See number An introductory studio course intaglio technique emphasis creative imagery This course cover traditional technique process Assignments lecture critique focus theoretical historical aesthetic issue contemporary print medium credit Prerequisite See number An introductory studio course lithographic technique emphasis creative imagery This course cover drawing process stone plate Assignments lecture critique focus theoretical historical aesthetic issue contemporary print medium credit Prerequisite See number An introductory studio course basic technique screen printing emphasis creative imagery This course cover stencil technique using digital process Assignments lecture critique focus theoretical historical aesthetic issue contemporary print medium credit Prerequisite See number An introductory studio course basic concept contemporary digital imaging print application This course cover file creation layer The creation multiple traditional historical technology also explored Lectures critique focus theoretical critical aesthetic issue contemporary digital print medium credit Prerequisite See number This introductory studio course address special topic print process new technology Students create portfolio artwork demonstrates research credit Prerequisite See number An introductory studio course basic technique woodcut relief printing emphasis creative imagery This course cover basic principle cutting wood linoleum material Assignments lecture critique focus theoretical historical aesthetic issue contemporary print medium credit Prerequisite PRIN six credit Print Media Fine Arts program written permission program director An intermediate intaglio studio course emphasis individual creative theoretical development experimentation innovation This course explores image making including drawing photographic application print advanced proofing printing process Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portfolio demonstrates engagement contemporary print practice credit Prerequisite PRIN six credit Print Media Fine Arts program written permission program director An intermediate lithography studio course emphasis individual creative theoretical development experimentation innovation This course explores digital photographic process stone plate lithography emphasis colour printing Group individual critique discussion emphasize problem solving crtitical analysis creation personal imagery Students required develop coherent portfolio demonstrates engagement contemporary print theory practice credit Prerequisite PRIN six credit Print Media Fine Arts program written permission program director An intermediate studio course emphasis individual creative theoretical development experimentation innovation This course provides opportunity continued research drawing photographic digital application colour printing alternative printing surface combination print process Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portolio demonstrates engagement contemporary print theory practice credit Prerequisite PRIN six credit Print Media Fine Arts program written permission program director An intermediate studio course emphasis concept digital imaging print application file creation layer file export various digital print format Lectures critique focus theoretical critical aesthetic issue contemporary digital print medium Students required develop coherent portfolio demonstrates involvement contemporary print theory practice credit Prerequisite Nine credit Print Media Fine Arts program written permission program director An intermediate studio course emphasis individual creative theoretical development experimentation innovation This course explores book structure binding print process creation artist book object Group individual critique discussion emphasize problem solving critical analysis creation personal imagery credit Prerequisite Nine credit Print Media Fine Arts program written permission program director An intermediate studio course emphasis creative theoretical development experimentation innovation Through lecture demonstration assignment technical conceptual consideration creating traditional book form course explores book art vantage point print medium examining broad definition term artist book book Group individual critique discussion emphasize problem solving critical analysis creation personal imagery This course compulsory computer lab component credit Prerequisite Nine credit Print Media Fine Arts program written permission program director This intermediate studio course address topic print process technology Students create portfolio artwork demonstrates research credit Prerequisite Nine credit Print Media Fine Arts program written permission program director An intermediate studio course focus theoretical issue practice contemporary print medium Students create body artwork demonstrates critical thinking research featured topic credit Prerequisite PRIN six credit Print Media Fine Arts program written permission program director An intermediate studio course technique woodcut relief printing emphasis creation This course explores digital related process woodcut relief Colour advanced printing covered Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portfolio demonstrates involvement contemporary print theory practice credit Prerequisite Nine credit Print Media Fine Arts program written permission program director An intermediate studio course examines idea practice contemporary print medium student produce printed image reflect research critical thinking specific topic credit Prerequisite Nine credit Print Media Fine Arts program written permission program director An intermediate studio course examines idea practice contemporary print medium student produce printed image reflect research critical thinking specific topic credit Prerequisite PRIN nine credit Print Media written permission program director An advanced intaglio studio course emphasis individual creative theoretical development experimentation This course explores digital imagery colour process alternative print surface combined print technique new technology Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portfolio demonstrates engagement contemporary print theory practice credit Prerequisite PRIN nine credit Print Media written permission program director An advanced lithography studio course emphasis individual creative theoretical development experimentation innovation This course explores advanced technique stone plate lithography photographic digitally generated imagery Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portfolio demonstrates engagement contemporary print theory practice credit Prerequisite PRIN nine credit Print Media written permission program director An advanced studio course emphasis individual creative theoretical development experimentation innovation This course investigates photographic digital print application combined technique Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portfolio demonstrates engagement contemporary print theory practice credit Prerequisite PRIN nine credit Print Media written permission program director An advanced digital studio course emphasis individual creative theoretical development experimentation innovation In course student develop independent interdisciplinary research project investigates integration digital traditional reproduction technology Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portfolio demonstrates engagement contemporary print theory practice credit Prerequisite Any Print Media course written permission program director An advanced studio course student propose complete print project consultation instructor Students design project according interest established technical proficiency The course emphasizes individual practice within context informed discussion group individual critique gallery museum visit may include exhibition credit Prerequisite PRIN written permission program director An advanced studio course student propose complete print project consultation instructor Students design project according interest established technical proficiency The course emphasizes individual practice within context informed discussion group individual critique gallery museum visit may include exhibition This course continuation PRIN credit Prerequisite credit completed degree program PRIN course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study print medium supervision print faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program PRIN course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study print medium supervision print faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program PRIN course previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study print medium supervision print faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite Written permission Department Internships student wish obtain practical experience working apprentice professional environment would like pursue research curating print print criticism related experience print medium receive academic credit activity Approval project based demonstrable learning potential activity Students required submit internship proposal clearly defines objective activity appropriate workload equivalent hour required course nature participation supervisory schedule The internship jointly supervised faculty member qualified professional It student responsibility obtain approval proposal program advisor including required contractual agreement start internship credit Prerequisite Any Print Media course written permission program director An advanced studio course emphasis individual creative theoretical development experimentation innovation In course student produce printed image reflect research critical thinking specific topic Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portfolio demonstrates engagement contemporary print theory practice credit Prerequisite Any Print Media course written permission program director An advanced studio course emphasis individual creative theoretical development experimentation innovation In course student produce printed image reflect research critical thinking specific topic Group individual critique discussion emphasize problem solving critical analysis creation personal imagery Students required develop coherent portfolio demonstrates engagement contemporary print theory practice credit Prerequisite See number This studio course student explore creative research facilitate development artist encompassing discipline sculpture Modes expression sculpture investigated variety contemporary traditional material credit Prerequisite Enrolment Intermedia Video Performance Electronic Arts program written permission Department This studio course introduces student animating sculpture variety technique moving joint gear chain pulley system motion converter leading complex assembly animating static form Students develop basic skill reading drawing blueprint well measuring marking technique application metal wood applicable material credit Prerequisite SCUL permission Department This course build expands potential expression inherent contemporary sculpture Students encouraged develop individual form study various spatial consideration sculptural intervention installation action object Participants build awareness contemporary issue hone identity artist credit Prerequisite Permission Department This studio course introduces software sculptor covering modelling drafting rendering real virtual output using advanced manual automated process credit Prerequisite written permission Department A seminar course providing opportunity study specialized aspect sculpture credit Prerequisite Written permission Department A course providing opportunity study specialized aspect sculpture credit Prerequisite SCUL permission Department This advanced investigation concept research sculpture oriented development personal body work Installation intervention public space form background presenting sculptural idea Diversity contemporary sculptural practice critical discourse encouraged promote professional autonomy student studio work idea credit Prerequisite credit completed degree program SCUL previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study sculpture supervision sculpture faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program SCUL previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study sculpture supervision sculpture faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite credit completed degree program SCUL previously concurrently written permission Department This course provides limited number student opportunity pursue advanced study sculpture supervision sculpture faculty member A clearly defined written agreement student instructor involved required independent study undertaken This agreement clearly state nature student research scope project schedule work equivalent workload course A minimum cumulative GPA required requesting permission credit Prerequisite Enrolment Major Sculpture Ceramics Fibres Material Practices written permission Department A studio course providing opportunity advanced student work intimate context within studio setting structured around current topic theoretical practical importance credit A survey lecture course introducing history theory art video practice since inception The course locates root art form divergent impulse conceptualism community activism technological experimentation broadcast television well narrative documentary tradition In addition regional Canadian video artist situated within international historical trend development theoretical perspective Weekly screening Concordia University For query kindly contact u call center number We shall respond phone call Monday Friday except holiday observed Embassy Portugal You even send query We aim provide efficient service applicant If complaint would like know soon possible Portugal visa Application center maintains Complaint Register benefit applicant The supervisor Visa Application center shall provide access Register demand Alternatively complaint You even mail feedback VFS Bruce Lee daughter Shannon Lee I tweeting behalf father legacy You add location information Tweets city precise location web via application You always option delete Tweet location history Here URL Tweet Copy easily share friend Add Tweet website copying code Add video website copying code Hmm problem reaching server By embedding Twitter content website app agreeing Twitter This timeline spend time getting instant update matter Hover profile pic click Following button unfollow account When see Tweet love tap heart let person wrote know shared love The fastest way share someone else Tweet follower Retweet Tap icon send instantly Add thought Tweet Reply Find topic passionate jump right Get instant insight people talking Follow account get instant update topic care See latest conversation topic instantly Catch instantly best story happening unfold It like finger ptng way moon Do concentrate finger miss heavenly glory master master read voice mooooola legendary RT It like finger ptng way moon Dont concentrate finger u miss heavenly glory That best best Love spread father wisdom Thank New website coming soon Peace xx Back rude point word Twitter may capacity experiencing momentary hiccup visit information SAIC new faculty member represent diverse range practice medium methodology exemplify SAIC focus interdisciplinary study  SAIC suggested FAFSA priority deadline upcoming academic year December Undergraduate Illinois Residents January All Others  Students many option come getting involved SAIC community  Join u Down Monuments On Making Unmaking Public Memory Wabash Suite Chicago IL Phone Fax Email Office hour Salut tous La Communauté multigaming PiTon Noir Gaming Officiel PTNG ouvre son recrutement et recherche de joueurs francophones et ayant de jouer en groupe Nous voulons évolués ensemble pour faire de Batailles de clan World Of Warship World Of Tanks Crossout Armored Warfare War Thunder Nous possédons actuellement de team sur chacun de ce jeux Des modérateurs de section seront la pour vous aiguillez et expliquer si vous souhaiter nous rejoindre Nous avon pa énormément mais quelques un sont demandés quand même être mature et respecter le autres être actif ne demande pa non plus et mais aussi de ne pa jouer fois par an Vouloir et aimer jouer en équipe Posséder Discord et lorsque vous vous connectez Crossout Si il moyen de faire un peloton plus marrant Il vous suffit de contacter en jeu Ensuite je vous demanderez de passer sur le discord pour vous octroyer le droits de membres sur Une fois ceci terminer rien de plus simple bienvenu chez nous et bon jeu In Game Discord Type Note Type Note Type Note No registered user viewing page PTNG un style jeune et Français La boutique PTNG est en ligne La vente en ligne PTNG par ici le ami e Le shop PTNG enfin disponible Soirée PTNG le juin à LA VILLA gruissan Très bientôt sur Pour son lancement l équipe PTNG le plaisir de vous convier à une vente exclusive le Vendredi juin Vous pourrez ainsi découvrir no deux premières gammes tout au long une agréable soirée à la Brasserie La Rotonde Soyez un de premier acquérir le PTNG à poche INTERCHANGEABLE Nous vous accueillons à partir de fêter le lancement de notre marque MADE IN FRANCE Au programme de la soirée Présentation et ventes exclusive de premier PTNG Apéritif dînatoire Retransmission du match Coupe de monde DJ Pour tout renseignement au Quelques tshirt sont encore disponibles il te reste peu de temp pour bénéficier de limitée il reste peu de temp pour profiter de avantages que nous réservons à no premier soutiens Merci aux personnes qui ont joués le jeu en nous accordant leur confiance À ceux qui pa encore commander leurs tshirts nous vous invitons une dernière fois à nous rejoindre ensuite il serum trop tard pour se prétendre privilégié PTNG souhaite te remercier nous somme heureux de que le projet PTNG est financé à Aide nous à atteindre le en suivant ce lien Alex Chitty October November Lincoln Park 
reliability growth	Available Resources Reliability Growth Quick Subject Guide eTextbook Glossary Software Tools Training Courses Media In general first prototype produced development new complex system contain design manufacturing engineering deficiency Because deficiency initial reliability prototype may system reliability goal requirement In order identify correct deficiency prototype often subjected rigorous testing program During testing problem area identified appropriate corrective action redesign taken Reliability growth improvement reliability product component subsystem system period time due change product design manufacturing process The concept reliability growth theoretical absolute Reliability growth related factor management strategy toward taking corrective action effectiveness fix reliability requirement initial reliability level reliability funding competitive factor For example one management team may take corrective action failure seen testing another management team design test information may take corrective action failure seen testing Different management strategy may attain different reliability value basic design The effectiveness corrective action also relative compared initial reliability beginning testing If corrective action give improvement reliability equipment initially one tenth reliability goal significant improvement reliability system initially one half reliability goal In formal reliability growth program reliability goal goal set achieved development testing program necessary allocation reallocation resource Therefore planning evaluating essential factor growth process program A comprehensive reliability growth program need planning assessment technique A reliability growth program differs conventional reliability program objectively developed growth standard assessment technique compared A comparison assessment planned value provides good estimate whether program progressing scheduled If program progress planned new strategy considered For example reexamination problem area may result changing management strategy problem failure mode surfaced testing actually receive corrective action instead repair Several important factor effective reliability growth program The management strategy may driven budget schedule defined actual action management correcting reliability problem If reliability failure mode known analysis testing management make decision either fix corrective action fix implement corrective action failure mode Generally reliability failure mode meet expectation management corrective action would expected If reliability failure mode expectation management strategy would generally call implementation corrective action Another part management strategy effectiveness corrective action A corrective action typically eliminate failure mode occurring It simply reduces rate occurrence A corrective action fix problem failure mode typically remove certain amount failure mode failure intensity certain amount remain system The fraction decrease problem mode failure intensity due corrective action called EF The EF vary failure mode failure mode typical average government industry system reported With EF equal corrective action failure mode remove failure intensity remains system Corrective action implementation raise following question What fix incorporated testing It possible fix incorporated product testing However others may delayed end test since may expensive stop restart test equipment may complex performing complete teardown Implementing delayed fix usually result distinct jump reliability system end test phase For corrective action implemented testing additional testing provides feedback effective corrective action provides opportunity uncover additional problem correct Evaluation delayed corrective action provided projected reliability value The demonstrated reliability based actual current system performance estimate system reliability due corrective action incorporated testing The projected reliability based impact delayed fix incorporated end test test phase When reliability growth program take place development process Actually one answer question The modern approach reliability realizes typical reliability task often yield system attained reliability goal attained cost effective reliability potential system Therefore reliability growth may start early program utilizing Integrated Reliability Growth Testing IRGT This approach recognizes reliability problem often surface early engineering test The focus engineering test typically performance reliability IRGT simply piggyback reliability failure reporting informal fashion engineering test When potential reliability problem observed reliability engineering notified appropriated design action taken IRGT usually implemented time basic reliability task In addition IRGT reliability growth may take place early prototype testing dedicated system testing production testing feedback manufacturing quality testing inspection The formal dedicated testing RGDT typically take place basic reliability task completed Note testing assessing product specification test environment must consistent specified environmental condition product specification defined In addition testing subsystem important realize interaction failure mode may generated subsystem integrated total system Reliability growth analysis process collecting modeling analyzing interpreting data reliability growth development test program development testing In addition reliability growth analysis done data collected field fielded system Fielded system also includes ability analyze data complex repairable system Depending metric interest data collection method different model utilized developed analyze growth process The reliability engineering resource website service HBM Prenscia Copyright HBM Prenscia All Rights Reserved  In developmental reliability growth testing objective test system find problem failure mode incorporate corrective action therefore increase reliability system This process continued duration test time If corrective action effective system mean time failure MTBF mean trial failure MTrBF move initial low value higher value Typically objective reliability growth testing increase increase particular value called goal requirement Therefore determining much test time needed particular system generally particular interest reliability growth testing The based empirical observation reflects learning curve pattern reliability growth This learning curve pattern form basis The Duane postulate also reflected model form discovery function The discovery function rate new distinct problem discovered reliability growth development testing The NHPP model special case discovery function Consider new distinct failure mode first seen testing stopped corrective action incorporated testing resumed In addition suppose corrective action highly effective failure mode unlikely seen In case failure observed reliability growth test first occurrence failure mode Therefore NHPP model Duane postulate accepted pattern reliability growth testing program form NHPP model must form discovery function To consistent Duane postulate NHPP model discovery function must form This form discovery function important property Crow extended model application growth planning As NHPP model form discovery function tie model directly data experience There two type reliability growth planning model available RGA The following parameter used continuous discrete reliability growth model When system tested failure mode observed management make one two possible decision either fix fix failure mode Therefore management strategy place failure mode two category A mode B mode The A mode failure mode seen test corrective action taken This account mode management determines economical otherwise justified take corrective action The B mode either corrected test corrective action delayed later time The management strategy defined portion failure fixed Let initial failure intensity system test defined A mode initial failure intensity defined B mode initial failure intensity failure intensity system addressed corrective action even failure mode seen testing failure intensity system addressed corrective action failure mode seen testing Then initial failure intensity system The initial system MTBF Based initial failure intensity definition management strategy ratio defined The portion initial system failure intensity addressed corrective action seen test The failure mode intensity type A type B mode When delayed corrective action implemented type B failure mode word BD mode failure intensity mode reduced corrective action effective Once BD mode discovered rarely totally eliminated corrective action After BD mode found fixed certain percentage failure intensity removed certain percentage failure intensity generally remain The fraction decrease BD mode failure intensity due corrective action called EF A study EFs showed average EF Therefore BD mode failure intensity typically remain system corrective action implemented However individual EFs failure mode may larger smaller average This average value used planning purpose information recorded average effectiveness factor previous reliability growth program used When putting together reliability growth plan goal goal failure intensity defined requirement target product end growth program The failure intensity remaining system end test depend management strategy given classification type A type B failure mode The engineering effort applied corrective action determines effectiveness factor In addition failure intensity depends rate problem failure mode discovered testing The rate discovery drive opportunity take corrective action based seen failure mode important factor overall reliability growth rate The reliability growth potential limiting value failure intensity time increase This limit maximum MTBF attained current management strategy The maximum attained type B mode observed fixed If discovered type B mode corrected time deferred corrective action time growth potential maximum attainable type B designation failure mode corresponding assigned effectiveness factor This called In word nominal growth potential maximum attainable growth potential assuming corrective action implemented every mode planned fixed In reality corrective action might implemented later time due schedule budget engineering etc If discovered type B mode corrected end current test phase prevailing growth potential maximum attainable type B designation failure mode corresponding assigned effectiveness factor If type B failure mode discovered corrected average effectiveness factor maximum reduction initial system failure intensity growth potential failure intensity The growth potential Note based equation initial failure intensity management strategy ratio given section initial failure intensity equal The Growth Potential Design Margin considered safety margin setting target value reliability growth plan It common system degrade term reliability prototype product going full manufacturing This due variation material process etc Furthermore reliability growth testing usually overestimate actual product reliability field usage condition may perfectly simulated testing Typical value around Higher value yield le risk program require rigorous reliability growth test plan Lower value imply higher program risk le safety margin During planning stage growth potential calculated based goal MTBF growth potential design margin term failure intensity The reliability engineering resource website service HBM Prenscia Copyright HBM Prenscia All Rights Reserved  MyNAP member online Not MyNAP member yet start saving receiving special member perk Somewhat analogous topic covered previous chapter hardware system chapter cover software reliability growth modeling software design reliability software growth monitoring testing Software reliability like hardware reliability defined probability software system work without failure specified condition specified period time Musa But software reliability differs important respect hardware reliability Software reliability problem deterministic sense time specific set input applied software system result This clearly different hardware system precise moment failure precise cause failure differ replication replication In addition software system subject fatigue form degradation In situation reliability error attributed full system distinction made subsystem component attribution appropriate many application However case failure mode time appropriate use separate metric separate assessment subsystem component reliability respect system structure well differentiating software hardware reliability aggregated assessment This separate treatment particularly relevant software failure given different nature software hardware reliability hardware reliability growth primarily relevant growth occurs testing relevant middle later stage developmental testing In contrast except entire system software appropriate software reliability growth primarily considered concern would addressed system development contractor latest earliest stage developmental testing Therefore primary party responsible software reliability contractor In chapter first discus software reliability growth modeling generally understood used defense acquisition We turn new approach modeling describe work done discus build prediction model The last two section chapter briefly consider testing monitoring Classic Design Models Software reliability growth model best limited use making prediction future reliability software system development several reason Most important pattern reliability growth evident development software system often monotonic correction address defect time introduce additional defect Therefore although nonhomogeneous Poisson process model one leading approach modeling reliability software hardware system development often provides poor inference decision rule management software system development Other deficiency model relevant software substantial dependence time modeling factor dynamic behavior software system failure take consideration various environmental factor affect software reliability fielded hardware interaction With respect dependence time difficult create reliability model software system highly likely software system different reliability value relation different software operational use profile The dynamic behavior software system function environment use mission employed interaction hardware component complicate modeling software reliability Siegel describes related complexity Often model software reliability derived large body recent research ranging code churn code complexity code dependency testing coverage bug information usage telemetry shown effective predictor code quality Therefore discussion software reliability growth model followed discussion use based model believe important advantage tool predicting software reliability system A number model software reliability growth available represent substantial proportion research software reliability They range simple Nelson model Nelson sophisticated model Jacoby Masuzawa model model Basili et Several reliability model use Markov chain technique Whittaker Other model based use operational profile set software operation probability occurrence Musa These operational profile used identify potentially critical operational area software signal need increase testing effort area Finally large group software reliability growth model described nonhomogenous Poisson process description see Yamada Osaki group includes Musa Musa et model Goel Okumoto Software reliability model classified broadly seven category Xie A fair number classical reliability model use data test failure produce estimate system subsystem reliability But many software system developer strive system pas automated test written often measurable fault Even failure failure might accurate reflection reliability software testing effort comprehensive Instead failure estimation model described Ehrenberger Miller et al may appropriate use methodology Another factor affect classical software reliability model software system actual measurable product quality failure rate derived behavior system usually measured late life cycle effect affordable corrective action When test failure occur actual operation system already implemented In general multiphase approach need taken collect various metric relevant subsystem different stage development different metric estimable different development phase used early indicator software quality description approach see Vouk Tai Jones Vouk In provide short description classical reliability growth model limitation approach Performance Metrics Prediction Models An alternative approach reliability growth modeling determining whether software design likely lead reliable software system rely performance metric Such metric used tracking software development input decision rule action accepting subsystem system delivery In addition metric recent work prediction model stemming BOX Overview Classical Software Reliability Growth Models This simplistic model based number test failure A limitation model failure available reliability becomes percent might always case For detail see Nelson In model fault intentionally injected software developer The testing effort evaluated basis many injected defect found testing Using number injected defect remaining estimate reliability based quality testing effort computed using method A limitation model large system part reliability profile The fault seeding could also biased causing problem estimation For detail see Schick Wolvertone Duran Wiorkowski This approach model overall system reliability assuming number fault experienced several category test instance follows hypergeometric distribution However test case pas fault failure analyze For detail see Tahoma et al  In model number fault level testing cycle stage used make prediction untested area software One limitation model need data available early enough development cycle affordably guide corrective action For detail see Wohlin Korner This model rank fault according complexity The reliability system estimated basis number fault complexity level high moderate low software For detail see Nakagawa Hanata In model waiting time failure assumed exponentially distributed parameter assumed prior gamma distribution For detail see Littlewood Verall JM Model In JM model initial number software fault unknown fixed time discovery failure exponentially distributed Based JM model modeled Markov process model For detail see Jelinksi Moranda Bayesian Model Fault Free Probability This model deal reliability software Reliability time assumed following form given prior gamma distribution probability software fault free given Beta distribution Using two parameter Bayesian model constructed estimate reliability For detail see Thompson Chelson Bayesian Model Using Geometric Distribution In model based number test case th debugging instance failure first occurs number failure remaining current debugging instance determined For detail see Liu Model This nonhomogeneous Poisson process model mean distribution cumulative number failure time given parameter estimated collected failure data For detail see Goel Okumoto Model This also nonhomogeneous Poisson process model mean distribution cumulative number failure given expected number fault detected failure detection rate For detail see Yamada Osaki Basic Execution Time Model In model failure rate function time given A limitation model applied one initial number fault failure rate function execution time For detail see Musa Logarithmic Poisson Model This model related basic execution time model However failure rate function given e initial failure intensity failure intensity decay parameter For detail see Musa Okumoto Duane Model Weibull Process Model This nonhomogeneous Poisson process model mean function The two parameter estimated using failure time data For detail see Duane Markov Models Markov model require transition probability state state state defined current value key variable define functioning software system Using transition probability stochastic model created analyzed stability A primary limitation large number state large software program For detail see Whittaker Fourier Series Model In model fault clustering estimated using analysis For detail see Crow Singpurwalla Input Models In model fault mapping space input space intended output mapping identified potential fault rectified These model often infeasible large number possibility large software system For detail see Bastani Ramamoorthy Weiss Weyuker work McCabe recent work along similar line Ostrand et Weyuker et It quite likely broad category software system already exist prediction model could used earlier development performance metric use tracking assessment It possible model could also used help identify better performing contractor proposal stage Further substantial amount research software engineering community building generalizable prediction model model trained one system applied another system example approach given Nagappan et al  Given benefit earlier identification problematic software strongly encourage Department Defense DoD stay current state art software reliability practiced commercial software industry increased emphasis data analytics analysis When clear prediction model broadly applicable DoD consider mandating use contractor software development A number metric found related software system reliability therefore candidate monitoring ass progress toward meeting reliability requirement These include code churn code complexity code dependency see We note course reliability maintainability offered Defense Acquisition University list factor increasing software reliability maintainability These factor straightforward measure supplied contractor throughout development model special type software reliability growth model widely used defense acquisition These software reliability growth model based assessment change software metric considered strongly related system reliability The purpose section provide understanding model applicable software development The standard International Organization Standards International Electrotechnical Commission state internal metric little value unless evidence related externally visible Internal metric shown useful however early indicator externally visible product quality related statistically significant stable way field quality reliability product see Basili et The validation internal metric requires convincing demonstration metric measure purport measure metric associated important external metric field reliability maintainability detail see Software defined probability presence fault software probability particular software element fail operation The higher software logically lower reliability quality software produced vice versa Using operational profiling information possible relate generic product Research focused two area definition metric capture software complexity testing thoroughness identification experimentation model relate software metric see Denaro et While software measured deployment count fault per structural unit line code directly measured software deployment Five type metric used study software quality code churn measure code complexity measure code dependency defect bug data people organizational measure The rest section although comprehensive discus type statistical model built using measure Code Churn Code churn measure change made component file system period time The commonly used code churn measure number line code added modified deleted Other churn measure include churn churn relative time release system churn frequency change file component Several research study used code churn indicator code quality extension reliability Graves et al predicted fault incidence using software change history basis model used sum contribution change module large recent change contributed fault potential Munson Elbaum observed system developed relative complexity program module altered change They studied software component line code embedded system module programmed Code churn metric found among highly correlated problem report Another kind code churn debug churn Khoshgoftaar et al define number line code added changed bug fix The researcher objective identify module debug code churn exceeded threshold order classify module They studied two consecutive release large legacy system telecommunication contained procedure module Discriminant analysis identified module basis static software product metric Their model used second release showed type I type II misclassification rate percent percent respectively overall misclassification rate percent Using information file status new changed unchanged along explanatory variable line code age prior fault predictor negative binomial regression equation Ostrand et al successfully predicted number fault multiple release software system Their model high accuracy fault found early later stage development In study Windows Server Nagappan Ball demonstrated use relative code churn measure normalized value various measure obtained evolution system predict defect density statistically significant level Zimmermann et al mined source code repository eight open source system IBM Eclipse Postgres KOffice gcc Gimp JBoss JEdit Python predict future change would take place system The top three recommendation made system identified correct location future change accuracy percent Code Complexity Code complexity measure range classical cyclomatic complexity measure see McCabe recent metric one known CK metric suite author see Chidamber Kemerer McCabe designed cyclomatic complexity measure program testability understandability Cyclomatic complexity adapted classical graph theoretical cyclomatic number defined number linearly independent path program The CK metric suite identifies six metric The CK metric also investigated context Basili et al studied software program using eight student project They found first five metric listed correlated defect last metric Briand et al obtained somewhat related result Subramanyam Krishnan present survey eight empirical study showing metric significantly associated defect Gyimóthy et al analyzed CK metric Mozilla codebase found coupling object best measure predicting class number child effective prediction Code Dependencies Early work Pogdurski Clarke presented formal model program dependency based relationship two piece code inferred program text Schröter et al showed dependency predict defect They proposed alternate way predicting failure Java class Rather looking complexity class looked exclusively component class us For Eclipse open source integrated development environment found using compiler package resulted significantly higher percent using graphical user interface package percent Zimmermann Nagappan built systemwide code dependency graph Windows Server found model built social network measure accuracy greater percentage point comparison model built complexity metric Defect Information Defect growth curve rate defect opened also used early indicator software quality Chillarege et al IBM showed defect type could used understand net reliability growth system And Biyani Santhanam showed four industrial system IBM strong relationship development defect per module field defect per module This approach allows building prediction model based development defect identify field defect People Social Network Measures Meneely et al built social network developer using churn information system million line code Nortel Networks They found model built using social measure revealed percent failure percent file system Studies performed Nagappan et al using Microsoft organizational structure found organizational metric best predictor failure Windows In predicting software reliability software metric number approach proposed Logistic regression popular technique used building reliability model The general form logistic regression equation given follows logistic regression parameter independent variable used building logistic regression model In case reliability model independent variable combination measure ranging code churn code complexity people social network measure Another common technique used prediction model support vector machine detail see Han Kamber For quick overview technique consider training set two class shown In part figure point representing software module either circle defect box A support vector machine separate data cloud two set searching maximum marginal hyperplane case hyperplane simply line There infinite number possible hyperplanes part figure separate two group Support vector machine choose hyperplane margin give largest separation class Part figure show hyperplane small margin part b show one maximum margin The maximum margin defined point training essential point also called support vector part b figure indicated bold Support vector machine thus compute decision boundary used classify predict new point One example triangle part c The boundary show side hyperplane new software module located In example triangle hyperplane thus classified defect free Separating data single hyperplane always possible Part show example nonlinear data possible separate data line In case support vector machine transform input data higher dimensional space using nonlinear mapping In new space data linearly separated detail see Han Kamber Support vector machine le prone overfitting approach complexity characterized number support vector dimensionality input Support vector machine overview See text discussion Other technique used instead logistic regression support vector machine discriminant analysis decision classification tree Drawing general conclusion empirical study software engineering difficult process highly dependent potentially large number relevant contextual variable Consequently panel assume priori result study generalize beyond specific environment conducted although researcher understandably become confident theory similar finding emerge different context Given software vitally important aspect reliability predicting software reliability early development severe challenge suggest DoD make substantial effort stay current effort employed industry produce useful prediction There generally accepted view appropriate combine software failure hardware failure ass system performance given test However section focusing earlier testing developmental testing akin testing hardware The concern insufficient software testing carried early stage developmental testing addressing software problem discovered later stage developmental testing operational testing much expensive As discussed National Research Council adequately test software given combinatorial complexity sequence statement activated function possible input one obligated use form automated test generation high code coverage assessed using one various coverage metric proposed research literature This necessary discover software defect evaluate reliability software component subsystem However given current lack software engineering expertise accessible government developmental testing testing usefully carried addition testing done full system limited Consequently recommend primary testing software component subsystem carried developer carefully documented reported DoD contractor provide software used run automated test component subsystem By software system mean system exclusively software This includes information technology system major automated information system If DoD acquires ability carry automated testing technique including developed Poore see Whittaker Poore based profile user input provide useful summary statistic reliability software readiness operational test detail see National Research Council Finally contractor code also shared DoD DoD could validate contractor result use fault injection seeding technique see However operational testing software system raise issue known fault masking whereby occurrence fault prevents software system continuing therefore miss fault conditional previous code functioning properly Therefore fault seeding fail provide unbiased estimate case The use fault seeding could also biased way causing problem estimation various generalization extension technique address various problem They include explicit recognition order constraint fault masking Bayesian construct provide profile subroutine segmenting system run One important principle found commercial best practice benefit display collected data term trend chart track progress Along line Selby demonstrates use analytics dashboard software system Analytics dashboard provide easily interpretable information help many user including software developer software manager project manager These dashboard cater variety requirement see Several metric shown figure example trend defect help ass overall stability system Selby state organization define data trend reflective success meeting software requirement time one could develop statistical test could effectively discriminate successful unsuccessful development program Analytics dashboard also give help ability drill provide detail also useful see example Analytics dashboard Selby Reprinted permission Example specific context analytics dashboard Selby Reprinted permission This page intentionally left blank A high percentage defense system fail meet reliability requirement This serious problem Department Defense DOD well nation Those system le likely successfully carry intended mission also could endanger life operator Furthermore reliability failure discovered deployment result costly strategic delay need expensive redesign often limit tactical situation system used Finally system fail meet reliability requirement much likely need additional scheduled unscheduled maintenance need spare part possibly replacement system substantially increase cost system Beginning DOD undertook concerted effort raise priority reliability greater use design reliability technique reliability growth testing formal reliability growth modeling contractor DOD unit To end handbook guidance formal memoranda revised newly issued reduce frequency reliability deficiency defense system operational testing effect deficiency evaluates recent change generally ass current DOD principle practice could modified increase likelihood defense system satisfy reliability requirement This report examines change reliability requirement proposed system defines modern design testing reliability discus contractor role reliability testing summarizes current state formal reliability growth modeling The recommendation improve reliability defense system protect health valuable personnel operate You looking OpenBook online reading room since Based feedback user made improvement make easier ever read thousand publication website Do want take quick tour OpenBook feature Show book jump chapter name use button go back chapter skip one Jump page one Also type page number press go directly page book Switch read report appeared print web version highlight search text To entire text book type search term press link book page preferred social network via email View chapter Ready take reading offline Click book print free PDF available Do enjoy reading report Academies online Sign email notification let know new publication area interest released A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition MyNAP member online Not MyNAP member yet start saving receiving special member perk This chapter responds specific item charge panel consider reliability growth model Department Defense DoD acquisition Reliability growth model model used estimate predict improvement system reliability function amount system testing carried Such model used three way help construct test plan defense system early development ass currently achieved system reliability ass whether defense system development track meeting reliability requirement prior deployment This chapter examines form model taken strength weakness three kind application We begin overview concept We look hardware growth model commonly used application implication DoD use Reliability growth model software covered The traditional DoD process achieving reliability growth development known test analyze It includes developmental test posttest assessment observed failure determine root cause This assessment followed analysis identify potential reliability enhancement hardware software manufacturing process maintenance procedure operation incorporation specific design upgrade The next step retesting verify failure mode removed mitigated checking see new failure mode introduced During developmental testing failed system typically restored repair replacement part returned testing Repeated TAAF cycle developmental test grow system reliability time A typical profile reliability growth shown Part figure depicts real growth growth occurs incremental step increase larger gain occurring earlier failure mode higher failure rate failure probability likely occur contribute reliability growth fixed counterpart smaller failure rate probability failure For specific system undergoing TAAF exact pattern extent actual growth reliability random occurrence individual failure mode lead reliability gain random event Part b show reliability result different TAAF phase developmental test event connected The primary objective use available data strengthen statistical precision associated estimate system reliability attained completion testing last conducted event narrowing confidence interval relative could reported using result solely last test event The modeling also smooth point estimate system reliability accounting inherent randomness test observation There three primary us methodology facilitate planning developmental testing program series TAAF phase track demonstrated reliability performance course testing project anticipated reliability beyond observed testing Reliability growth modeling began empirical observation Duane developmental testing program relatively complex aircraft accessory For system tracking scale cumulative number failure tended increase linearly cumulative test time Since many reliability growth model developed see expository survey Fries Sen Department Defense Continuous reliability growth model classified two general category The first build probabilistic framework The concept reliability growth broadly interpreted encompass reliability improvement made initial system design physical testing conducted design phase based analytical evaluation Walls et Such perspective useful system amenable operational testing satellite This estimate made completion last test It generally consider reliability design improvement may implemented last event completed observed failure mode analyzed This form Duane Postulate learning curve property equivalent cumulative number failure roughly linear scale Illustrations reliability growth using TAAF test analyze fix process cumulative count failure time These model underlying failure process The second category directly imposes mathematical structure time successive failure system level individual failure mode mechanism essentially modeling dynamic mean time failure time Within category number different approach modeling taken Other technique adapted reliability growth domain biostatistics engineering discipline Similar categorization describe family discrete reliability growth model see Fries Sen Reliability growth model generally assume sole change successive developmental testing event system reliability design enhancement introduced event This assumption constrains applicability specifically excludes integration reliability data obtained substantially different testing circumstance within test across test event For example testing early developmental testing yield estimate considerably higher estimate subsequent field test Similarly fact successive developmental test occur substantially different test environment affect assumption reliability growth For example suppose system first tested low temperature failure mode found fixed If next test high temperature reliability may decline even though system fewer failure mode due design improvement Because system intended variety environment one could argue separate reliability growth curve specific environment This idea may somewhat extreme critical keep mind reliability growth specific condition use Another characteristic shared great majority reliability growth model specific application imposes common analysis treatment failure data across entire testing program Thus reduction analytical flexibility representing result individual developmental testing event In addition nearly reliability growth model lack expression statistical confidence interval Asymptotic result derived model conceptually obtainable likelihood function proper care taken account structure failure event data The availability parametric bootstrap method potential support statistical inference across broad category reliability growth model date application tool limited A model within one category necessarily generates unique model category The physical interpretation drive modeling however translate readily one type another In DoD acquisition small number reliability growth model dominate see next section But across application particular reliability growth model best potential testing data circumstance The derivation common reliability growth model predominantly In practice however scope ordinarily encompasses software performance using failure scoring rule count failure whether traceable hardware software failure mode broad definition system failure However probabilistic underpinnings software failure mode quite different hardware failure mode Nevertheless resultant form software reliability growth may serve fit reliability data general developmental test setting Given reliability complex system fact multidimensional outcome function various failure mode surfacing failure mode function multidimensional input various factor defining environment use surprising function input time test sometimes incomplete summary The next two section look common DoD model reliability growth DoD application growth model The discussion two section address analytical objective underlying assumption practical implementation interpretation concern Two reliability growth model used majority current DoD application one nonhomogeneous Poisson process model particular specification intensity function competing risk model TAAF program find eliminates reduces failure mode remaining risk reduced reliability grows The first model nonhomogeneous Poisson process formulation particular specification intensity function Software failure mode conceptually viewed deterministic sense randomness associated element code act called support specific operation The code either work intended fail repeatedly demonstrate identical response time called support function The pace code called respond specific type operation course viewed inducing randomness software failure process The characterizing feature class model number failure time interval independent Poisson distributed random variable A key defining metric model intensity function also referred rate occurrence failure A physically understandable easily estimable quantity cumulative intensity function defined integrated time interval equal expected cumulative number failure time E This widely used model referred power law model routinely invoked industry standard reliability growth model DoD acquisition setting In model failure rate following function cumulative time test μ T This model interpreted stochastic representation Duane postulate see Crow log linear function log The parameter scale parameter parameter determines degree reliability growth decay When model reduces homogeneous Poisson process model The power law model various associated statistical methodology popularized Army Materiel Systems Analysis Activity AMSAA building Crow many report see Department Defense Indeed power law model commonly referred AMSAA model Crow model model This continuous reliability growth formulation extended accommodate reliability data treating failure probability manner parallel failure intensity context nonhomogeneous Poisson process learning curve property structure imposed establish assumed pattern reliability growth The power law model simple analytical representation facilitates various analytic inferential action point estimation confidence bound construction procedure It also spawned number practical method addressing important test program acquisition oversight issue see Although practical us theoretical problem power law model One problem growth reliability taken continuous increasing testing progress change system reliability design made adhering assumed mathematical form transitioning one test phase The power law model used represent reliability bad old system Ascher Less common nomenclature Weibull process model originally motivated observation intensity function power law model coincides form failure rate function Weibull distribution The Weibull distribution however pertinent reliability growth setting For instance end reliability growth testing power law construct governing system distribution future system operation beyond cumulative test time exponential constant mean given reciprocal another reliability design enhancement implemented provide substantive upgrade system reliability The second reliability growth model recently used DoD based assumption large number failure mode failure mode operates independently cause system failure rate In model failure mode observed testing subsequently removed system design enhancement failure rate reduced specific discreet point time continuously Crow model If fix introduce new failure mode reliability grows step function To unify probabilistic behavior failure mode prior corrective action additional assumption imposed For example system convenient portray failure mode performance using Bernoulli distribution associated success probability drawn common Beta distribution Hall et Likewise failure mode continuously operating system taken governed exponential distribution failure rate drawn parent Gamma distribution Ellner Hall Failure mode discovered testing categorized either Type A Type B corresponding respectively corrective action undertaken often cost feasibility prohibition For implemented reliability enhancement corresponding failure rate failure probability assumed reduced known fix effectiveness factor based input expert historical data Although number distinct failure mode unknown tractable result obtained considering limit count allowed approach infinity The power law failure model viewed convenient framework facilitate application statistical method analysis reliability test data evaluation reliability testing program But arbitrarily mandated capriciously imposed Due consideration need given plausibility underlying assumption possibility nonconforming reliability testing data Sen Bhattachrayya developed plausible reliability growth model consistent learning curve property allows reliability increase discrete step system design improvement instituted Only one fundamental assumption statistical independence invoked two failure discount estimation scheme introduced Lloyd used ass system reliability certain class DoD missile Simulation study however indicate estimator strongly positively biased especially true system reliability increasing modestly testing program Drake Fries Sen For specific extension methodology based primary power law process Crow capture effect unobserved failure mode assuming second power law representation governs first time failure individual failure mode observed unobserved especially given variance testing circumstance potential sensitivity analytical result conclusion Reliability growth model used plan scope developmental test specifically much testing time devoted provide reasonable opportunity system design mature sufficiently developmental testing Department Defense Intuitively key factor determination include reliability goal achieved end developmental testing say anticipated initial system reliability beginning developmental testing say rate growth developmental testing The structure power law formulation directly embrace growth parameter component conceptualization limit failure intensity function especially approaching coincide physical reality Nonetheless benefit mathematically convenient constraint imposed initial phase testing power law process provides mechanism assessing total number developmental testing hour needed growing system reliability extension methodology support quantification level required demonstrate attainment system reliability target prescribed level statistical confidence Other extension accommodate testing focused individual subsystem growth growth incorporating analytical aggregation quantify reliability statistical confidence system level A drawback approach programmatic risk sensitive length first developmental testing event These shortcoming shared test planning methodology based examination individual failure mode see Department Defense That methodology relies planning parameter directly influenced program management fraction initial failure rate failure probability addressable corrective action management strategy average fix effectiveness factor average delay associated implementation corrective action display typical planning curve examination individual failure mode highlighting input illustrating key Testing analysis subsystem level appropriate system functionality added increment time opportunity system testing limited operational scenario tested piecemeal segment irregularly Such aggregation however need carefully scrutinized especially deviation nominal assumption effect robustness reliability growth planning curve NOTES DT developmental testing IOTE initial test operation evaluation OT operational testing MTBF mean time failure See text discussion SOURCE Department Defense Figure tures The idealized projection curve artificial construct assumes observed failure identified correction immediately subjected fix It transformed system reliability target individual developmental testing event The number event respective allocation testing hour across individual event variable planner adjust A corrective action period ordinarily follows testing phase reliability design improvement implemented A nominal lag period precedes period accordance notion occurrence failure near end test phase offer adequate time diagnosis redesign effort The final developmental testing reliability goal hour mean time failure higher assumed operational reliability initial operational test evaluation hour mean time operational mission failure percent reduction This difference accommodate potential failure mode unique operational testing source developmental test gap Likewise planned value initial operational test evaluation operational reliability higher operational reliability requirement hour mean time operational mission failure providing degree confidence requirement demonstrated initial operational test evaluation reducing consumer risk We note model currently mandated use result memorandum issued June Improving Reliability Army Materiel Systems state Program Managers PMs Acquisition Category I ACAT I system ACAT II system sponsor determined reliability attribute operational importance shall place reliability growth planning curve SEP TEMP Engineering Manufacturing EMD contract ensure Army system resourced accomplish Reliability growth quantified reflected reliability growth planning curve using Planning Model based Projection Methodology Where warranted unique system characteristic Army Test Evaluation Command We note Figure preceding discussion treat reliability general sense simultaneously encompassing continuous discrete data case based mean time failure based success metric For simplicity subsequent exposition remainder chapter generally focus based mean time failure parallel structure similar commentary pertain system discrete performance Not corrective action implemented following test period require longer time period development incorporation The document available August ATEC consultation Project Manager PM may specify alternative reliability growth planning method A reliability growth planning curve important developing overall strategy testing evaluation defining individual testing event determining requisite supporting resource providing series reliability target tracked judge progress reliability growth The Director Operational Test Evaluation DOT E requires reliability growth curve appear system Test Evaluation Master Plan TEMP prescribe specific mechanism plan developed As program milestone achieved response unanticipated testing outcome reliability growth curve well entire TEMP expected updated The DOT E requirement presenting periodically revising formal reliability growth planning curve eminently reasonable To generate curve responsible program office follow existing standard method use approach deems suitable What important practice proposed reliability growth curve fully integrated overall system development test evaluation strategy accommodating performance issue related reliability recognizes potential sensitivity underlying analytical assumption retains adequate flexibility respond emerging testing result There three key element reliability growth curve warrant emphasis First provide mechanism early check adequacy system design reliability Second rough adherence planning curve position developmental program initial operational test evaluation test demonstrate attainment operational reliability requirement high confidence Third since construction planning curve rest numerous assumption may turn incompatible subsequent testing experience sensitivity robustness modeling need understood modification made warranted Once developmental program begin testing reliability growth methodology available estimating model parameter constructing curve portray demonstrated reliability evolved In extreme given general sense developmental testing time available particular system customary nature development test ordinarily undertaken class system one could imagine divining simple fit potentially suitable smooth curve trace established mark compare planned trajectory projecting system reliability estimate beyond achieved date Department Defense There natural inclination reliability analyst routinely invoke method especially faced budget constraint schedule demand cry efficiency testing evaluation using available data Likewise instinctive desire program management oversight agency closely monitor program progress support decision backed high confidence analysis In setting reliability growth method prospect accessible data simple equation application dedicated software package It sensible view reliability growth methodology potential tool supporting assessment system reliability assumed advance single definitive mechanism underpinning analysis Comprehensive evaluation system reliability would consider spectrum testing circumstance relation operational profile exhibited failure mode rate individual test article collection rather merely system failure time insight reliability design engineer observation system operator multiple potentially important factor germane specific system development Subsequently due diligence may determined standard reliability growth method provide reasonable approach addressing specific analytical issue conveniently portraying conclusion There number reason reliability result recorded course developmental testing may match target value threshold prescribed advance associated reliability growth planning curve Not difference translate alarm system reliability problematic deficient one assume close conformity developmental testing result reliability planning curve ensures adequacy system operational reliability developmental test may unrepresentative stressful operational circumstance Again detailed understanding testing condition extent divergence operationally realistic environment use critical meaningful interpretation Benign test type laboratory chamber testing common early developmental testing may yield inflated reliability result When followed testing characterized realistic load stress apparent trend may suggest system reliability decline Similar deviation either upwards downwards may evident midst developmental testing program severity environment use profile changed test test Even intent uniform testing prescribed profile use tie anticipated Crow present method checking consistency use profile intermediate convergence point expressed term accumulated testing time vehicle mileage cycle completed etc accordingly adjusting planned testing When system functionality added incrementally software module added developed testing advanced system configuration may exhibit relative degradation system unreliability new aspect system dominates enhancement incorporated response observation immediately preceding test event Similar effect possible system operationally interface external system element part subject system development one peripheral system modified perhaps part developmental cycle interface failure formally chargeable subject system occur testing subject system There situation demonstrated system reliability fall far short planned careful review likely candidate disappointing performance combination initially deficient reliability design inadequate reliability enhancement program For example number system reliability failure recorded system first developmental testing event may well beyond envisioned initial test even may far exceed planned entire developmental testing program complete set planned test Unfortunately common outcome recent history DoD reliability testing Another disturbing situation test event reliability estimate stagnate well targeted value count new failure mode continue increase A visually detectable major departure planning curve could provide triggering mechanism instituting program review Supporting statistical evidence provided constructed confidence bound associated hypothesis test formal assessment estimated remaining growth potential system reliability deducing theoretical upper limit system reliability could obtained within defined testing program The growth potential calculation could indicate little chance program succeed unless major system redesigns institutional reliability management procedure implemented essentially constituting new reliability growth program Alternatively could show strong evidence would compel program intervention Determining system reliability growth potential type forecasting functionally extrapolating forward ultimate attainable limit Another documented projection methodology essentially estimate system level reliability demonstrated completed reliability growth testing giving additional credit last set implemented reliability improvement These approach rely value fix effectiveness factor provided expert If effect unobserved failure mode ignored positively biased estimate produced There present associated statistical confidence bound procedure situation setting would seem amenable application bootstrap Bayesian technique estimate system reliability offer potential recourse conducted growth testing indicates achieved reliability fall short critical programmatic mark If shortfall significant inherent subjectivity uncertainty provided fix effectiveness factor naturally limit credibility demonstration compliance Supplementary independent reliability engineering analysis dedicated confirmatory technical testing testing may warranted This description current state reliability growth modeling highlight issue concerning validity model Two key concern time test often good predictor linking time system reliability reliability growth model generally fail represent test circumstance These two criticism raise concern applicability model As noted DoD currently us reliability growth model three important purpose First prior development used budget number hour testing needed grow reliability conjectured result initial design work level operational requirement Because little known system early point development one specify clearly superior method thus use reliability growth model role parameter central specific invoked reliability growth model plausibly achievable based experience similar class system In case nonhomogeneous Poisson process model good approach would select growth parameter examining growth observed system similar structure including component essentially identical already developmental operational testing The panel could determine whether approach currently commonplace Second development reliability growth model used combine reliability assessment test event track current level reliability attained Again application reliability growth methodology validation inherent model assumption However seems though many case reliability growth model serve merely curve fitting mechanism In circumstance doubt reliability growth model would found clearly superior straightforward regression approach Third reliability growth model offer forecasting predict either time required reliability level ultimately attained reliability realized specific time Here question concerning validity reliability growth model greatest concern extrapolation severe test interpolation Consequently panel support use model prediction absent comprehensive validation If validation carried panel think likely regularly demonstrate inability model predict system reliability past near future This page intentionally left blank A high percentage defense system fail meet reliability requirement This serious problem Department Defense DOD well nation Those system le likely successfully carry intended mission also could endanger life operator Furthermore reliability failure discovered deployment result costly strategic delay need expensive redesign often limit tactical situation system used Finally system fail meet reliability requirement much likely need additional scheduled unscheduled maintenance need spare part possibly replacement system substantially increase cost system Beginning DOD undertook concerted effort raise priority reliability greater use design reliability technique reliability growth testing formal reliability growth modeling contractor DOD unit To end handbook guidance formal memoranda revised newly issued reduce frequency reliability deficiency defense system operational testing effect deficiency evaluates recent change generally ass current DOD principle practice could modified increase likelihood defense system satisfy reliability requirement This report examines change reliability requirement proposed system defines modern design testing reliability discus contractor role reliability testing summarizes current state formal reliability growth modeling The recommendation improve reliability defense system protect health valuable personnel operate You looking OpenBook online reading room since Based feedback user made improvement make easier ever read thousand publication website Do want take quick tour OpenBook feature Show book jump chapter name use button go back chapter skip one Jump page one Also type page number press go directly page book Switch read report appeared print web version highlight search text To entire text book type search term press link book page preferred social network via email View chapter Ready take reading offline Click book print free PDF available Do enjoy reading report Academies online Sign email notification let know new publication area interest released A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition A lot importance attached testing phase Software Development Life Cycle SDLC It phase checked whether software product meet user requirement Any discrepancy identified removed But testing need monitored increase effectiveness Software Reliability Growth Models SRGMs specify mathematical relationship failure phenomenon time proved useful SRGMs include factor affect failure process realistic useful Software fault detection removal testing phase SDLC depend testing resource test case manpower time used also previously identified fault With motivation Poisson Process NHPP based SRGM proposed paper flexible enough describe various software curve Both testing effort time dependent fault detection rate FDR considered software reliability modeling The time lag fault identification removal also depicted The applicability model shown validating software failure data set obtained different real software development project The comparison established model term goodness fit Akaike Information Criterion AIC Mean Squared Errors MSE etc presented The software testing process basically aim building confidence software use real world application The reliability software system always important u As carry error detection correction phenomenon software reliability software grows With aim model growth software reliability many formulation form Software Reliability Growth Models proposed Many based Poisson Process framework In paper parallel comparison performance proposed software reliability growth model carried considering linear exponential fault content function study imperfect debugging situation The performance proposed model compared famous existing software reliability model proposed model validated datasets Three criterion include mean square error risk predictive power used carry performance comparison model Using comparison criterion six actual failure datasets concluded proposed always outperforms fit actual failure data better better predictive power considered SRGMs least two data set Registered England Wales No Howick Place London This website us cooky ensure get best experience website RGA Reliability growth repairable system analysis today ReliaSoft RGA powerful software tool allows apply reliability growth model analyze data developmental testing fielded repairable system In development stage software allows quantify reliability growth achieved successive design prototype also provides advanced method reliability growth projection planning management For system operating field RGA allows calculate optimum overhaul time result without detailed data set normally would required repairable system analysis The development RGA joint effort ReliaSoft leading authority field reliability growth analysis along key development partner government industry This collaboration resulted software package major reliability growth model plus formulation available anywhere else RGA includes full support traditional reliability growth analysis using applicable model NHPP Duane Gompertz Modified Gompertz Logistic variety developmental data type discrete reliability data In addition software provides exclusive support innovative approach facilitate reliability growth projection reliability growth program planning reliability growth analysis RGA help create operational test plan effectively balance mission profile need tested make sure testing yield data appropriate reliability growth analysis The software also provides opportunity fielded repairable system analysis including Reliability Demonstration Test RDT utility method analyzing system reliability behavior time order calculate optimum overhaul time metric interest With integration Synthesis Platform analysis stored centralized database support simultaneous access multiple user share relevant reliability information software tool For repository Microsoft SQL supported ReliaSoft offer comprehensive training course address topic applying reliability growth model analyze developmental testing data also fielded repairable system By combining solid theoretical foundation practical application example software training course give knowledge skill need successfully apply important reliability technique ReliaSoft RGA reliability growth repairable system data analysis software provides comprehensive platform application reliability growth model analysis developmental test data fielded repairable system Some many useful application include ability Windows English French German Portuguese Spanish Simplified Chinese Copyright HBM Prenscia All Rights Reserved  
Requirements Management Rich Text Format (RM-RTF)	IBM Knowledge Center us JavaScript Scripting appears disabled supported browser Enable JavaScript use try Please note DISQUS operates forum When sign comment IBM provide email first name last name DISQUS That information along comment governed By commenting accepting Office unlocks potential device brings best The versatile laptop KB MB Windows Server Windows Vista Windows XP Service Pack Payment Card Industry Data Security Standard PCI DSS compliance adherence set policy procedure developed protect credit debit cash card transaction prevent misuse cardholder personal information text file format used Microsoft product Word Office RTF file developed Microsoft use product document interchange RTF readable word processor RTF file support text style formatting well image within text RTF file converted different format changing formatting selection saving word document Read file Search answer question Ask peer question file extension By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States An internal audit IA organizational initiative monitor analyze business operation order determine Pure risk also called absolute risk category threat beyond human control one possible outcome Risk assessment identification hazard could negatively impact organization ability conduct business Phishing form fraud attacker masquerade reputable entity person email communication Vulnerability disclosure practice publishing information computer security problem type policy Incident response organized approach addressing managing aftermath security breach cyberattack also Fast Healthcare Interoperability Resources FHIR interoperability standard electronic exchange healthcare The Office National Coordinator Health Information Technology abbreviated ONC entity within Precision medicine PM rapidly evolving development healthcare physician caregiver consider Business continuity disaster recovery BCDR closely related practice describe organization preparation A business continuity plan BCP document consists critical information organization need continue A call tree sometimes referred phone tree telecommunication chain notifying specific individual Copy data management CDM approach reducing storage consumption involves eliminating unnecessary duplication OpenStack Block Storage Cinder open source software designed create manage service provides persistent data SATA Express SATAe Serial ATA Express bus interface connect storage device computer motherboard supporting TLC flash cell flash type NAND flash memory store three bit data per cell cell SLC flash type storage store one bit data per cell flash medium cell flash type NAND flash memory store bit per cell All Rights Reserved The Rich Text Format RTF Specification method encoding formatted text graphic easy transfer application Currently user depend special translation software move document different Windows Macintosh Power Macintosh application The RTF Specification provides format text graphic interchange used different output device operating environment operating system RTF us ANSI Macintosh IBM PC character set control representation formatting document screen print With RTF Specification document created different operating system different software application transferred operating system application RTF file created Word later Macintosh Power Macintosh file type RTF Software take formatted file turn RTF file called writer An RTF writer separate application control information actual text writes new file containing text RTF group associated text Software translates RTF file formatted file called reader Included RTF specification sample RTF reader application see Appendix A Sample RTF Reader Application beginning page document It designed use specification assist user developing RTF reader The file included Application Note contains sample RTF reader program This file use described Appendix A The sample RTF reader product Microsoft provide technical type support sample RTF reader code RTF specification RTF Version updated include new control word introduced Microsoft Word Windows version Word Windows An RTF file consists unformatted text control word control symbol group For ease transport standard RTF file consist ASCII character Converters communicate Microsoft Word Windows Microsoft Word Macintosh expect character There set maximum line length RTF file A specially formatted command RTF us mark printer control code information application use manage document A control word longer character A control word take following form Note backslash begin control word The LetterSequence made lowercase alphabetic character z inclusive RTF case sensitive RTF control word must lowercase The delimiter mark end RTF control word one following A space In case space part control word A digit hyphen indicates numeric parameter follows The subsequent digital sequence delimited space character letter digit The parameter positive negative number The range value number generally However Word tends restrict range Word allows value range small number keywords specifically picture property An RTF parser must handle arbitrary string digit legal value keyword If numeric parameter immediately follows control word parameter becomes part control word The control word delimited space nonalphabetic nonnumeric character manner control word Any character letter digit In case delimiting character terminates control word actually part control word If space delimits control word space appear document Any character following delimiter including space appear document For reason use space necessary use space merely break RTF code A consists backslash followed single nonalphabetic character For example represents nonbreaking space Control symbol take delimiters A consists text control word control symbol enclosed brace The opening brace indicates start group closing brace indicates end group Each group specifies text affected group different attribute text The RTF file also include group font style screen color picture footnote comment annotation header footer summary information field bookmark well property If font file style revision mark group property included must precede first character document These group form RTF file header If group font included precede group style If group used omitted The group discussed following section The control property certain control word bold italic keep together two state When control word parameter nonzero parameter assumed control word turn property When control word parameter assumed control word turn property For example turn bold whereas turn bold Certain control word referred mark beginning collection related text could appear another position destination within document Destinations may also text used appear within document An example destination group footnote text follows control word Page break occur destination text Destination control word following text must enclosed brace No control word text may appear within destination group Destinations added RTF Specification published March may preceded control symbol This control symbol identifies destination whose related text ignored RTF reader recognize destination RTF writer follow convention using control symbol adding new destination group Destinations whose related text inserted document even RTF reader recognize destination use All destination included March revision RTF Specification shown part control word Formatting specified within group affect text within group Generally text within group inherits formatting text preceding group However Microsoft implementation RTF assume footnote annotation header footer group described later chapter inherit formatting preceding text Therefore ensure group always formatted correctly set formatting within group default control word add desired formatting The control word control symbol brace constitute control information All character file plain text Here example plain text exist within group The phrase This plain text part group treated document text As previously mentioned backslash brace special meaning RTF To use character text precede backslash The reader RTF stream concerned following Separating control information plain text Acting control information Collecting properly inserting text document directed current group state Acting control information designed relatively simple process Some control information simply contributes special character plain text stream Other information serf change includes property document whole change collection apply part document As previously mentioned group state specify following The part document plain text constructing property bold italic property justified centered property number column property define number cell dimension table row In practice RTF reader evaluate character read sequence follows If character opening brace reader store current state stack If character closing brace reader retrieves current state stack If character backslash reader collect control word control symbol parameter look control word control symbol table map control word action It carry action prescribed table The possible action discussed The read pointer left delimiter appropriate If character anything opening brace closing brace backslash reader assumes character plain text writes character current destination using current formatting property If RTF reader find particular control word control symbol table described control word control symbol ignored If control word control symbol preceded opening brace part group The current state saved stack state change occur When closing brace encountered current state retrieved stack thereby resetting current state If control symbol precedes control word defines destination group preceded opening brace The RTF reader discard text including closing brace close group All RTF reader must recognize destination defined March RTF Specification The reader may skip past group allowed simply discard control word Destinations defined since March marked control symbol For control word control symbol RTF reader find table possible action follows This Application Note describes RTF using following syntax based Form An RTF file following syntax This syntax standard RTF syntax RTF reader must able correctly interpret RTF written syntax It worth mentioning RTF reader use control word must able harmlessly ignore unknown unused control word must correctly skip destination marked control symbol There may however RTF writer generate RTF conform syntax RTF reader robust enough handle minor variation Nonetheless RTF writer generates RTF conforming specification correct RTF reader able interpret The header following syntax header Each various header table appear exist order Document property occur header table A property must defined referenced Specifically The style sheet must occur style usage The font table must precede reference font The keyword must precede text without explicit reference font specifies font use case An entire RTF file considered group must enclosed brace The control word must follow opening brace The numeric parameter identifies major version RTF Specification used The RTF standard described Application Note although titled version continues correspond syntactically RTF Specification version Therefore numeric parameter control word still emitted After specifying RTF version must declare character set used document The control word character set must precede plain text table control word The RTF Specification currently support following character set This keyword emitted RTF header section right keyword Notice use keyword force old RTF reader pick ANSI representation discard Unicode one This keyword followed immediately equivalent character ANSI representation In way old reader ignore keyword pick ANSI representation properly When keyword encountered reader ignore next character corresponds last value encountered As RTF keywords space may present ANSI character counted character skip While likely occur recommended keyword argument binary data follows considered one character skipping purpose If RTF scope delimiter character opening closing brace encountered scanning skippable data skippable data considered ended delimiter This make possible reader perform rudimentary error recovery To include RTF delimiter skippable data must represented using appropriate control symbol escaped backslash plain text Any RTF control word symbol considered single character purpose counting skippable character An RTF writer encounter Unicode character corresponding ANSI character output followed best ANSI representation manage Also Unicode character translates ANSI character stream count byte differing current Unicode Character Byte Count emit keyword prior keyword notify reader change RTF control word generally accept signed number argument For reason Unicode value greater must expressed negative number A common practice emit ANSI representation Unicode character within Unicode destination context inside destination Typically destination contain control sequence There need reset count leaving destination scoping rule ensure previous value restored Document text emitted ANSI character If Unicode character corresponding ANSI character output using keywords For example text Unicode character represented follows assuming previous Destination text defined text represented RTF destination A good example bookmark name destination Any destination containing Unicode character emitted two destination within destination ensure old reader read properly Unicode character encoding lost read new reader For example bookmark name Unicode character represented follows The first contains ANSI character representation old reader see The second destination contains second copy destination This copy contain Unicode character representation reader must pay attention ignoring version The control word introduces font table group Unique control word define font available document used reference font throughout document This group syntax listed following table codepage fontname fontaltname Note fontemb either fontfname data must present although may present All font available RTF writer included font table even document use font RTF also support font family application attempt intelligently choose font exact font present reading system RTF us following control word describe various font family If RTF file us default font default font number specified control word must precede group The RTF writer supply default font number used creation document numeric argument The RTF reader translates number font table similar font available reader system The following control word specify character set alternative font name pitch font font table font name If specified argument one following value RTF support embedded font group located inside font definition An embedded font specified file name actual font data may located inside group If file name specified contained group The control word used specify character set file name RTF support embedded font The type embedded font described following control word A font may different character set character set document For example Symbol font character position Macintosh Windows RTF describes control word name character set used font In addition file name used field instruction embedded font may necessarily character set document control word change character set file name well However RTF document must still declare character set maintain backward compatibility earlier RTF reader The table describes valid value The control word introduces file table destination The time file table created RTF document contains subdocuments This group defines file referenced document following syntax Note file name valid alphanumeric string named file system indicating complete path file name The control word introduces color table group defines screen color character color color information This group following syntax The following valid control word group Each definition must delimited semicolon even definition omitted If color definition omitted RTF reader us default color The example defines default color table used Word The first color omitted shown semicolon following control word The missing definition indicates color color The foreground background color use index color table define color For information color setup see Windows documentation The following example defines block text color supported Note index index entry color table represents color combination If file translated software display color reader ignores color table group The control word introduces style sheet group contains definition description various style used document All style document style sheet included even style used In RTF style form shorthand used specify set character paragraph section formatting The group following syntax For style styledef stylename optional default paragraph style Note stylename Microsoft Word Macintosh interprets comma PCDATA separating style synonym Also key data must exactly one character menu click The following example RTF style sheet RTF paragraph style applied Some control word example discussed later section In example note property style emitted following application style This done two reason allow RTF reader support style still retain formatting allow additive model style additional property change added top defined style Some RTF reader may apply style upon encountering style number without accompanying formatting information Word store bullet numbering information differently earlier version Word In Word example number formatting data stored individually paragraph In Word however formatting information stored pair list table act style sheet individual paragraph store index one table like style index There two list table Word List table destination List Override table destination The first table Word store List table A List table list list destination Each list contains number list property pertain entire list list level destination contains property pertain level Each list consists either one nine list level depending upon whether flag set Each list level contains number property specify formatting level value text string surrounding number justification indent Arabic Uppercase Roman numeral I II III Lowercase Roman numeral ii iii Uppercase letter A B C Lowercase letter b c Ordinal number Cardinal text number One Two Three Ordinal text number First Second Third Arabic leading zero Bullet number No number Center justified Right justified level place holder index This destination control word Tab Space Nothing In addition property list level contain character property affect text level combination three paragraph property left indent first line left indent tab must special type These paragraph property automatically applied paragraph list The List Override table list list override destination Each list override contains one list List table well list property chooses override Each paragraph contain list override index keyword index table Most list override override property instead provide level indirection list There generally two type list override formatting override allow paragraph part list numbered along member list different formatting property override allow paragraph share formatting property list different value The first element document list override index take value list override specifies value subsequent element assigned number succeeding previous element list List override keywords including contains count number level whose format overridden This always either depending upon whether list overridden simple multilevel All actual override information stored within list list override level destination Each list override level contains flag specify whether formatting value overridden level If format flag given also contain list level If flag given value must provided If overridden format provided If format overridden put inside contained This table allows tracking multiple author reviewer document used conjunction character property tracking change using revision mark Revision conflict one author deleting another addition stored one group following form The byte DTTM structure emitted ASCII character value greater emitted hexadecimal value enclosed quotation mark All time reference revision mark use following bit field structure DTTM Once RTF header defined RTF reader enough information correctly read actual document text The document area following syntax The control word introduces information group contains information document This include title author keywords comment information specific file This information use utility available This group following syntax Some application Word ask user type information saving document native format If document saved RTF file translated RTF RTF writer specifies information using following control word These control word destination control word text enclosed brace The control word introduces document property Unique control word define property document The group following syntax For argument following value The RTF writer may automatically enter control word including following Any control word described previous table numeric parameter specifies date date specified control An example information group follows After information group may document formatting control word described docfmt document area syntax description These control word specify attribute document margin footnote placement These attribute must precede first character document The control word specify document formatting listed following table measurement twips twip point For omitted control word RTF us default value General Document formatting document default Letter formatting letter used Letter Wizard formatting used WordMail None Page Layout view Outline view Master Document view Normal view Online Layout view None Full page Best fit Footnotes nothing default Endnotes Footnotes endnotes For backward compatibility emitted emitted along reader understand need ignore control word use endnote control word instead size height Note three control word mutually exclusive one three apply given document Also currently method storing password RTF document associate password protection level lose password protection RTF For information bidirectional control see Bidirectional Language Support Application Note Page border measure edge page option set Page border measure edge page option set The color width border style border spacing keywords page border keywords defined paragraph border Each section RTF file following syntax At beginning section may control word described secfmt section text syntax description These control word specify property apply text control word exception control word beginning control word describe break text These control word appear anywhere section start Note control word present current section inherits section property defined previous section The control word listed following table Text flow left right top bottom Text flow top bottom right left vertical Text flow left right bottom top Text flow right left top bottom Text flow left right top bottom vertical Text flow vertically font Page border measure edge page option set Page border measure edge page option set The color width border style border spacing keywords page border keywords defined paragraph border Headers footer RTF destination Each section document set header footer If header footer defined given section header footer previous section used Headers footer following syntax Note separate hdrftr group must distinct hdrctl introducing The control word used conjunction control word control word used conjunction control word Many RTF reader function correctly appropriate document property set In particular set used set used Combining allowed You use set header page set You use set header appear For information see Document Formatting Properties page Section Formatting Properties page Application Note If previous section first page header footer set current section previous section first page header footer disabled However destroyed subsequent section set first page header footer restored There two kind paragraph plain table A table collection paragraph table row continuous sequence paragraph partitioned cell The control word identifies paragraph part table For information see Table Definitions page Application Note This control inherited paragraph paragraph property reset These control word described parfmt syntax description specify generic paragraph formatting property These control word appear anywhere body paragraph beginning Note control word present current paragraph inherits paragraph property defined previous paragraph The control word listed following table At Least Exactly line spacing Multiple line spacing relative Single Any paragraph may set tab Tabs must follow syntax To provide compatibility existing RTF reader application automatically format paragraph bullet number also emit generated text plain text group This allow existing RTF reader capture plain text safely ignore autonumber instruction This group precedes bulleted numbered paragraph contain text formatting would It precede destination responsibility RTF reader understand destination ignore group Settings marked asterisk turned appending control word Note limit character total sum text text simple numbering Multilevel numbering limit character total sum level Each paragraph part list must contain keyword indicate list level list belongs Word also provides flat text representation number destination RTF reader understand Word numbering get paragraph number along appropriate character property inserted document beginning paragraph Any RTF reader understand Word numbering ignore entire destination Paragraph number ListNum field track revision information special property applied paragraph mark ListNum field respectively The special property hold old value number value held tracking began At display time Word check current value compare old value tell changed If number different old value show deleted new value inserted number Word display new value normally revision information If old value new value show inserted The following table list RTF specification special property This keyword used indicate paragraph number revision Unicode character array double byte character length byte first number actual text number level place holder written digit Let take example number represents third level list The following table list value array Here RTF number This keyword used indicate deleted value ListNum field Let take sample example The deleted value The RTF would length byte Unicode Unicode Unicode Paragraph border following syntax Paragraph shading following syntax The following control word specify location paragraph page Consecutive paragraph frame formatting considered part frame For two framed paragraph appear position page must separated paragraph different frame information Note paragraph table row control word specified paragraph table row must control word specified either inheriting property previous paragraph control Paragraph positioning following syntax drop cap Margin drop cap The following example text document There RTF table group instead table specified paragraph property A table represented sequence table row A table row continuous sequence paragraph partitioned cell The table row begin control word end control word Every paragraph contained table row must control word specified inherited previous paragraph A cell may one paragraph cell terminated cell mark control word row terminated row mark control word Table row also positioned In case every paragraph table row must positioning control see apoctl control page Application Note Table property may inherited previous row therefore series table row may introduced single tbldef An RTF table row following syntax shown general syntax shown page Application Note A table definition following syntax Note tbldef number must match number The following control word define option row table The following example table text Character text following syntax These control word described chrfmt syntax description change font character formatting property A control word preceding plain text turn specified attribute Some control word indicated following table asterisk following description turned control word followed For example turn bold turn bold The font character control word listed following table Las Vegas Lights Blinking background Sparkle text Marching black ant Marching red ant Shimmer The following table defines standard language used Microsoft This table generated Unicode group use TrueType Unicode To read negative value Word Macintosh RTF reader use bit value read Word Macintosh emit negative value Instead treat value respectively bit Character shading following syntax The color width border style keywords character border keywords paragraph border This keyword used indicate formatting revision bold italic text processor often need associate Latin font Arabic Hebrew font The association needed match commonly used pair font name size attribute Although RTF defines broad variety associated character property implementation may choose implement particular associated character property share property Latin Arabic font Property association us following syntax Here example property association This run Text use default bidirectional font underlined The font associated run font font table bolding underlining This run The font font use default font specified This run The font font bold italicized The font default font underlined If reader support underlining associated font font underlined The property association control word described aprops syntax description listed following table Some control word indicated following table asterisk following description turned control word followed This property applies highlighting text The formatting character format part style definition For argument following value The RTF Specification includes control word special character described spec syntax description If control word recognized RTF reader ignored text following considered plain text The RTF Specification flexible enough allow new special character added interchange software The special RTF character listed following table A carriage return character value linefeed character value treated control character preceded backslash You must include backslash otherwise RTF ignores control word You may also want insert pair without backslashes least every character better text transmission communication line A tab character value treated control word Not RTF reader understand therefore RTF writer always emit control word tab The following code value special character listed Document variable definable accessed macro The group following syntax This destination may specify one two control word indicates start specified bookmark indicates end specified bookmark Bookmarks following syntax A bookmark shown following example The bookmark start bookmark end matched bookmark tag In example bookmark tag paradigm Each bookmark start matching bookmark end however bookmark start bookmark end may order used denote first column table covered bookmark If included first column assumed used denote last column If used last column assumed These control used within destination following control For example place bookmark column table An RTF file include picture created application These picture hexadecimal default binary format Pictures destination begin control word The keyword preceded destination control keyword described following example A picture destination following syntax These control word described following table Some measurement table twips twip point The information included RTF Windows bitmap concatenation BITMAPINFO structure followed actual pixel data The information included RTF Windows bitmap result function For information function structure Windows bitmap see Microsoft Windows Software Development Kit For best interoperability Microsoft product however use control word discouraged Rather bitmap embedded within Windows metafiles control word used For information embedding bitmap within metafiles see Microsoft Windows Software Development Kit The control word optional If picture type specified picture assumed Windows bitmap If specified argument one following type For information type see volume Microsoft Windows Software Development Kit If specified argument one following type For information type see volume Be careful space following control word dealing picture binary format When reading file RTF considers first space control word delimiter subsequent space part document text Therefore extra space attached picture unpredictable result RTF writer use combination break picture binary format If combination treated literal text considered part picture data The picture hexadecimal binary format follows control word The following example illustrates destination format Microsoft OLE link Microsoft OLE embedded object Macintosh Edition Manager subscriber object represented RTF object Objects destination contain data part result part The data part generally hidden application produced document A separate application us data supply appearance data This appearance result part object The representation object RTF designed allow RTF reader understand object use particular type object use current result place object This allows appearance object maintained conversion even though object functionality lost Each object come optional information object required destination contains object data optional result contains current appearance object This result contains standard RTF It important responsibility RTF writer provide result existing RTF reader either support object support particular type object able display object When object OLE embedded linked object data part object structure produced function Some OLE client rely OLE system render object copy result available RTF writer application For case object result extracted structure produced For information function see Microsoft Object Linking Embedding Software Development Kit The syntax destination When Word used editor Mail following control word emitted It seen situation Word Macintosh writes publisher object Macintosh Edition Manager term bookmark see Bookmarks page Application Note The range publisher object marked bookmark control used within destination The RTF syntax publisher object Drawing object drawing primitive enumerated within drawing object group use syntax described following table Note dpgroup number dpinfo equal argument whereas dppolyline number dppt equal argument The following element syntax pertain specifically callout object The remaining element drawing object syntax property applied individual drawn primitive The following table describes control word drawing object group detail All color value value All distance twips All value indicated drawn Small Medium Large Small Medium Large Small Medium Large Small Medium Large The following value available specifying fill pattern drawing object control word The basic format drawing object RTF follows The first destination always present This control word group everything related shape together Following destination change come basic information regarding shape The following keywords value appear order control word Wrap around top bottom shape text allowed beside shape Wrap around shape None wrap shape present Wrap tightly around shape Wrap text shape Wrap side shape Wrap left side Wrap right side Wrap largest side Text shape Shape text For linked text box first text box linked set entire story following text box field Inside field would generated shape field field describes entire group For example A substituted place accomplish group inside group With exception apply shape within group For information group see Introduction section Applicaiton Note The control word followed The bulk shape defined series property Following list property shape following format The control word drawing object property Each property pair name value control word placed shape property group For example vertical flip property represented Here name property value indicates All shape property follow basic format Only property explicitly set shape written RTF format Other property assume default value property may set default value explicitly The following table describes name property drawing object along type corresponding value Square Tight None Top Bottom Through Top Middle Bottom Top Centered Middle Centered Bottom Centered Bottom Centered Baseline Horizontal font Top bottom ASCII font Bottom top font Top bottom font Horizontal ASCII font Stretch line text fit width Center text width Left justify Right justify Spread letter fit width Spread word fit width property ignored No link default Link file save document Link file save picture document A solid color A pattern bitmap A texture pattern color map A picture centered shape Shade start end point Shade bounding rectangle end point Shade shape outline end point Shade using fillAngle No link default Link file save document Link file save picture document allow arbitrary position texture relative proportion texture height width aligned arbitrary position shape relative proportion width height bounding box Note value fixed point fraction relevant width height Solid fill line color Patterned fill Textured fill Picture fill No link default Link file save document Link file save picture document Single line width Double line equal width Double line one thick one thin Double line reverse order Three line thin thick thin Solid Dash Windows Dot Windows Dash dot Windows Dash dot dot Windows Dot Dash Long dash Dash dot Long dash dot Long dash dot dot Nothing Arrow Stealth arrow Diamond Oval Open arrow Chevron arrow Double chevron arrow Narrow Medium Wide Short Medium Long Offset shadow Double offset shadow Rich perspective shadow cast relative shape Rich perspective shadow cast shape space Perspective shadow cast drawing space Emboss engrave If Boolean property default rotation restricted rotation final rotation result first rotating degree degree If final rotation result single rotation axis specified The value fraction geometry width height center geometry The value must absolute unit EMUs If rotation center bounding cube group otherwise rotation center The value value fraction geometry width height center geometry The value absolute unit Render wire frame Render bounding cube These value number specify position origin within shape bounding box multiple width height bounding box relative center displaced center When value applied actual transformed shape path used rather shape geometry compare shadow perspective value necessarily work geometry bounding box actual point This mean shape extends outside geometry bounding box text effect handled correctly calculation origin Right angle One segment Two segment Three segment Any angle degree degree degree degree Top Center Bottom Specified dxyCalloutDropSpecified The format value depends property name paired Many value simple single number Distances expressed EMU unit There EMU unit point hence inch Fractional fixed value expressed using unit whole Angles expressed fraction degree Colors bit color value Booleans two possible value Arrays formatted sequence number separated semicolon The first number tell size element array byte The number byte per element may When size element element represented group two number The second number tell number element array For example point square polygon written The property following possible value The following keywords related defining hyperlink hanging shape inside These specifically occur define property hyperlink They used like The three group order These provide three string needed describe hyperlink fully The control word introduces footnote Footnotes destination RTF A footnote anchored character immediately precedes footnote destination footnote move character anchored If automatic footnote numbering defined destination preceded footnote reference character identified control word No Microsoft product support footnote within header footer comment annotation Placing footnote within header footer comment annotation often result corrupted document Footnotes following syntax Here example destination containing footnote To indicate endnotes following combination emitted Existing reader ignore control word treat everything footnote For control word relating footnote see section titled Document Formatting Properties page Section Formatting Properties page Special Characters page Application Note RTF comment annotation two part author ID introduced control word annotation text introduced control word group enclosing part No Microsoft product support comment annotation within header footer footnote Placing annotation within header footer footnote often result corrupted document Each part annotation RTF destination Comments annotation anchored character immediately precedes annotation If annotation associated annotation bookmark following two destination control word precede follow bookmark The alphanumeric string long integer represents bookmark name Comments annotation following syntax An example annotation text follows Comments annotation may optional time stamp contained destination icon contained destination The control word introduces field destination contains text field Fields following syntax There several control word alter interpretation field These control word listed following table Two subdestinations required within destination They must enclosed brace begin following control word If instruction field contains file name control used define character set file name See Code Page Support page Application Note detail The control word included even result calculated reader even reader recognize field generally include value destination document A field result start table break RTF reader An example field text follows You use control word specify given field reference endnote For example following field RTF reference footnote The following example reference endnote If specified field form field destination appears part char contains binary data form field instruction For example Note destination requires prefix The field keywords ignored Text Check box List Auto Exact Regular text Number Date Current date Current time Calculation The control word introduces index entry Index entry RTF destination An index entry following syntax If text index entry formatted hidden text control word text put document well index For information control word see Character Formatting Properties page Application Note Similarly text subdestination described later section becomes part document formatted hidden text The following control word may also used The control word introduces table content entry used build actual table content The control word mark table content entry page number associated used place entry Table content entry destination following syntax As index entry text formatted hidden control word put document The following control word also used destination RTF support bidirectional writing order language Arabic The control described well appropriate section throughout Application Note Also refer associated character property defined Associated Character Properties page Application Note All control word relating bidirectional language support repeated convenience The hidden style property accessed using Visual Basic Applications Rich Text Format RTF let exchange file different different For example create file using Microsoft Word Windows save RTF file file name suffix send someone us WordPerfect Windows able open file read In case RTF capability may built word processor In others separate reader writer may required Download PDF learn skill Office admin remain relevant time collaboration automation appears winning Also find expert best Office management tip You forgot provide Email Address This email address appear valid This email address already registered Please You exceeded maximum character limit Please provide Corporate Address By submitting Email address I confirm I read accepted Terms Use By submitting personal information agree TechTarget may contact regarding relevant content product special offer You also agree personal information may transferred processed United States read agree The RTF Specification us ANSI Macintosh IBM PC character set It defines control word symbol serve common denominator formatting command When saving file Rich Text Format file processed RTF writer convert word processor markup RTF language When read control word symbol processed RTF reader convert RTF language formatting word processor display document The Specification copy located archive World Wide Web Consortium used create RTF reader writer Find content member offer By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States Microsoft Project Honolulu put GUI back spotlight system administrator felt left behind company Microsoft release Windows Server version twice year Businesses choose traditional Do let network traffic bottleneck slow data transfer branch office employee There two way use Windows computing technology help IT General Data Protection Regulation compliance snuff Apple put egg new storage basket release Apple File System first new system year It vital IT understand top Windows security tip protect corporate data user lurking cyber threat While general benefit public cloud increased scalability apply mobile apps way IaaS Backups critical cloud strategy store data important Explore automated backup Serverless computing boost flexibility reduce overall cloud cost To tap benefit though sure SQL Server Linux give IT shop greater flexibility limitation change way high Microsoft SQL Server becomes available October In addition version run Linux new feature include support Get equipped take advantage addition graph database feature SQL Server use graph structure represent All Rights Reserved Manage need epic user story feature product backlog series sprint using choice requirement management model based system engineering MBSE test management preferred level change tracking configuration management formal change control Manage need epic user story feature product backlog series sprint using choice requirement management model based system engineering MBSE test management preferred level change tracking configuration management formal change control Manage need epic user story feature product backlog series sprint using choice requirement management model based system engineering MBSE test management preferred level change tracking configuration management formal change control Manage need epic user story feature product backlog series sprint using choice requirement management model based system engineering MBSE test management preferred level change tracking configuration management formal change control Load user need external document data file user interview Engineer requirement verification data process Analyse quality coverage traceability automatically generate comprehensive report document metric KPIs Reuse share information project Full support feature driven development system support Load user need external document data file user interview Engineer requirement verification data process Analyse quality coverage traceability automatically generate comprehensive report document metric KPIs Reuse share information project Full support feature driven development system support Load user need external document data file user interview Engineer requirement verification data process Analyse quality coverage traceability automatically generate comprehensive report document metric KPIs Reuse share information project Full support feature driven development system support Load user need external document data file user interview Engineer requirement verification data process Analyse quality coverage traceability automatically generate comprehensive report document metric KPIs Reuse share information project Full support feature driven development system support Extend requirement test management model based system engineering MBSE Build model using choice SysML SASD UML ADARTS architecture eFFBD IDEF process notation Reuse share link model product variant build architecture agile sprint Link requirement test issue defect information Get traceability across entire process one tool Extend requirement test management model based system engineering MBSE Build model using choice SysML SASD UML ADARTS architecture eFFBD IDEF process notation Reuse share link model product variant build architecture agile sprint Link requirement test issue defect information Get traceability across entire process one tool Extend requirement test management model based system engineering MBSE Build model using choice SysML SASD UML ADARTS architecture eFFBD IDEF process notation Reuse share link model product variant build architecture agile sprint Link requirement test issue defect information Get traceability across entire process one tool Extend requirement test management model based system engineering MBSE Build model using choice SysML SASD UML ADARTS architecture eFFBD IDEF process notation Reuse share link model product variant build architecture agile sprint Link requirement test issue defect information Get traceability across entire process one tool Full traceability part every version source document engineering work every part every version project deliverable Have assurance guaranteed completeness consistency project formal documentation Full traceability part every version source document engineering work every part every version project deliverable Have assurance guaranteed completeness consistency project formal documentation Full traceability part every version source document engineering work every part every version project deliverable Have assurance guaranteed completeness consistency project formal documentation Full traceability part every version source document engineering work every part every version project deliverable Have assurance guaranteed completeness consistency project formal documentation Connect project Work Breakdown Structure WBS system engineering data collect actual progress directly form engineering team project plan maintain project risk register Connect project Work Breakdown Structure WBS system engineering data collect actual progress directly form engineering team project plan maintain project risk register Connect project Work Breakdown Structure WBS system engineering data collect actual progress directly form engineering team project plan maintain project risk register Connect project Work Breakdown Structure WBS system engineering data collect actual progress directly form engineering team project plan maintain project risk register Cradle protects confidentiality integrity availability information It secure reliable resilient add Information Security Management System ISMS minimises InfoSec risk Cradle protects confidentiality integrity availability information It secure reliable resilient add Information Security Management System ISMS minimises InfoSec risk Cradle protects confidentiality integrity availability information It secure reliable resilient add Information Security Management System ISMS minimises InfoSec risk Cradle protects confidentiality integrity availability information It secure reliable resilient add Information Security Management System ISMS minimises InfoSec risk A range single requirement management system engineering MBSE tool individual engineer project team A range single requirement management system engineering MBSE tool individual engineer project team A range single requirement management system engineering MBSE tool individual engineer project team A range single requirement management system engineering MBSE tool individual engineer project team requirement management system engineering software tool integrates entire project lifecycle one massively scalable integrated product Whether project small local large distributed anywhere Cradle solve agile requirement management model driven development defect tracking test management need one place With unrivalled feature set incredible flexibility simple configuration low cost Cradle ideal choice new agile method requirement management system engineering If veteran moving Cradle bring welcome relief constraint tool difficulty maintaining link multiple database You finally free fully exercise engineering skill best creative inventive Cradle become integral part information security information assurance strategy Requirement statement captured external document Document Loader It reproduces document structure hierarchy item Each item linked origin document Figures loaded automatically Tables captured item image Word object rich text Document Loader find difference new version document Loading new version update item link Coverage analysis document database item provided Full version management source document provided Regression previous version supported reversal change Requirements item loaded Word Excel tool using data exchange direct interface Individual locking requirement allows direct editing form allows multiple user concurrently edit Requirements linked test data safety critical issue risk project data When used module user story requirement linked functional behavioural UML analysis architecture design model organised number model hierarchy analysis design domain Individual locking requirement allows direct editing form allows multiple user concurrently edit Requirements linked test data safety critical issue risk project data When used module user story requirement linked functional behavioural UML analysis architecture design model organised number model hierarchy analysis design domain Individual locking requirement allows direct editing form allows multiple user concurrently edit Requirements linked test data safety critical issue risk project data When used module user story requirement linked functional behavioural UML analysis architecture design model organised number model hierarchy analysis design domain system engineering MBSE formalised application modelling support system requirement design analysis verification validation activity beginning conceptual design phase continuing throughout development later lifecycle phase Cradle diagram notation used specify system The user selects diagram type define system behaviour diagram type define system architecture The associated model captured project repository use analysis document generation Items evolve version managed baseline controlled CM system mechanism review baseline version control full change control audit trail Cradle track change Edits reversed selectively group Items compared across edits baseline Edits raise alert user mark related item suspect All edits permanently available change log Items evolve version managed baseline controlled CM system mechanism review baseline version control full change control audit trail Cradle track change Edits reversed selectively group Items compared across edits baseline Edits raise alert user mark related item suspect All edits permanently available change log Document Publisher produce complete high quality document directly database It publish document include cover page Table Contents List Figures section subsection mixture hierarchical paragraph bullet list figure table Powerful data filter parametrics defined supplement database querying specify condition particular attribute appear output Formal document baselined information produced full traceability item instance appear issue document All functionality provided via simple intuitive user interface seamlessly integrated Microsoft Word Video demonstration traceability feature Cradle including tree table linked item nested table HIDs VCRMs Explore Traceability Video demonstrating creation viewing feature Hierarchy Diagrams HIDs Cradle Hierarchy Diagrams Play Videos All Videos newsletter signup Get latest news monthly newsletter Need help Call u today speak support engineer Get help tip question might Learn Cradle help organisation Explore Cradle bring Need help Call u today speak support engineer Get help tip question might Learn Cradle help organisation Explore Cradle bring Inc Phone support The often abbreviated published specification developed document interchange Microsoft product Most able read write version RTF There several different revision RTF specification portability file depend version RTF used RTF specification changed published major version It confused predecessor Rich Text medium type IBM Revisable Format Content Architecture completely different specification David Luebbert member development team developed original RTF middle late Its syntax influenced typesetting language The first RTF reader writer shipped part Microsoft Word implemented RTF version specification All subsequent release Microsoft Word Macintosh version Windows read write file RTF format Microsoft maintains format The final version implementing feature Microsoft discontinued enhancement RTF specification New feature Word later version save properly RTF format Microsoft anticipates update RTF stated willingness consider editorial modification RTF Specification associated balloting period For time RTF file used produce Windows help file though use superseded file RTF programmed using group backslash control word delimiter Groups contained within brace opening brace closing brace indicating start group end group respectively Groups used indicate type attribute apply certain text The backslash indicates control word going used Control word specifically programmed command RTF They certain state active Their state represented number For example indicates Bold text indicates Bold text A delimiter one three thing A space A digit hyphen  A character digit letter As example following RTF code document would rendered like read program support RTF This text A standard RTF file consist character encode character beyond ASCII The character escape two type escape starting RTF escape In code page escape two digit following backslash used denoting character taken Windows code page For example code page set sequence encode Arabic letter ب For Unicode escape control word used followed signed integer giving Unicode code unit number For benefit program without Unicode support must followed nearest representation character specified code page For example would give Arabic letter ب specifying older program Unicode support render question mark instead The control word used indicate subsequent Unicode escape sequence within current group specify substitution character Until RTF specification version release RTF handled character directly character encoded hexadecimal using RTF control word since RTF generally accept signed number argument Unicode value greater must expressed negative number If Unicode character encoded surrogate pair Support Unicode made due text handling change Microsoft Word Microsoft Word partially application handle text using Microsoft Word later version application handle text using Unicode character encoding scheme RTF file usually ASCII plain text RTF consists control word control symbol group RTF file easily transmitted PC based operating system encoded ASCII character Converters communicate Microsoft Word MS Windows Macintosh expect data transfer character binary data contain value Unlike many word processing format RTF code RTF file viewed plain contained ASCII text legible The distracting provided document creator kept formatting concise At time RTF initial release rare among document format Today format common In contrast MS Word format scrap legible text Although content read often extensive formatting code make hard read The file produced program contain large amount formatting code Such file easily ten time larger corresponding They legible Also character must RTF Thus even concise formatting text us certain le legible Latin language make heavy use character particularly difficult read RTF consisting character illegible RTF Finally beginning RTF supported Microsoft embedded object Macintosh Edition Manager subscriber object RTF data format saving sharing document intended intuitive easy typing person Most word processing software support RTF format importing exporting following version RTF specification direct editing often making common format otherwise incompatible word processing software operating system These factor contribute depend version RTF used There several consciously designed accidentally born RTF dialect Most application read RTF file silently ignore unknown RTF control word RTF internal markup language used Microsoft Word Overall since RTF file may transferred back forth many old new computer system Internet despite difference operating system version But incompatibility RTF later specification RTF RTF use Unicode character This make useful format basic formatted text document instruction manual résumés letter modest information document These document minimum support bold italic underline text formatting Also typically supported text font specification document margin Font margin default well style presets function vary according program default There may also subtle difference perhaps different version RTF specification implemented differing program program version Nevertheless RTF format consistent enough computer computer considered highly portable acceptable use The format support title author etc implementation support Use Microsoft Object Linking Embedding OLE object Macintosh Edition Manager subscriber object limit interoperability object widely supported program viewing editing RTF file embedding file inside RTF table chart spreadsheet application If software understands OLE object available object usually replaced picture bitmap representation object displayed RTF support inclusion JPEG Portable Network Graphics PNG Enhanced Metafile EMF WMF Apple PICT Windows bitmap Windows Device Independent bitmap Metafile picture type hexadecimal default binary format RTF file Not picture type supported RTF reader When RTF document opened software support picture type inserted picture picture displayed RTF writer usually convert inserted picture unsupported picture type BMP TIFF GIF etc one supported picture type PNG WMF include picture For better compatibility Microsoft product RTF writer include picture two different picture type one RTF file This method increase RTF file size rapidly The RTF specification require method various implementation include picture without WMF copy Abiword Ted For Microsoft Word also possible set specific registry value order prevent Word saving WMF copy see link Document file size increase EMF PNG GIF JPEG graphic Word beginning RTF support used document feature widely supported software implementation RTF also support generic font family name used This feature widely supported font substitution Abiword RTF specification support annotation comment document since version RTF specification defined new feature annotation date stamp previously time stamp parent annotation When RTF document annotation opened application support RTF annotation displayed Similarly document annotation saved RTF application support RTF annotation annotation preserved RTF file Some implementation may hide annotation default require user action display Abiword since version IBM Lotus Symphony version Microsoft product support comment within footer footnote header Inserting comment within header footer footnote may result corrupted RTF document The RTF specification also support footnote confused annotation widely supported RTF implementation Abiword KWord Ted Wordpad Endnotes implemented variation footnote application support footnote endnotes render endnotes RTF document footnote Similar annotation due Microsoft product supporting footnote header footer comment including footnote within context RTF document may result corrupted document RTF specification defined use drawing object rectangle ellipsis line arrow polygon various shape RTF specification introduced many new control word drawing object RTF drawing object also called shape since RTF However RTF drawing object supported many RTF implementation though supported Abiword When RTF document drawing object opened application support RTF drawing object displayed Some implementation also display text inside drawing object Similarly document drawing object saved RTF application support RTF drawing object preserved RTF file Unlike Microsoft Word format well newer format RTF support For reason RTF often recommended format spread macro concern However extension guarantee file safe since Microsoft Word open standard DOC file renamed RTF extension run contained macro usual Manual examination file plain text editor use system required determine whether suspect file really RTF Enabling Word Confirm file format conversion open option enabled default version Word also assist warning document opened format match format implied file extension giving option abort opening file RTF file carry malware sometimes malicious file RTF format renamed extension One exploit attacking vulnerability patched Microsoft Word April Since malware RTF file embedding exploit file header renamed RTF extension create master key cover number recent patched exploit one RTF low AV detection Documents type analysed free charge online tool called Cryptam Each RTF implementation usually implement version subset RTF specification Many available RTF converter understand new feature latest RTF specification The editor creates RTF file default It defaulted file format write support Word document dropped security update Read support also dropped Windows WordPad support RTF feature header footer However WordPad read save many RTF feature create table strikeout superscript subscript extra color text background color numbered list right left indent URL linking various line spacing RTF also data format rich text control MS Windows APIs The default text editor also view edit save RTF file well file TextEdit currently July limited ability edit RTF document margin Much older Mac word processing application program able view edit save RTF file well The word processor view edit save RTF file RTF format also used word processor us individual RTF file text file make given project freeware application developing publishing dictionary us RTF common form document output RTF file produced Toolbox designed used also used word processor RTF used interoperability simplicity low CPU processing requirement The script partially convert RTF XML GNU program convert RTF HTML LaTeX troff macro format library create convert document RTF XHTML PDF format project create Rich Text content via library Tcl routine free software generate RTF output Cost script convert SGML RTF module generating RTF document API enabling developer create RTF document open source document converter multiple output format including RTF project create RTF document via pure The Mac OS X command line tool textutil enables file converted rtf rtfd text doc docx wordml odt webarchive The Rich Text Format standard file format document application developed Microsoft Windows Microsoft initially make RTF specification publicly available making difficult competitor develop document conversion feature application Because Microsoft developer access specification Microsoft application better compatibility format Also every time Microsoft changed RTF specification Microsoft application lead competitor redevelop application studying newer version format alleged Microsoft practice anticompetitive antitrust complaint Microsoft The RTF specification lack semantic definition necessary read write modify document 
signal interface signature	One key feature Qt use signal slot communicate object Their use encourages development reusable component A signal emitted something potential interest happens A slot Python callable If signal connected slot slot called signal emitted If signal connected nothing happens The code component emits signal know care signal used The mechanism following feature A signal specifically unbound signal class attribute When signal referenced attribute instance class automatically bind instance signal order create This mechanism Python us create bound method class function A bound signal method implement associated functionality It also attribute signature signal would returned Qt macro A signal may overloaded ie signal particular name may support one signature A signal may indexed signature order select one required A signature sequence type A type either Python type object string name type The name type automatically normalised example used instead If signal overloaded default used index given When signal emitted argument converted type possible If argument corresponding type wrapped special type allows passed around Qt system ensuring reference count properly maintained automatically defines signal Qt signal New signal defined class attribute using factory Create one overloaded unbound signal class attribute unbound signal The following example show definition number new signal New signal defined They must part class definition dynamically added class attribute class defined New signal defined way automatically added class This mean appear Qt Designer introspected using API Overloaded signal used care argument Python type corresponding type us internal class represent object possible overloaded signal different Python signature implemented identical signature unexpected result The following example Signals connected slot using method bound signal Connect signal slot An exception raised connection failed Signals disconnected slot using method bound signal Disconnect one slot signal An exception raised slot connected signal signal connection Signals emitted using method bound signal Emit signal The following code demonstrates definition connection emit signal without argument The following code demonstrates connection overloaded signal It also possible connect signal passing slot keyword argument corresponding name signal creating object using method For example following three fragment equivalent Although allows Python callable used slot connecting signal sometimes necessary explicitly mark Python method Qt slot provide signature provides function decorator Decorate Python method create Qt slot Connecting signal decorated Python method also advantage reducing amount memory used slightly faster For example It also possible chain decorator order define Python method several time different signature For example It possible pas Python object signal argument specifying type argument signature For example This would normally used passing object actual Python type known It also used pas integer example normal conversion Python object integer back required The reference count object passed maintained automatically There need emitter signal keep reference object call even connection queued support function commonly used generated Python code automatically connect signal slot conform simple naming convention However class overloaded Qt signal ie name different argument need additional information order automatically connect correct signal For example class following signal When value spin box change signal emitted If implemented slot called assumes given instance name connected variation signal Therefore user change value slot called twice integer argument string argument The decorator used specify signal connected slot For example interested integer variant signal slot definition would look like following If wanted handle variant signal different Python method slot definition might look like following The concept introduced Qt toolkit allows easy implementation Observer pattern software A contains event information make sense case hand emitted sent part code received one function Flow Almost registration deregistration invocation code need written Flow automatically generates needed infrastructure using AOP To define signal simply create method stub start annotate annotation The method signature freely defined fit need event signalled Whatever parameter defined handed slot listening signal Note The annotation picked AOP framework method filled implementation code needed To emit signal code simply call signal method whenever make sense like example The signal dispatched slot listening Basically method class used slot even never written specifically slot The requirement matching signature signal slot parameter passed signal handed slot without problem The following show slot see differs way method Depending wiring might extra parameter given slot contains class name method name signal emitter separated Which slot actually listening signal configured wired bootstrap code package Any package course freely wire signal slot also wiring signal slot possible You little careful wiring even package signal slot package result could someone using package When Flow initializes run method package class This place wire signal slot needed package The first pair parameter given identifies signal want wire second pair slot The signal identified class name signal name method name without In example method trigger signal called The slot identified class name method name called If method name start slot called statically An alternative way specifying slot give object instead class name method This also used pas instance react signal case slot method name omitted There one parameter available It control whether signal information class name method name signal emitter separated passed slot last parameter default Copyright onwards author All Soundcraft Signature Series console incorporate Soundcraft iconic Ghost mic preamps directly drawn company professional console deliver extraordinary audio quality high headroom wide dynamic range exceptional resolution clarity superb signal noise ratio They employ Soundcraft Sapphyre Assymetric EQ perfectly equalizing every vocal instrumental element mix unmistakable musicality inherent every Soundcraft console plus GB Series audio routing technology famous thousand live venue worldwide They include wide variety Lexicon reverb chorus modulation effect dbx limiter input channel The console offer XLR switchable input enable guitar bass instrument directly connected All console come USB interface Accompanying console free downloads Lexicon MPXL native Ableton Live Lite In addition console feature smooth faders Series audio routing flexible switching Aux subgroup powerful routing switching option well dedicated output The Signature Series built using robust metal construction component internal universal power supply Also available distributor Order Now View covering authorized use intellectual property matter disclaimer The TI design demonstrates bandwidth optimized analog front end AFE FIR implementation using low power capture broadband frequency spectrum waveform Operational amplifier signal path chosen based gain signal bandwidth low noise close rail swing requirement consuming low power The waveform processed frequency time domain using mixed signal ultra low power microprocessor built vector math engine View covering authorized use intellectual property matter disclaimer Order sample get tool find information TI product reference design View covering authorized use intellectual property matter disclaimer As member join ask question share idea collaborate fellow engineer TI expert Content provided AS IS respective TI Community contributor constitute TI specification See Contact Us Now Get trading platform winning trader already using per month per month starting January Money Back Guarantee Save Annual Get data advanced charting tool customizable study Customizable chart workspace shortcut key quick action Use eSignal scripting language EFS develop custom study Access chart anywhere anytime using platform Access information today financial market watch list charting analytical tool iPad iPhone Identify profitable pattern determine strategy odds success actual market condition Gain access wealth respected news source Dow Jones COMTEX RealTimeTraders Pro per month starting January Save Annual per month starting January Save Annual per month starting January Save Annual Minus applicable service exchange fee activation fee New eSignal customer Excludes exchange fee Additional fee apply System Requirements Recommended Power A power user someone us following In addition recommend Power User Requirements user eSignal trading platform Advanced GET particular ALREADY SIGNED UP If already signed eSignal download trading software get started today Note If upgrading eSignal version please perform backup existing version begin upgrade Which version eSignal I download eSignal two version available support broader range PCs To find version best Right click Computer icon Desktop left click Start Menu go Control Panel System Look Properties System System type area see operating system installed proceed select appropriate version eSignal Products Partners Help Support Legal For sale question please call In In Europe In Australia In Asia eSignal Our signal interface product provide signal conversion electrical isolation sensor field device control circuit Intrinsic safety module add Zener diode limit amount electrical energy intrinsically safe circuit Our analog signal conditioner designed isolate transmit convert split amplify analog signal harsh industrial environment order improve reliability process These signal conditioner save panel space provide isolation via galvanic isolation solve mismatched signal issue standardize signal type reduce wiring loop powered unit improve troubleshooting Our intrinsic safety module connect intrinsically safe rated equipment transmitter solenoid proximity sensor encapsulated assembly control system An intrinsic safety approach hazardous location strategy Class l Division Zones location A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition 
solution	As system security increasingly become focal point embedded computing industry Extreme Engineering Solutions responded providing customer secure boot software package use NXP QorIQ LayerScape hardware The secure boot software delivered target processor board expediting development providing simplified implementation package Secure boot process processor validates whether system image trusted safe booting secure single board computer based family processor It includes customizable Microsemi security SoC GB ECC implement feature host many type custom function secure single board computer generation processor It includes customizable Microsemi security SoC GB ECC implement feature The provides combination security performance flexibility rackmount server It feature dual family formerly processor tightly coupled Xilinx security FPGA two Gigabit Ethernet port six PCI Express expansion site family server motherboard Xilinx security FPGA dual Gigabit Ethernet six PCIe expansion site It integrates ruggedization feature enable perform environmentally challenging application without modification enhancement rugged system designed maximum performance extreme environment imaginable Available Small Form Factor SFF ATR chassis type system capable supporting VPX XMC PMC COM form factor well custom module Built tested meet rigorous standard integrating latest technology sure rugged chassis system match requirement embedded board system built processor technology adhere variety industry standard including VITA PICMG Our product fully designed manufactured tested supported United States backed unique support guarantee contact talented support team hear back u within four business hour take project seriously commitment Core FedEx functionality built every certified FedEx Compatible solution easy access shipping delivery service need software use every day Customers Europe benefit FedEx Compatible Program select provider offering advantage benefit program Solutions Order Management Enterprise Resource Planning Transportation Management Warehouse Management FedEx Compatible Diamond Solutions FedEx Compatible Platinum Solutions FedEx Compatible Gold Solutions We proud work industry best software provider For every need find FedEx Compatible solution Call u Paramount one Atlanta leading provider Infrastructure solution offering data storage management infrastructure monitoring staffing solution An award winning staffing service firm delivering comprehensive IT Staffing Solutions Paramount offer suite data infrastructure management service small mid size business enterprise organization If looking building content rich website Drupal best open source CMS bank Paramount one Atlanta leading provider Infrastructure solution offering data storage management infrastructure monitoring staffing solution unique blend creative strategic planning address toughest challenge business Today technology business solution demand high productivity also unmatchable combination quality affordability Paramount Software Solutions geared offer solution technical specialist multiple area like Consulting Services Network Implementation Support Custom Software Development Data Management Infrastructure Monitoring Drupal focused Content Management Systems many area critical solid IT support run business efficiently Value Respect Partner Your goal timeline budget system security service quality immense value every single Paramount team member As leader providing solution address business need sustainability continuous growth understand commitment focus requires thus able implement solution bring remarkable business transformation We offer solution specifically developed meet need small medium sized enterprise address smallest business critical challenge The strength expertise Paramount pool technical expert partner deep understanding technical trend industry scenario able match fit solution business need based foundation In order deliver highest quality service business Paramount developed service model match fit resource solution provides solid stability growth project operation Our partnership expertise merely drive growth within business add value business We customize offering based business goal business goal understanding fit need long term relationship based productive result vision With global happy client experience since take pride providing IT service Old Milton Parkway Alpharetta GA USA Paramount Software Solutions Xerox ConnectKey Technology adapts business work anywhere Now smart Your multifunction printer may already print copy scan fax But add printer software solution equation multiply productivity create Simplify automate everyday work better manage information improve document security enable easy book scanning get Xerox hardware investment continue digital journey A cloud print management solution convenient secure affordable mobile printing Translate anytime anywhere Download apps print repository translate print For year row Xerox win coveted Document Imaging Software Line Year award BLI EIP allows developer create personalized solution access right MFP A free flow information throughout organization key success Xerox Corporation All right reserved Xerox trademark Xerox Corporation United States country For commercial government organization edge competitiveness profit efficiency service delivery found ability organize structure exploit data Intelligent Software Solutions ISS turn chaos large disparate data source clarity help analyst every conceivable mission You make sense data help organization see opportunity solve problem faster easier ever thought possible Search considered niche technology Streaming Expressions powerful new feature introduced Solr allow query In introductory post Solr Search Solution I introduced benefit If reading guess run problem many Copyright HP Development Company We take care HR activity take care employee Empower workforce Manage HR administrative action central location Search employee set favorite view organization tree analyze attrition report single dashboard Zoho People let employee update personal data skill set Managers access info subordinate control approval scheduling Eliminate error due manual entry Consolidate attendance data multiple device customize leave type schedule job create timesheets ease Identify skill employee place improve Set goal gather feedback review performance bridge gap employee need Schedule reminder key event work anniversary birthday Configure email alert probation completion change important data like change position department transfer Create custom form onboarding benefit travel exit etc Define function connect smoothly third party application The compelling factor choosing Zoho People many solution prompt customer support Zoho People seamlessly merged organization helped u streamline HR process Our employee work home able instead We pull report payday much easier If responsible help manage A automated system way go No matter big small fit need Director Facilities Maintenance Operations Hawthorne School District We see world see solution With nearly client hundred thousand user million work order executed system year support best brightest maintenance operation management See exactly user love software viewing client two  With nearly client hundred thousand user million work order executed system year support best brightest maintenance operation management See exactly user love software viewing client two  Support BuildIT develops distributes custom software solution interface Cresttek incorporated engineering service company office The United States Bangalore Cresttek supported OEMs automotive engineering service With merger Cresttek part ALTEN group footprint expanded country service portfolio landscape increased cover end end automotive engineering service With merger customer base shall grow across geography flexible range engagement model delivery model best suit customer demand Industrial product manufacturer face challenge increased automation higher product feature Cresttek offer complete range engineering service automotive industry Cresttek associated partner Automotive manufacturing area Cresttek presence globally established competency automotive engineering domain Our core product design validation competency cover entire lifecycle product conceptualization till realization Our Centers Learning Development initiative modelled delivery engine supporting engineering program best practice assimilated experience participating global product design development Cresttek merged ALTEN ALTEN second largest engineering service provider world 
SPI	SPI The Membrane Technology Consultants Lionshead Suite Carlsbad CA Tel Fax All Rights Reserved Designed We started converting old website served u well many year provide appealing look additional functionality During transition many page still using old format depicted Thank patience SPI Software Solutions started custom software development company providing solution Life Health P C Insurance agent broker GAs Our goal continues automating unique process maximize efficiency increase profitability We provided web desktop solution automate During past several year compiled solution several highly customizable product Please visit corresponding section learn product service provide If question please hesitate contact u We look forward learning business unique challenge Regards Svyatoslav Isayev President Founder The Next Generation Commission Management Agents Brokers GAs may refer Schaumburg Polk SPI founded George Schaumburg providing uninterrupted engineering service since In May firm reorganized name Schaumburg Polk With office Beaumont Houston Terrell Tyler firm provides professional engineering program management construction management service throughout State Texas Our dedicated staff provides specialized expertise integrated service public private sector large small project Our project range transportation drainage facility water resource wastewater facility land development regulatory issue surveying SPI provides including limited roadway planning design construction administration street drainage improvement facility renovation restoration water production treatment distribution municipal industrial wastewater collection conveyance treatment permitting regulatory compliance environmental assessment As engineering firm SPI project service include planning study project development preliminary final design bidding construction administration construction representation service SPI All Rights Reserved Software Public Interest organization founded help organization develop distribute open hardware software Our mission help genuine substantial significant free open source software project handling administrative task required operate legal entity SPI act fiscal sponsor many free open source Services offered project found FOSS project interested becoming associated SPI read The relationship SPI associated project explained Additionally encourage programmer use license allow free redistribution use software hardware developer distribute documentation allow device driver written product Software Public Interest incorporated organization June state New York In United States government determined section Internal Revenue Code SPI qualifies c organization status section b A vi This mean donation made SPI supported project tax deductible donor United States The document define purpose operation SPI Certificate Incorporation It includes four officer role President Vice President Secretary Treasurer As individual consider becoming See page detail contribute existing associated project This website managed using You view revision history via send update either git pull request patch Make Accessible Adaptable Actionable SPi Global Technology Can Help Let u Show You How Let SPi Seamlessly Bring You When You Mobile Content Technology heart solution The convergence Data Design Domain Development brings forth Enterprise level Innovative solution enabling business transformation SPi proprietary Digital First Workflow Platform effectively integrates The Content Extraction Intelligence Suite CEIS provides platform SPi Content Analytics analyzes structured unstructured content SPi technology well integrated R D team comprises big data We world leading provider content technology solution information industry We maximize value content comprehensive suite product solution encompassing extraction processing transformation enrichment content Today life powered data analytics search SPi Global rich history helping client transform The widespread adoption smartphones tablet reader reference In today environment Smart Content smarter device sophisticated We pioneer editorial engagement leading Our deep understanding publisher value chain complemented A TECHNOLOGY AND DATA SCIENCE COMPANY Copyright All right reserved One thing FastLED library attempt use fastest mechanism available driving led This stand clearly SPI based chipsets etc When set led give FastLED data pin clock pin You also adjust clock speed eg slowing needed If data pin clock pin give FastLED happened pin hardware SPI available library automatically use hardware SPI system If reason want use hardware SPI system force software spi putting following top code Of course question becomes What pin hardware SPI pin Here quick rundown You notice based board library support using USART SPI mode well You also notice available arduino board This arduino folk infinite wisdom decided wire XCK line led rather anything get So USART based SPI It possible I use USARTs Teensy Arduino Due SPI well This come future revision library On device SPI hardware want four pin data data clock select line While writing led data us data clock pin platform using SPI hardware disables use pin It possible get four hardware SPI output teensy driving note hack wo work SPI style led chipsets though might You setup line like Note two wire coming pin This ab us fact driving led data pin clock pin strobing data line pin pushing data The strip connected wo anything written clock line anything Ditto strip connect clock line going data line staying low data format requires beginning LED worth data start frame This shuffle repeat combination led Technical content expertise help jump start design get production faster SPIGen fully customizable SPI generator software package easily adapt wide variety SPI protocol specification It support SPIGen installed Windows Windows Windows operating system us USB port computer interface test hardware via USB SPI hardware For individual configuration file please refer summary page purchased kit To see product work SPIGen please visit NXP News 
SPM	SPM Menu This page SPM made freely available neuro imaging community promote collaboration common analysis scheme across laboratory The software represents implementation theoretical concept Statistical Parametric Mapping complete analysis package The software suite MATLAB function subroutine externally compiled C routine written organise interpret functional neuroimaging data The distributed version use SPM free copyright software distributed term GNU General Public Licence published Free Software Foundation either version given file option later version Further detail copyleft found In particular SPM supplied No formal support maintenance provided implied The current version released This provides major update software containing substantial theoretical algorithmic structural interface enhancement previous version We still provide access previous version SPM recommend use current version wherever possible released April released December released released January earlier version longer available SPM listed Neuroimaging Informatics Tools Resources Clearinghouse See Funded National Institutes Health Blueprint Neuroscience Research NITRC facilitates finding comparing neuroimaging resource fMRI related structural analysis Last modified Date Author spm search Copyright The FIL Methods group We provide software make asset last forever Our specialist help effectively ass analyse data plan Conduct inspection use experienced people Bring data life analytics access billion asset information Software built intelligent framework backed proven scientific process provides intuitive tool plan manage asset It matter large small portfolio SPM Assets totally scalable secure affordable aligned industry standard guideline Now plan confidence What SPM mean Sic Parvis Magna Latin term loosely translated great thing small beginning Planning better facility live work learn play sustainable way Please answer How much I say guy gotten lot survey process learning property ever knew We taken slow approach mean people managing property really get know well I also finding senior management starting realise power information collecting making use asset Meg Housing Choices Australia The software application specific interface modifiable individual need You obtain core functionality prudent asset management Rob Ashley Hauraki District Council Oct Oct Oct SPM Assets Limited All Rights Reserved Please take moment send u question comment suggestion respond within hour To verify human please answer following question How much Please complete form support team give online demonstration SPM Assets software To verify human please answer following question How much SPM Menu This page refers construction assessment spatially extended statistical process used test hypothesis functional imaging data These idea instantiated software called The software package designed The sequence series image different cohort subject The current release designed analysis The best starting point read introductory article available You could download latest version analyse instruction analysis available If new imaging perhaps epoch fMRI data set would appropriate The data set provided instruction use SPM analyse These tutorial therefore give practical instruction implement various methodology Our method written book technical report journal paper available This group documentation according year category author keyword If looking help particular topic find relevant paper Online Bibliography Alternatively search SPM page using search facility appears bottom every page Also browse search please feel free edit If still ca find need could send email SPM give access community expert You also aware many SPM If one country year always annual short course London Finally mastered SPM learn various provided expert wider community Good luck The approach voxel based Last modified Date Author spm search Copyright The FIL Methods group technique created examining difference activity recorded experiment using technology It may also refer specific piece software created part carry analysis Functional neuroimaging one type scanning involves measurement brain activity The specific technique used measure brain activity depends imaging technology used see example Regardless technology used scanner produce area scanned represented Each voxel typically represents activity particular coordinate space The exact size voxel vary depending technology used although fMRI voxels typically represent volume mm cube length side Researchers often interested examining brain activity linked specific psychological process process An experimental approach problem might involve asking question area brain significantly active person task A compared task B Although task might designed identical except aspect behaviour investigation brain still likely show change activity task due factor task difference brain involved whole range parallel function unrelated experimental task Furthermore signal may contain noise imaging process To accommodate random effect highlight area activity linked specifically process investigation statistic used look significant difference beyond background brain activity This involves process prepare data subsequently analyse using statistical method known Images brain scanner may statistical comparison take place remove noise correct sampling error A study usually scan subject several time To account motion head scan image usually adjusted voxels image corresponds approximately site brain This referred see Functional neuroimaging study usually involve several participant slightly differently shaped brain All likely gross anatomy minor difference overall brain size individual variation topography morphological difference deep structure To aid comparison image brain transformed superficial structure line process known Such normalization typically involves translation rotation also scaling nonlinear warping brain surface match standard template Standard brain map template MNI often used allow researcher across world compare result Images often smoothed similar effect used software voxels averaged neighbour typically using filter transformation make data le noisy model assumed voxel using describe variability data term experimental confounding effect residual variability Hypotheses expressed term model parameter assessed voxel univariate statistic Analyses may also conducted examine difference correlation task variable brain activity certain area using linear model measured signal caused underlying change neural activity Because many statistical test conducted adjustment made control false positive potentially caused comparison level activity large number voxels In case Type I error would result falsely detecting background brain activity activity related task Adjustments made based number image theory continuous order set new criterion statistical significance adjusts problem Differences measured brain activity represented number way Most simply presented table displaying coordinate show significant difference activity task However difference brain activity often shown patch colour MRI brain colour representing location voxels shown statistically significant difference condition The gradient color mapped statistical value This creates intuitive visually appealing mean delineating relative statistical strength given area activation Recently suggested statistical map combined map original difference brain activity generally speaking original colorcodes attributed latter Differences activity may also represented brain representation three outline view brain transparent Only patch activation visible area shading This useful quick mean summarizing total area significant change given statistical comparison software written Wellcome Department Imaging Neuroscience aid analysis functional neuroimaging data It written using distributed SPM Menu This page It helpful u developing positioning know something demographic user base term location modality previous experience Therefore prior downloading software ask complete following registration form Last modified Date Author spm search Copyright The FIL Methods group try today See SPM action The SPM Salford Predictive software suite highly accurate platform developing predictive descriptive analytical model database datasets size complexity organization The SPM software suite data mining technology span classification regression survival analysis missing value analysis data binning cover aspect data science project SPM algorithm considered essential sophisticated data science circle The SPM software suite automation accelerates process model building conducting substantial portion model exploration refinement process analyst While analyst always full control optionally anticipate analyst next best step package complete set result alternative modeling strategy easy review J Automate Shaving help identify subset informative data within large datasets containing correlated variable within account data With automation may accomplish significant model reduction minimal sacrifice model accuracy For example start complete list variable run automated shaving top eliminate variable look promising learn sample fail generalize Later run shaving bottom automatically eliminate major bulk redundant unnecessary predictor Then follow shaving error quickly zero informative subset feature As opposed typical data mining tool Automate Shaving offer typical variable importance list Additionally analyst provided full set variable importance enabling analyst quickly final variable list eliminating burden repetitive testing Expert modeler typically devote lot time effort optimizing variable importance list Automate Shaving automates process In typical fraud detection application analyst concerned identifying different set rule leading varying probability fraud Decision tree TreeNet gradient boosting technology typically used build classification rule detecting fraud Any classification tree constructed based specific set prior probability One set prior force tree search rule high level fraud set prior produce tree somewhat relaxed assumption To gain benefit rule searching approach analyst try large number different configuration prior probability This process fully automated Automate Priors The result large collection rule ranging extremely high confidence fraud segment low support moderate indication fraud segment wide support For example identify small segment fraud may find large segment lesser probability fraud everything In survey large fraction information may missing Often respondent answer question either want unable In addition Salford Systems expertise handling missing value new automation feature allows analyst automatically generate multiple model including model predicting response based solely pattern missing value model automatically creates dummy missing value indicator addition original set predictor model relies internal handling missing value In modern engineering application part experimental design large collection sampled point may gathered different operating condition It challenging identify mutual dependency among different parameter For example temperature could perfectly dependent could unknown function operating condition like pressure revolution Automate Target give powerful mean automatically explore extract mutual dependency among predictor By word dependency mean potentially nonlinear multivariate relationship go way beyond simplicity conventional correlation Furthermore powerful side effect Automate provides general mean missing value imputation extremely useful support modeling engine directly handle missing value In online ad placing application one balance amount data used time take complete model building In web advertising virtually unlimited amount data So ideally would wish use available data always limit much used deployment Automate Sample allows analyst automatically explore impact learn sample size model accuracy For example may discover using transaction provides additional benefit term model accuracy compared transaction Microarray research datasets characterized extremely large number predictor gene limited number record patient This open vast area ambiguity resulting fact even random subset predictor may produce seemingly good looking model Automate TARGETSHUFFLE allows determine whether model performance accurate appears Automate TARGETSHUFFLE automatically construct large number auxiliary model based randomly shuffled target variable By comparing actual model performance reference distribution dependency model final decision model performance made This technology could result challenge currently produced paper microarray research If dataset deliberately destroyed target dependency give model good accuracy relying original model becomes rather dubious J J J Salford Systems University Program provides licensing fee educational community Eligible educational institution college university community college technical school science center For information special program please contact sale department Salford Systems committed supporting education research university offer special packaging pricing We also offer academic access tutorial material classroom use J The Evolution Regression Modeling Classical Linear Regression Modern Ensembles Friday March April PST Regression one popular modeling method classical approach significant problem This webinar series address problem Are working larger datasets Is data challenging Does data include missing value nonlinear relationship local pattern interaction This webinar series We cover improvement conventional logistic regression include discussion classical regularized nonlinear regression well modern ensemble data mining approach This series value classically trained statistician modeler The Evolution Regression Modeling Classical Linear Regression Modern Ensembles The Evolution Regression Modeling Classical Linear Regression Modern Ensembles recommended The Evolution Regression Modeling Classical Linear Regression Modern Ensembles The Evolution Regression Modeling Classical Linear Regression Modern Ensembles J Course Outline Gradient Boosting II Applications Benefiting Examples variety industry III Typical Steps IV Techniques Case Study Example J TreeNet Tree Ensembles CART Decision Trees A Winning Combination Learn combine best tool hour webinar Course Outline I Classification Regression Trees II Stochastic Gradient Boosting promising way overcome shortcoming single tree III Introducing Stochastic Gradient Boosting powerful modern ensemble boosted tree IV Advantages using Classification Regression Trees Tree Ensembles TreeNet Tree Ensembles CART Decision Trees A Winning Combination J J J We suggest following minimum recommended system requirement Because Salford Tools extremely CPU intensive faster CPU faster run For optimal performance strongly recommend run machine system configuration equal greater following If installing machine us security permission please read following note All Salford apps CPU intensive memory faster CPU always helpful The Salford Predictive Modeler us system application system ID associated unlock key When installation complete user need email application system ID This system ID clearly displayed License Information displayed first time application started You alternatively get window selecting License menu option With fixed license machine must copy licensed program installed If license term permit one copy license must activated machine used This method licensing program used intend program application used one user concurrently network A floating license track number copy checked When number exceeds license term message provided informing user copy checked The licensed program may installed machine client machine access Machines connected network must issued fixed license Method A floating license particularly useful number potential user exceeds number seat specified license term J A user license set limit amount learn sample data analyzed The learn sample data used build model Note limit number test sample data point may analyzed In word row column variable observation used build model Variable used model count Observations reserved testing excluded reason count For example suppose version set learn sample limitation MB Each data point occupies byte For instance capacity license allow learn sample data point data point represented The following table describes current set size available Please note minimum required RAM learn sample limitation Additional larger capacity available operating system using build The flexible licensed large data limit currently available GUI product line The current MAXIMUM data capacity build J j Tags Via Excelencia Suite San Diego CA Ph Fax info dot com Copyright Salford Systems By using site agree use cooky analytics personalized content accordance privacy policy With growing complexity diversity around software solution organization require integrated Software Lifecycle Management transparency establish structured well managed software portfolio SoftwareONE unique Software Portfolio Management methodology take next level optimization based best practice integrated process management Software Lifecycles Your customer specific Software Portfolio Management program ensure well planned IT investment sustainable governance combining commercial technical compliance perspective SoftwareONE The Software Portfolio Management Experts Expedite ROI achieve long term saving managing software demand optimizing software licensing spend rationalizing supplier portfolio increasing transparency Whether want optimize existing infrastructure rationalize application portfolio transition cloud Technical Specialists provide agnostic advice throughout way target state SoftwareONE vendor agnostic compliance expertise provides strategic credible reliable process procedure industry Follow SoftwareONE latest information event promotion SoftwareONE AG Corporate Headquarters Riedenmatt Stans Switzerland T E SoftwareONE technology consultant across country help customer optimize software spend ensuring IT investment roadmapped compliance commercial technical perspective comprehensive Software Portfolio Management methodology Copyright Software ONE AG All Rights Reserved SoftwareONE registered trademark Software All trademark service mark trade name appearing herein property respective owner The content compiled meticulous care best knowledge However SoftwareONE assume liability completeness accuracy We using cooky give best experience site Cookies file stored browser used website help personalise web experience By continuing use website without changing setting agreeing use cooky Gwyddion modular program SPM scanning probe microscopy data visualization analysis Primarily intended analysis height field obtained scanning probe microscopy technique AFM MFM STM support However used general height field greyscale image processing instance analysis profilometry data thickness map imaging spectrophotometry Gwyddion provides large number including standardd statistical characterization levelling data correction filtering grain marking function And since developer active SPM user program also contains number specific uncommon odd experimental data processing method found useful may find useful Gwyddion Free Open Source software covered It aim provide modular program data processing analysis easily extended module script Moreover thanks free software provides source code developer user make easier verification data processing algorithm program improvement Gwyddion work Microsoft Windows Mac OS X FreeBSD operating system common architecture All system used also developement It modern graphical user interface based widely portable toolkit consistent across supported system Yeti talk added A version published fixing build problem sed BSD sed Mac OS X BSD system See also Version Window West released As usual brings bundle new module various improvement also module bundle The noticeable change nevertheless new much nicer icon set Felix Kling better widget adjusting bazillion parameter various algorithm See complete list change Petr talk added See also There seems still interest image generation Yeti wrote year ago abandoned essentially Gwyddion development started Although resurrection unlikely good news idea found way Gwyddion synthetic data module We added information A added A list added specifically publication describing Gwyddion architecture algorithm otherwise related software fundamental manner Version Magnetic Monastery released It brings bunch module well usual collection new improved file import module bugfixes There also new translation Brazilian Portugese See complete list change A added We sorry delay Version Pythocalypse released It would mostly bugfix release repairing selection work properly several module Except one thing complete overhaul pygwy including API change And finally Python scripting also See complete list change A version published fixing broken function affect selection Correct Affine Measure Lattice Straighten Path function See also A version published fixing compilation failure JPK scan file module minizip available See also Version Lichen Logistics released bringing geometrical shape fitting new grain marking function editable toolbox new file module lot improvement See complete list change Gwyddion conquered space The analysis comet dust image Dust Analysis System MIDAS famous Rosetta space probe studying Comet employed Gwyddion See A added In related news version published fixing broken installation API documentation turn break package build See also A new version released A bug affecting Mask mode fixed handling setting closely match typical Gwyddion module A piece code also slightly modernised without increasing minimum required Gwyddion version Version released The library updated handle new data type introduced Gwyddion Version Scatter Slither released large number new feature user interface improvement also initial native XYZ data support See complete list change Some result right value remark available See description individual task link result remark There may elaboration refinement anyway result hopefully satisfy curiosity The closed Thanks participated We publish right value remark Nanoscale conference We received fair number response far would like thank participated The survey form open end February also MS Windows installer finally stop advertising If tested data processing skill yet please download survey image fill best estimate form Thanks Version released fixing couple bug improving error reporting MSVC support Version Entropy Everywhere released bringing new feature mainly lot bug fix file format support improvement As usual list A added Note problem various auxiliary developer script cross build night build The script generally fixed svn Complete available Gwyddion compilation development Microsoft Visual Studio The package prepared Gwyddion last stable version still development Feedback welcome Please participate trying characterise influence human quantitative AFM result The survey fun consists actual data processing opposed filling boring form take several minute time At least unless decide figure absolutely best possible data processing procedure case take arbitrarily long If use pygwy MS Windows please avoid Python package latest one moment cause crash Gwyddion startup To stop crash Python already installed sufficient downgrade lower version Apparently necessary uninstall Python also delete manually reinstall Python package afresh Known good version Version Respectable Rotunda released The number improvement bug fix large scattered program See full list Broken causing RPM signature check fail No file directory hopefully fixed Version Even Enlightenment released The change everyone probably notice new line correction module There however plenty improvement See full list change We lost recent commits restoration subversion repository backup The corresponding change recommitted subversion working normally However revision history since including changed It recommended check fresh working copy svn module transfer change might new copy If working copy updated later check afresh If observe anything odd subversion please report There major outage service due storage failure File download work subversion discussion etc order moment Details found Version released Several bug fixed since version MS Windows support greatly improved The library considered stable Gwyddion developement supported SPM Statistical Parametric Mapping refers construction assessment spatially extended statistical process used test hypothesis functional imaging data These idea instantiated software called SPM The SPM software package designed analysis brain imaging data sequence The sequence series image different cohort subject The current release designed analysis fMRI PET SPECT EEG MEG SPM made freely available neuro imaging community promote collaboration common analysis scheme across laboratory The software represents implementation theoretical concept Statistical Parametric Mapping complete analysis package suite function subroutine externally compiled routine Overview SPM installation System Requirements hardware software Detailed installation compilation Standalone version using MATLAB Compiler Optimising installation Schedule custom demo Lead Money expert sale rep faster anywhere anytime performance key performance indicator best selling process View behavior metric hard number one place get accurate view sale rep performance Uncover sale performance indicator dashboard take timely corrective action fix emerging issue Compare new opportunity proposal quote generated set goal Tailor performance program relevant objective sale rep based past performance Assign training corrective action use workflow tool manage progress performance improvement Evaluate coaching effectiveness create tracking compliance Document observation sale rep field use SPM transform ad hoc coaching conversation development plan Monitor improvement time rep work individual target Standardize process assessing performance based assigned objective sale manager structured approach increase team performance Understand selling behavior impact rep sale performance Uncover impactful behavior sale performance coach behavior sale rep team Build library best practice skill sale performance indicator SALES Recent Searches 
storage capacity	Storage capacity refers specific amount data storage device system accommodate This critical measurement commonplace IT also designing enterprise system larger system function properly In order precisely represent storage capacity IT professional others use term like kilobyte megabyte gigabyte In earlier day computing storage capacity disk space often measured kilobyte As new storage medium began accommodate storage digital image video megabyte quickly replaced kilobyte gigabyte quickly replaced megabyte New storage capacity measurement often presented term hundred gigabyte One major advance storage capacity powered something called design In primitive data storage hard drive data encoded physical drive platter read stylus platter revolved Now many type hard drive replaced storage system In data storage large amount data written small storage medium use silicon similar material various chemical element provide charging molecular level encode data This process called doping Assessing storage capacity major part providing upgrade system It also part looking fundamental advance IT manufacturing power next generation device system Techopedia Terms Copyright Techopedia Search product resource documentation video training knowledge base article licensing FAQs connect support Submit ticket technical support customer service product assistance Renew maintenance access latest product feature technical support Connect community member Get help heard u job better using product Get latest tip trick advice fellow SolarWinds geek Into database Find article code community database expert Earn official stamp expertise becoming SolarWinds Certified Professional Fully Functional Days You need keep close eye capacity limit reached avoid surprise overrun purchase Tending spreadsheet capacity planning forecasting exercise hinders overall productivity Without storage monitoring tool difficult trace uneven sporadic storage consumption RAID group You need keep close eye capacity limit reached avoid surprise overrun purchase Tending spreadsheet capacity planning forecasting exercise hinders overall productivity Without storage monitoring tool difficult trace uneven sporadic storage consumption RAID group Collect storage capacity data track usage time eliminate bottleneck Create predefined custom report view capacity trend storage environment Use application stack dashboard troubleshoot capacity issue application storage Monitoring storage array others NAS SAN performance monitoring status usage threshold alerting Monitor storage capacity projected growth rate We Geekbuilt Developed network system engineer know take manage today dynamic IT environment SolarWinds deep connection IT community The result IT management product effective accessible easy use  The amount data storage device disk tape hold Storage capacity measured kilobyte KB megabyte MB gigabyte GB terabyte TB See Create save customized word list Sign today start improving vocabulary Please set username People see Author Name public word list often called technology consisting component used retain digital It core function fundamental component computer The CPU computer manipulates data performing computation In practice almost computer use put fast expensive small storage option close CPU slower larger cheaper option farther away Generally fast volatile technology lose data power referred memory slower persistent technology referred storage however memory sometimes also used referring persistent storage In CPU consists two main part The ALU The former control flow data CPU memory latter performs arithmetic data Without significant amount memory computer would merely able perform fixed operation immediately output result It would reconfigured change behavior This acceptable device desk specialized device machine differ memory store operating data Such computer versatile need hardware reconfigured new program simply new instruction also tend simpler design relatively simple processor may keep successive computation build complex procedural result Most modern computer von Neumann machine A modern represents using Text number picture audio nearly form information converted string binary digit value The common unit storage equal bit A piece information handled computer device whose storage space large enough accommodate simply For example page print stored five million bit one byte per character Data assigning bit pattern object Many standard exist encoding like image encoding like video encoding like By adding bit encoded unit redundancy allows computer detect error coded data correct based mathematical algorithm Errors generally occur low probability due bit value flipping physical bit fatigue loss physical bit storage ability maintain distinguishable value due error inter communication A random due random typically corrected upon detection A bit group malfunctioning physical bit always specific defective bit known group definition depends specific storage device typically automatically taken use device replaced another functioning equivalent group device corrected bit value restored possible The CRC method typically used communication storage A detected error retried method allow many case database represent string bit shorter bit string compress reconstruct original string decompress needed This utilizes substantially le storage ten percent many type data cost computation compress decompress needed Analysis storage cost saving cost related computation possible delay data availability done deciding whether keep certain data compressed For certain type data information may kept storage prevent possibility unauthorized information reconstruction chunk storage snapshot Generally lower storage hierarchy lesser greater access CPU This traditional division storage primary secondary tertiary storage also guided cost per bit In contemporary usage memory usually storage typically dynamic RAM form fast temporary storage Storage consists storage device medium directly accessible typically drive device slower RAM retaining content powered Historically called Meanwhile storage device referred also known often referred simply one directly accessible CPU The CPU continuously read instruction stored executes required Any data actively operated also stored uniform manner Historically used rotating primary storage By unreliable method mostly replaced Core memory remained dominant advance technology allowed become economically competitive This led modern RAM It light quite expensive time The particular type RAM used primary storage also lose information powered As shown diagram traditionally two primary storage besides main RAM Main memory directly indirectly connected central processing unit via It actually two bus diagram The CPU firstly sends number address bus number called indicates desired location data Then read writes data using data bus Additionally MMU small device CPU RAM recalculating actual memory address example provide abstraction task As RAM type used primary storage volatile uninitialized start computer containing storage would source read instruction order start computer Hence containing small startup program used computer read larger program storage RAM start execute A technology used purpose called ROM terminology may somewhat confusing ROM type also capable Many type ROM literally update possible however slow memory must erased large portion Some run program directly ROM similar program rarely changed Standard computer store program ROM rather use large capacity secondary storage well costly Recently us refer historically called respectively also known external memory auxiliary storage differs primary storage directly accessible CPU The computer usually us channel access secondary storage transfer desired data using primary storage Secondary storage lose data device powered Per unit typically also two order magnitude le expensive primary storage Modern computer system typically two order magnitude secondary storage primary storage data kept longer time In modern computer usually used secondary storage The time taken access given byte information stored hard disk typically thousandth second millisecond By contrast time taken access given byte information stored memory measured billionth second nanosecond This illustrates significant difference distinguishes memory rotating magnetic storage device hard disk typically million time slower memory Rotating device drive even longer access time With disk drive disk head reach proper placement data interest rotates subsequent data track fast access To reduce seek time rotational latency data transferred disk large contiguous block When data reside disk blocking access hide latency offer opportunity design efficient Sequential block access disk order magnitude faster random access many sophisticated paradigm developed design efficient algorithm based upon sequential block access Another way reduce bottleneck use multiple disk parallel order increase bandwidth primary secondary memory Some example secondary storage technology key standalone The secondary storage often formatted according format provides abstraction necessary organize data providing also additional information called describing owner certain file access time access permission information Most computer use concept allowing utilization primary storage capacity physically available system As primary memory fill system move chunk secondary storage device retrieving later needed As retrieval slower secondary storage necessary overall system performance degraded provides third level storage Typically involves robotic mechanism insert removable mass storage medium storage device according system demand data often copied secondary storage use It primarily used archiving rarely accessed information since much slower secondary storage second millisecond This primarily useful extraordinarily large data store accessed without human operator Typical example include When computer need read information tertiary storage first consult catalog determine tape disc contains information Next computer instruct fetch medium place drive When computer finished reading information robotic arm return medium place library Tertiary storage also known near online The formal distinction online nearline offline storage For example spinning hard disk drive online storage spinning drive spin automatically massive array idle disk nearline storage Removable medium tape cartridge automatically loaded nearline storage tape cartridge must manually loaded offline storage computer data storage medium device control The medium recorded usually secondary tertiary storage device physically removed disconnected It must inserted connected human operator computer access Unlike tertiary storage accessed without human interaction storage used since detached medium easily physically transported Additionally case disaster example fire destroys original data medium remote location probably unaffected enabling storage increase general since physically inaccessible computer data confidentiality integrity affected attack technique Also information stored archival purpose rarely accessed storage le expensive tertiary storage In modern personal computer secondary tertiary storage medium also used storage Optical disc flash memory device popular much lesser extent removable hard disk drive In enterprise us magnetic tape predominant Older example floppy disk Zip disk punched card Storage technology level storage hierarchy differentiated evaluating certain core characteristic well measuring characteristic specific particular implementation These core characteristic volatility mutability accessibility addressability For particular implementation storage technology characteristic worth measuring capacity performance retains stored information even constantly supplied electric power It suitable storage information requires constant power maintain stored information The fastest memory technology volatile one although universal rule Since primary storage required fast predominantly us volatile memory form volatile memory also requires stored information periodically reread rewritten otherwise would vanish form volatile memory similar DRAM exception never need refreshed long power applied loses content power supply lost An UPS used give computer brief window time move information primary volatile storage storage battery exhausted Some system example integrated battery maintain volatile storage several minute As commonly used data storage medium semiconductor magnetic optical paper still see limited usage Some fundamental storage technology used past proposed development us store information A semiconductor memory chip may contain million tiny Both form semiconductor memory exist In modern computer primary storage almost exclusively consists dynamic volatile semiconductor memory Since turn century type semiconductor memory known steadily gained share storage home computer semiconductor memory also used secondary storage various advanced electronic device specialized computer designed As early manufacturer started using SSDs default configuration option secondary storage either addition instead traditional HDD us different pattern coated surface store information Magnetic storage The information accessed using one head may contain one recording transducer A head cover part surface head medium must moved relative another order access data In modern computer magnetic storage take form In early computer magnetic storage also used typical store information deformity surface circular disc read information illuminating surface observing reflection Optical disc storage The deformity may permanent read medium formed write medium reversible recordable medium The following form currently common use optical disc storage magnetic state surface store information The information read optically written combining magnetic optical method disc storage slow write fast read storage used tertiary storage also proposed Light induced magnetization melting magnetic photoconductors also proposed consumption storage typically form long used store information automatic processing particularly computer existed Information recorded punching hole paper cardboard medium read mechanically later optically determine whether particular location medium solid contained hole A technology allow people make mark paper easily read widely used tabulating vote grading standardized test made possible object sold transported computer readable information securely attached While group bit malfunction may resolved error detection correction mechanism see storage device malfunction requires different solution The following solution commonly used valid storage device Device mirroring typical RAID designed handle single device failure RAID group device However second failure occurs RAID group completely repaired first failure data lost The probability single failure typically small Thus probability two failure RAID group time proximity much smaller approximately probability squared multiplied If database tolerate even smaller probability data loss RAID group replicated mirrored In many case mirroring done geographically remotely different storage array handle also recovery disaster see disaster recovery A secondary tertiary storage may connect computer utilizing This concept pertain primary storage shared multiple processor lesser degree Large quantity individual magnetic tape optical disc may stored robotic tertiary storage device In tape storage field known optical storage field optical disk library per analogy Smallest form either technology containing one drive device referred storage device may number slot holding individual medium usually one picking robot traverse slot load medium drive The arrangement slot picking device affect performance Important characteristic storage possible expansion option adding slot module drive robot Tape library may slot provide information Optical jukebox somewhat smaller solution slot Robotic storage used archive imaging medical video industry known archiving strategy automatically file fast hard disk storage library jukebox If file needed back disk This article incorporates document Complete form sale specialist contact Storage Capacity Optimization Sentry Software brings storage capacity metric BMC TrueSight Capacity Optimization ensure storage infrastructure properly sized current future need Marketed connector BMC TrueSight CO Sentry Software module provide capacity information storage system storage pool volume host available environment Reduce Storage Costs Sentry Software BMC TrueSight Capacity Optimization Deliver optimal storage performance Support business unit goal minimum risk Make informed purchasing decision based business impact Control storage infrastructure expense stay within budget Sentry capacity optimization solution helped u improve operational efficiency plan infrastructure usage better therefore significantly reduce storage equipment expense By better optimizing existing resource able dramatically improve quality service After deploying Storage Capacity Optimization solution realized storage need lot le initially forecast saving u unnecessary expensive investment new storage capacity PDF Solution Brochure PDF Technical Datasheet PowerPoint Presentation And get update Storage capacity planning practice assessing forecasting future requirement enough space purchased meet need user application While honeymoon standalone CDM appliance many vendor also offer CDM functionality Download guide examination CDM market vendor keep eye Actifio Commvault Catalogic etc framework establishing lasting copy matter solution fluctuate You forgot provide Email Address This email address appear valid This email address already registered Please You exceeded maximum character limit Please provide Corporate Address By submitting Email address I confirm I read accepted Terms Use By submitting personal information agree TechTarget may contact regarding relevant content product special offer You also agree personal information may transferred processed United States read agree Effective allows data storage administrator delay disk purchase important price disk continues drop Saving money storage resource would otherwise go unused enables organization better allocate storage budget Storage administrator determine storage allocated using storage capacity planning tool analyze storage system generate report available data storage capacity storage performance Implementing another way track storage use group department Factors consider include potential data storage requirement future project tier storage allows le frequently accessed item moved lower le costly tier freeing faster expensive tier application need Techniques like file c help reduce amount storage capacity needed eliminating extra copy file reducing amount space needed store file image allows physical storage pooled managed one storage device let storage administrator virtually dedicate storage allocate needed Find content member offer By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States FlashSystem building block foundation IBM FlashSystem array New NAND module use TLC The debate still rage whether array make hybrid array obsolete cost matter Hardware vendor OCZ Storage Solutions said Saber HMS APIs let host server coordinate process take place Latest TechTarget cloud survey find cloud backup cloud file sync share disaster recovery archiving popular Cloud storage implementation user range backup DR tiering We reveal cloud storage application Assistant Editor Rachel Kossman tweet link content well analysis industry expert Interact let u A DR strategy cornerstone ensuring infrastructure application continue operate major outage hit Our Protection ransomware save business money time event attack It critical plan ahead BC DR testing major challenge organization Our free template offer way incorporate testing Following acquisition Vista Equity Partners Datto backup recovery line merging Autotask The company Aparavi us architecture try elbow way emerging competitive market protecting restoring Commvault HyperScale appliance architecture linear scalability HyperScale part vendor new All Rights Reserved The storage capacity stated product specification may differ storage capacity reported iPhone iPad iPod Mac Manufacturers storage device measure storage capacity using decimal system base That product packaging online specification include statement Some storage capacity storage device including iPhone iPad iPod Mac used formatting Other factor operating system installed device use additional storage space The operating system iPhone iPad iPod touch Mac report storage capacity using decimal system base calculates billion byte This iOS earlier Mac OS X Leopard earlier along Microsoft Windows use binary system base calculates byte This difference decimal binary system measurement reported storage capacity differs storage capacity product packaging specification The Disk Utility app might also show slight difference storage capacity particularly drive SSDs flash storage additional space used EFI partition restore partition block area metadata spare block grown bad block factory bad block For information managing storage space device see Complete form sale specialist contact Storage Capacity Views Reports TrueSight Capacity Optimization additional component specifically designed BMC TrueSight Capacity Optimization display capacity information storage system storage pool volume host filer share present environment generate report To help understand use update product bringing information online directly available To help understand use update product bringing information online directly available And get update 
summary activity	Hippo Hooray Second Grade Summarizing Literary Texts Freebie Matchbook Chapter Summaries Novel Studies need file folder folded piece construction paper Students summarize chapter matchbook foldable finish reading book put together folder Reading comprehension ESL student critically important due language barrier student This post outline five reading comprehension strategy help student grow reading comprehension skill Do want add little flavor summarizing unit This engaging activity student read original short story Learning classifying Check easy lesson got u started talking make quality summary Looking text different lens tricky pay Hello Literacy So What Big Deal Getting Main Idea Key Details Standard Lesson Plans Teaching student summarize text difficult primary level Use kid friendly summarizing routine help build comprehension Summarizing one skill may seem easy teacher difficult student properly taught summarize For many year I even teach seventh eighth grade student summarize I would ask summarize text get mad failed produce quality summary I wrong Now I always teach student write summary Writing good summary easy may appear It actually requires quite bit finesse  This may involve unpacking lengthy sentence decoding challenging vocabulary mean must good enough understanding text distinguish essential nonessential information  This mean summarizing text requires comprehension expression skill Additionally per Common Core State Standards summary contain opinion background knowledge personal information rather summary entirely text based After year learning make connection text student must retrained keep writing regard summary Teaching skill surely warrant class time Here resource I used classroom teach student summarize I hope find page useful Here animated PowerPoint slideshow teaching student summarize It includes definition example paragraph simple review activity using nursery rhyme Students read four nonfiction paragraph train They highlight underline important information passage write title passage related main idea create summary My student loved reading four nonfiction passage ninja I hope This worksheet give student practice identifying main idea writing summary Students read long passage lost colony Roanoke highlight underline important information summarize paragraph Here PowerPoint slideshow four practice passage We read passage twice class I give student time create summary We share discus answer This great way practice group In PowerPoint slideshow I review student response We discus response class I reveal estimation response I suggest substitute student response use mine want Here another PowerPoint slideshow I use help student better understand create summary This summary connected We look good example summary example need improvement Again might prove helpful switch student response still serve purpose Evaluate student ability summarize test Students read long passage Johannes Gutenberg highlight important information text summarize paragraph answer multiple choice question create extended response Determine central idea theme text analyze development summarize key supporting detail idea With prompting support retell familiar story including key detail Retell story including key detail demonstrate understanding central message lesson Recount story including fable folktale diverse culture determine central message lesson moral Recount story including fable folktale myth diverse culture determine central message lesson moral explain conveyed key detail text Determine theme story drama poem detail text summarize text Determine theme story drama poem detail text including character story drama respond challenge speaker poem reflects upon topic summarize text Determine theme central idea text conveyed particular detail provide summary text distinct personal opinion judgment Determine theme central idea text analyze development course text provide objective summary text Determine theme central idea text analyze development course text including relationship character setting plot provide objective summary text Determine theme central idea text analyze detail development course text including emerges shaped refined specific detail provide objective summary text Determine two theme central idea text analyze development course text including interact build one another produce complex account provide objective summary text With prompting support identify main topic retell key detail text Identify main topic retell key detail text Identify main topic multiparagraph text well focus specific paragraph within text Determine main idea text recount key detail explain support main idea Determine main idea text explain supported key detail summarize text Determine two main idea text explain supported key detail summarize text Determine central idea text conveyed particular detail provide summary text distinct personal opinion judgment Determine two central idea text analyze development course text provide objective summary text Determine central idea text analyze development course text including relationship supporting idea provide objective summary text Determine central idea text analyze development course text including emerges shaped refined specific detail provide objective summary text Determine two central idea text analyze development course text including interact build one another provide complex analysis provide objective summary text Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Gr Is answer sheet summarizing test EXCELLENT worksheet Thank much Thank much Bless Thank Morton sharing material Indeed great help class The material awesome I like separate two level student I teaching international student comparasion good bad summary really work lot I really appriciate sharing However could share summarising answer key well That would help lot Thank Would consider making something grade level The example helpful many student read grade level Thank Jill Thanks Toronto Great help ESL class Thanks much Istanbul Kids loved saved much precious precious time Thank valuable help Thank putting material together I find answer Summarizing Test They surely save time Please send let know I find Thank much Did get answer sheet Thank great material use prove great resource I wondering would mind pointing source pulled information ninja worksheet I wanted make sure I right information bit research I pulled I see history concept existence etymology ninja Japanese The Japanese use kanji essentially Chinese character one three different alphabet set use written communication So word like shinobi shinobi mono Japanese origin written using Chinese character really associated Chinese culture This especially true mono Japanese phrase Please let know source say otherwise I information Thank Hello I pulled content Wikipedia page long time ago I expert subject I writing worksheet I hope would interest student What answer key summary test please Thanks million Morton This lesson help student understand summarizing better God bless sir Thank much helpful material What phenomenal effort done putting together Appreciate idea Fabulous Brian How amazing come across Summarising resouces explicit instruction Your comment teaching student effectively summarise important fact This turn forced reflect teaching Thank step step instruction valuable Have posted reading strategy hint Sure I posted around site Feel free explore bit What reading level summary worksheet Thanks Can I get answer summarizing test Gutenberg It awesome got today school give u topic useful one problem get answer question check correct answer Good day Morton answer key summary test I sure answer Wow wanted thank hard work generosity publish everybody Thank much Andy I studying exam find enough information summarizing I excited I found site It million A terrific resource Thank much sharing I came across site I looking help teaching summarising need look Powerpoint practice sheet example awesome Is answer key Test What incredible site Thank sharing resource idea Especially Summary power point I struggling get student differentiate summary list detail This help much I discovered site today I teach high school ELL looking good nonfiction text accessible student I definitely looking around plan using material lesson week This VERY helpful Even university student needed refresher An answer key Summary would helpful provided And also whole passage summary summary paragraph THanks Required field marked An official website United States government Federal government website always use domain Before sharing sensitive information online make sure site inspecting browser address location bar This site also protected SSL Secure Sockets Layer certificate signed government The mean transmitted data encrypted word information browsing history provide transmitted securely The allows My HealtheVet registered user monitor account activity You see accessed account made change change made information accessed type action performed My HealtheVet monitor account activity performed user My HealtheVet authenticator My HealtheVet Help Desk staff In addition allows VHA maintain user activity record conformance applicable compliance requirement HIPAA privacy security rule The Printer Friendly screen provides format information designed print neatly inch sheet paper The information page consists entry displayed previous screen A border indicated phrase The printable information appears within border outline main content area Select date range list desired range date select Jump Date icon select date calendar You view activity past twelve month The default time range past year Select list Everyone default setting Everyone Self Help Desk Administrator MHV Authenticator Self System Unknown Select Search button display selected user time range The column Performed By Activity Action Result sorted ascending descending order Select triangle sort column My HealtheVet server located Eastern Time Zone The display Eastern Standard Time To convert time EST use link Recommended Site This site time zone converter information time zone around world Visual Site This site display map visually designated time zone United States This column display user accessed account Everyone Everyone Self Self Help Desk Administrator MHV Authenticator System Unknown This column display activity performed account accessed The Action listed dependent Activity displayed Activity column The result action either Successful Unsuccessful example invalid password invalid data entered Login would show Unsuccessful The summary page display row When row may choose drop menu display row one page You call Monday Friday Central Time question concern site Read Online View Cover Copy HTML code embed book blog website application An uncorrected copy prepublication uncorrected proof book We publish prepublications facilitate timely access committee finding The final version book published yet You copy book send becomes available We charge book ship Pricing book estimated subject change All backorders released final established price As courtesy price increase notify If price decrease simply charge lower price Applicable discount extended An ebook one two file format intended used device apps Amazon Kindle Apple iBooks A PDF digital representation print book loaded program allow resizable text advanced interactive functionality The eBook optimized device apps mean offer much better digital reading experience PDF including resizable text interactive feature available eBook file available large number report website If eBook available see option purchase book page Proceedings published National Academies Sciences Engineering Medicine chronicle presentation discussion workshop symposium event convened National Academies The statement opinion contained proceeding participant endorsed participant planning committee National Academies In federal government issued fully approved physical activity guideline first time The idea physical activity impact health traced far back Hippocrates science around linkage physical activity health continuously accumulated On April Institute Medicine Roundtable Obesity Solutions held workshop explore state science regarding impact physical activity prevention treatment overweight obesity highlight innovative strategy promoting physical activity across different segment population This report summarizes presentation discussion workshop The National Academies Press NAP partnered Copyright Clearance Center Rightslink service offer variety option reusing NAP content Through Rightslink may request permission reprint NAP content another publication course pack secure website medium Rightslink allows instantly obtain permission pay related fee print license directly NAP website The complete term condition reuse license found license agreement made available online order process To request permission Rightslink required create account filling simple online form The following list describes license reuses offered National Academies Press NAP Rightslink If question comment concerning Rightslink service please contact To request permission distribute PDF please contact Customer Service Department pricing To request permission translate book published National Academies Press imprint Joseph Henry Press please Loading stats Finding similar item Space Weather Prediction Center National Oceanic Atmospheric Administration This product provides user daily summary significant space weather event The daily Solar Geophysical Activity Summary brief list solar geophysical event index previous UTC day including energetic solar flare proton event geomagnetic activity stratospheric warming alert This joint product NOAA USAF issued daily UTC For complete description SGAS see Information SGAS SWPC found National Geophysical Data Center page Today SGAS found SGAS text file available SWPC Space Weather Prediction Center Broadway Boulder CO A project broken segment subproject used develop subnetwork diagram activity This dividing project section make manageable project management team As project reported various summarization point throughout course project management A summary group related activity schedule segment project life By using hammock activity summarization project simplified minimizing total number activity displayed Hammock activity generally used report information last earliest latest activity encompasses The normally determined following drawing plan Using hammock allows top management see overview project without overwhelmed detail A summary usually considered overhead since project typically used In addition designed calculate duration linked summary This term defined edition No comment yet add voice Required field marked 
supervisor state	IBM Knowledge Center us JavaScript Scripting appears disabled supported browser Enable JavaScript use try Please note DISQUS operates forum When sign comment IBM provide email first name last name DISQUS That information along comment governed By commenting accepting Typically associated mainframe hardware mode operating system executes instruction unavailable application program example instruction Contrast See Create save customized word list Sign today start improving vocabulary Please set username People see Author Name public word list A hardware family computer contemporary well mainframe computer others Univac possibly others Fujitsu UP MP others used cause interrupt request service The system routine providing service called SVC specific implementation IBM mainframe successor family operate one two state In large set general purpose instruction available user program In system program additionally able use small set instruction generally intended supervisory function These function may affect user processor entire computer system A program allowed access specific supervisory function thorough authorization checking operating system DEBCHK SVC TESTAUTH SVC possibly additional test Programs fail test ABENDed immediately cease processing Some test available added SVS available subsequent release still available day In subsequent version OS MODESET function SVC obviated need many SVCs system SVC accommodated change mode problem state supervisor state change key user zero system single operation many SVCs originally intended simple mode key change anyway subsequently requirement program resident link library identified authorized library secure approach completely installation control This link library could system link library user link library associated This change generally simplified user control authorization although simple change application thereby required In general user installation favored accommodation overall reliability system significantly improved thereby Although mainframe application naturally process operating system naturally although system also support many process naturally When application request system service naturally processing mechanism synchronizing application operating system must employed This essential mechanism function built operating system specifically supported including WAIT temporarily halt application processing external event occurred POST indicate occurrence external event application processing may continue SYNCH change system processing mode supervisor user preserving system integrity synchronously perform function behalf application application processing may continue The table indicates condition synchronizing facility may employed SVC two byte instruction second byte indicates specific request SVC invokes supervisory implemented closed subroutine system SVC Information passed SVC routine passed memory Under operating system return SVC routine type SVC routine via SVC EXIT invocation SVC type privileged LPSW instruction executed behalf SVC routine control program SVC interrupt handler On developed operating system developed Montreal Canada IBM mainframe mainframe developed Univac TSOS operating system RCA Spectra series computer Univac Series mainframe operating system also developed TSOS operating system Fujitsu mainfames use LPSW instruction exit Supervisor Call In later incarnation OS branch link entry point alternative SVC invocation supervisor mode routine In later incarnation OS Program Call PC entry augmented SVCs invocation many supervisory function authorized unauthorized program function may invoked branch PC entry  Different IBM operating system little compatibility specific code used supervisor service may invoked system use DIAG instruction similar manner leave SVC use operating system running virtual machine Most SVCs maintained legacy program SVCs extended passage time In successor SVC number approximately defined IBM downwards available use installation system programming staff SVC routine must module name specific format beginning IGC changed SVC number approximately IBM downwards installation additional system service primarily support implemented IBM using SVCs By system design term disabled mean disabled interruption except machine check interruption system local lock held disabled interruption later system The former physical disablement latter logical disablement local lock impact within address space physical disablement impact address space defined four type SVC routine called Type Type added additional Type similar Type except SVC routine physically disabled Type never defined implemented The following information part table augmented give idea consideration involved writing SVC routine The size restriction type SVC routine necessary loaded designated transient area PLPA invoked general way restricting use SVCs Consequently quite number unintentional exposure possible employing certain sequence SVCs instruction It became common practice curious user attempt discover exposure system programmer used exposure rather develop SVCs Beginning IBM considered system design error would allow application program enter supervisor state without authorization They mandated IBM SVCs protected close exposure They guaranteed close exposure discovered By Release nearly every exposure indeed identified closed cost Authorized Program Analysis Reports APARs related PTFs This remarkable achievement system time thereafter measured rather even Select would like share page Licensed associate Mental Health Counselor Marriage Family Therapist must approved supervisor gaining clinical hour full licensure Associates may seek either Washington State Approved Supervisor AAMFT Approved Supervisor meet requirement Essentially Washington State set requirement shown meeting Approved Supervisor requirement AND AAMFT developed set requirement meet Washington State requirement exceed For complete detail becoming AAMFT Approved Supervisor please Supervisors seeking Supervisory Status The Washington State Department Health DOH list requirement Licensed Mental Health Professionals must adhere order offer supervisory service licensed candidate Please refer specific WAC complete requirement Should choose supervise licensed candidate must valid current license two year good standing without restriction You legally cohabitate licensed candidate candidate peer therapist licensed candidate within last two year If counselor looking become Washington State Approved Supervisor please refer Washington State DOH state reciprocity ensure meet Washington State requirement Before begin supervision provide candidate Declaration Supervision ensure met state requirement state fact qualify Washington State approved supervisor By stating following attesting completed requirement To see A supervision course Continuing education credit supervision Supervision supervision Or combination Practice setting Record keeping Financial management Ethics clinical practice A backup plan coverage To ensure meeting requirement please sure review individual form WAC related specific license type To act supervisor certifed counselor must meet following Have active credential field minimum five year The credential credential must good standing serving supervisor You must blood legal relative cohabitant credential holder someone acted credential holder counselor within past two year You must reciprocal supervisory arrangement another credential holder Prior commencement supervision must provide certified counselor declaration The declaration form house link related WAC found linked Forms Used section Each form linked INCLUDES Declaration Supervision statement must completed submitted Department Health Washington State well given counselor supervised accordance Washington State regulation Form DOH Please review WAC Form DOH Please review WAC Form DOH Please review WAC Links related WAC included form Hours Supervision State Washington one form supervisor form one form supervisor form one form supervisor Also see Counseling Washington available paid clinical supervision private practice counselor working toward licensure Please contact Lisa Counseling Washington customer service support issue Tel Write u Counseling Washington PO Box Bellevue WA Copyright Counseling Seattle LLC Counseling Washington All right reserved Alice Wonder Marketing Kevin Gross longtime political candidate run Commission three time recently Clerk Courts But name never appeared ballot He never mailed campaign flier even set campaign website Still Gross campaign candidate big influence Seminole election process shutting majority county voter Now Seminole County Supervisor Elections Michael Ertel urging legislator take another crack closing loophole state election law allows candidate Gross others across Central Florida close primary voter This little loophole kind bastardized election process Ertel said This voter faith trust process And job make sure everyone understands process working fairly According state law registered voter eligible vote primary election one party field candidate But exception If candidate party affiliation enters race primary open registered voter party candidate The winner primary face candidate general election Because candidate name appear ballot virtually assures person primary win seat A never election Florida according Tampa Bay Times Ertel alone disdain many consider election trick allows candidate whose name ballot target appeal voter single party rather voter Last month Palm Beach State Attorney Dave Aronberg submitted proposal Constitutional Revision Commission end practice statewide referendum When state senator Aronberg Democrat proposed legislation close evil loophole garner enough support The loophole disenfranchised voter butterfly ballot hanging chad list ever Aronberg said It benefit political party party boss expense In Seminole election Clerk Court Grant Maloy defeated two fellow August primary faced candidate Gross Michael Don Johnson whose name appear ballot November general election The candidate prevented voting Gross could reached comment candidate popped Central Florida Last year Bill Vose filed run candidate state attorney race thereby closing primary voter State Attorney Aramis Ayala Democrat primary general election Vose received vote cast Vose registered Republican No man former State Attorney Lawson Lamar office said last week ran candidate primarily want pay qualifying fee race Vose also donated Ayala campaign Ertle urged lawmaker end practice Seminole legislative delegation meeting last week State agreed loophole throw wrench election process said certainly consider looking issue upcoming legislative session We need look see create solution Simmons said Ertel proposes candidate run primary based party registration So candidate Republican would run Republican primary rather general election In scenario GOP fielded candidate voter regardless party affiliation would able vote primary Even candidate could turn table switching party likely field candidate Ertel acknowledged However state law candidate would change party affiliation day election requiring level potentially close primary This totally eliminate gamesmanship Ertel said You never get politics politics But put fairness State Bob Cortes Springs Scott Plakon Jason Brodeur respond request comment closing loophole Aubrey Jewett political science professor University Central Florida see much hope lawmaker close loophole Most Republicans Democrats like keep party primary closed Jewett said That like control nomination Orange County Supervisor Elections Bill Cowles cried hallelujah heard Ertel effort also optimistic What supervisor election Florida know going able remove Cowles said It well embedded November Orlando FL December Daytona Beach Shores FL January San Diego CA January Orlando FL A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition 
system design	process defining module interface satisfy specified Systems design could seen application There overlap discipline If broader topic blend perspective marketing design manufacturing single approach product development design act taking marketing information creating design product manufactured Systems design therefore process defining developing satisfy specified user Until system design crucial respected role industry In hardware software resulted ability build system The increasing importance software running generic platform enhanced discipline method becoming widely used method computer system design The become standard language analysis design It widely used modeling software system increasingly used high designing system organization The architectural design system emphasizes design describes system analysis The logical design system pertains abstract representation data flow input output system This often conducted via modelling using sometimes graphical model actual system In context system design included Logical design includes ER diagram The physical design relates actual input output process system This explained term data input system processed displayed In physical design following requirement system decided Put another way physical portion system design generally broken three User Interface Design concerned user add information system system present information back Data Design concerned data represented stored within system Finally Process Design concerned data move system validated secured transformed flow system At end system design phase documentation describing three produced made available use next phase Physical design context refer tangible physical design information system To use analogy personal computer physical design involves input via keyboard processing within CPU output via monitor printer etc It would concern actual layout tangible hardware PC would monitor CPU motherboard hard drive modem card USB slot etc It involves detailed design user product database structure processor control processor The personal specification developed proposed system RAD methodology system designer produce prototype The review prototype offer feedback suitability This process repeated satisfied final system JAD methodology evolved RAD system designer consults group consisting following party JAD involves number stage group collectively develops agreed pattern design implementation system Systems Design Engineering SDE founded The firm established provide public private sector client Over year firm continued expand technical capability geographic client base SDE construction arm SDE Construction Inc pride able provide client wide variety professional service tailored meet client unique objective need The firm specializes providing civil site environmental engineering planning service client throughout eastern Pennsylvania Our range project included collection treatment subdivision land development residential commercial industrial us comprehensive planning study water facility planning study environmental impact study municipal consultation recreation planning operation service water plant code preparation enforcement construction management Surveying land planning consulting service assisted client subdivision land development The firm experience includes residential commercial industrial institutional land development The experience ranged project actual construction Private sector planning included carrying capacity fiscal impact analysis SDE staff served capacity client representative consultant expert witness numerous zoning hearing board request land use challenge landowner curative amendment SDE assisted client subdivision land development residential commercial industrial project industrial treatment residual waste generator study environmental site assessment general industrial plant Systems Design Engineering provides full range Municipal Engineering Services municipality Berks Schuylkill Montgomery Counties Following list typical service professional staff provides client SDE staff resource well proven experience fulfill need township municipality borough In SDE role SDE Staff involved providing following related service municipal client GitHub home million developer working together host review code manage project build software together Use Git checkout SVN using web URL How prepare system design question IT company System design broad topic Even software engineer many year working experience top IT company may expert system design If want become expert need read many book article solve real large scale system design problem This repository teach handle system design interview systematic approach short time You dive topic time Of course welcome add thought Spend minute questioning interviewer agreeing scope system Remember make sure know requirement interviewer tell beginning User case indicate main function system constraint list scale system request per second request type data written per second data read per second Sketch important component connection go detail Usually scalable system includes webserver load balancer service service partition database database cluster plug cache For component need write specific APIs component You may need finish detailed OOD design particular function You may also need design database schema database Here article system design related topic Of course want dive system related topic good collection reading list good collection material If going onsite company read engineering blog The following help understand general design idea different real product system There good reference question The reference slide article Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Reference Use case description sequence event taken together lead system something useful Who going use going use The system may simple complicated Special system requirement read write oriented Map identity class one scenario one class core object scenario one class Consider relationship among class certain class must unique instance one object many object composition one object another object inheritance Identify attribute class change noun variable action method Use design pattern reused multiple application field focus design manage At core system engineering utilizes principle organize body knowledge Issues different team testing evaluation maintainability many necessary successful system development design implementation ultimate decommission become difficult dealing large complex project Systems engineering deal optimization method tool project It overlap technical discipline Systems engineering ensures likely aspect project system considered integrated whole The system engineering process discovery process quite unlike manufacturing process A manufacturing process focused repetitive activity achieve high quality output minimum cost time The system engineering process must begin discovering real problem need resolved identify probable highest impact failure occur system engineering involves finding elegant solution problem The term traced back The need identify manipulate property system whole complex engineering project may greatly differ sum part property motivated various industry especially developing system Military apply discipline When longer possible rely design evolution improve upon system existing tool sufficient meet growing demand new method began developed addressed complexity directly The continuing evolution system engineering comprises development identification new method modeling technique These method aid better comprehension design development control engineering system grow complex Popular tool often used system engineering context developed time including In professional society system engineering NCOSE founded representative number corporation organization NCOSE created address need improvement system engineering practice education As result growing involvement system engineer outside name organization changed INCOSE Schools several country offer graduate program system engineering option also available practicing engineer Systems engineering signifies approach recently discipline engineering The aim education system engineering formalize various approach simply identify new method research opportunity similar occurs field engineering As approach system engineering holistic interdisciplinary flavour The traditional scope engineering embrace conception design development production operation physical system Systems engineering originally conceived fall within scope Systems engineering sense term refers distinctive set concept methodology organizational structure developed meet challenge engineering effective functional system unprecedented size complexity within time budget constraint The leading example system engineering project The use term system engineer evolved time embrace wider holistic concept system engineering process This evolution definition subject ongoing controversy term continues apply narrower broader scope Traditional system engineering seen branch engineering classical sense applied physical system space craft aircraft More recently system engineering evolved take broader meaning especially human seen essential component system Checkland example capture broader meaning system engineering stating read general sense engineer meeting political agreement Consistent broader scope system engineering Systems Engineering Body Knowledge SEBoK defined three type system engineering Product Systems Engineering PSE traditional system engineering focused design physical system consisting hardware software Enterprise Systems Engineering ESE pertains view enterprise organization combination organization system Service Systems Engineering SSE engineering service system Checkland defines service system system conceived serving another system Most civil infrastructure system service system Systems engineering focus analyzing eliciting customer need required functionality early development cycle documenting requirement proceeding design synthesis system validation considering complete problem This includes fully understanding involved Oliver et al claim system engineering process decomposed Within Oliver model goal Management Process organize technical effort lifecycle Technical Process includes Depending application although several model used industry aim identify relation various stage mentioned incorporate feedback Examples model include System development often requires contribution diverse technical discipline By providing system view development effort system engineering help mold technical contributor unified team effort forming structured development process proceeds concept production operation case termination disposal In acquisition holistic integrative discipline combine contribution balance tradeoff among cost schedule performance maintaining acceptable level risk covering entire life cycle item This perspective often replicated educational program system engineering course taught faculty engineering department help create interdisciplinary environment The need system engineering arose increase complexity system project turn exponentially increasing possibility component friction therefore unreliability design When speaking context complexity incorporates engineering system also logical human organization data At time system become complex due increase size well increase amount data variable number field involved design The example system The development smarter control algorithm microprocessor design analysis environmental system also come within purview system engineering Systems engineering encourages use tool method better comprehend manage complexity system Some example tool seen Taking approach engineering system inherently complex since interaction among system component always immediately understood Defining characterizing subsystem interaction among one goal system engineering In gap exists informal requirement user operator marketing organization technical specification successfully bridged One way understand motivation behind system engineering see method practice identify improve common rule exist within wide variety system Keeping mind principle system engineering holism emergent behavior boundary et al applied system complex otherwise provided employed level Besides defense aerospace many information technology based company software development firm industry field electronics communication require system engineer part team An analysis INCOSE Systems Engineering center excellence SECOE indicates optimal effort spent system engineering total project effort At time study shown system engineering essentially lead reduction cost among benefit However quantitative survey larger scale encompassing wide variety industry conducted recently Such study underway determine effectiveness quantify benefit system engineering Systems engineering encourages use validate assumption theory system interaction within Use method allow early detection possible failure integrated design process At time decision made beginning project whose consequence clearly understood enormous implication later life system task modern system engineer explore issue make critical decision No method guarantee today decision still valid system go service year decade first conceived However technique support process system engineering Examples include soft system methodology method UML currently explored evaluated developed support engineering decision process Education system engineering often seen extension regular engineering course reflecting industry attitude engineering student need foundational background one traditional engineering discipline practical experience effective system engineer Undergraduate university program system engineering rare Typically system engineering offered graduate level combination interdisciplinary study maintains continuously updated Directory Systems Engineering Academic Programs worldwide As institution United States offer undergraduate graduate program system engineering Education system engineering taken Both pattern strive educate system engineer able oversee interdisciplinary project depth required Systems engineering tool aid performing system engineering The purpose tool vary database management graphical browsing simulation reasoning document production neutral There many definition field system engineering Below authoritative definition Depending application tool used various stage system engineering process play important diverse role system engineering A model defined several way including Together definition broad enough encompass physical engineering model used verification system design well schematic model like mathematical quantitative model used trade study process This section focus last The main reason using trade study provide estimate system effectiveness performance technical attribute cost set known estimable quantity Typically collection separate model needed provide outcome variable The heart mathematical model set meaningful quantitative relationship among input output These relationship simple adding constituent quantity obtain total complex set differential equation describing trajectory spacecraft gravitational field Ideally relationship express causality correlation Furthermore key successful system engineering activity also method model efficiently effectively managed used simulate system However diverse domain often present recurring problem modeling simulation system engineering new advancement aiming crossfertilize method among distinct scientific engineering community title Systems Engineering Initially primary purpose system engineer comprehend complex problem graphic representation system used communicate system functional data requirement Common graphical representation include A graphical representation relates various subsystem part system function data interface Any method used industry based requirement For instance chart may used interface system important Part design phase create structural behavioral model system Once requirement understood responsibility system engineer refine determine along engineer best technology job At point starting trade study system engineering encourages use weighted choice determine best option A Pugh method one way another make choice considering criterion important The trade study turn informs design affect graphic representation system without changing requirement In SE process stage represents iterative step carried feasible solution found A decision matrix often populated using technique statistical analysis reliability analysis system dynamic feedback control optimization method SysML modeling language used system engineering application support specification analysis design verification validation broad range complex system LML modeling language designed system engineering support full lifecycle conceptual utilization support retirement stage Many related field may considered tightly coupled system engineering These area contributed development system engineering distinct entity In section talk question require interviewee design architecture sort software system This web facing service RESTful API desktop app The exact type question likely vary depending specific company interview We give example question Hopefully example question give idea talking The web full many example In addition book Cracking Coding Interview small section offering question These question may seem intimidating first After one design Google Search minute It took many smart people several year properly Don worry one really expects The idea question discussion problem hand What important interviewer process use tackle problem The typical outcome discussion architecture addressing goal constraint question Perhaps interviewer choose one area want discus bottleneck common problem Remember one right answer A system built different way The important thing able justify idea This somewhat different algorithm design question looked previous chapter Finally keep mind discussion system design problem could go different direction depending goal interviewer They may willing see create architecture covering aspect system Or rather could interested looking specific area diving deeper In case strategy approach different situation We look strategy next section Similar algorithmic question believe system design question require combination right strategy knowledge By strategy mean way approach problem interview We seen good candidate fail lack knowledge focus right thing discussing problem Because next section present strategy approaching system design question tech interview In addition collected useful online resource help update knowledge software system design Now idea system design question look like let talk strategy solving interview We also look example problem help u apply strategy chapter Established year ago Department Systems Design Engineering University Waterloo Canada still hosting flexible program interdisciplinary Systems design cover technical environmental socioeconomic political aspect engineering process using system design methodology Our community home student dedicated faculty supportive staff thousand alumnus worldwide including successful entrepreneur graduate Waterloo Professor Chris Eliasmith Director Centre Theoretical Neuroscience faculty member Systems Design Engineering featured The Record work building world biggest functional model human brain Article Andre Bertram Systems Design Engineering Frank Nguyen Computer Engineering They developing wearable product like HeartWatch wearable heart monitoring system contact EMS event heart attack Recently Andre Frank showcased TV show Dragon Den They impressive every Dragon invested Devinder Kumar student Alexander Wong Associate Professor Systems Design Engineering featured article Canadian Underwriter software make easier adopt trust AI Engineering Floor Extension System design process defining element system architecture module component different interface component data go system It meant satisfy specific need requirement business organization engineering coherent system Systems design implies systematic approach design system It may take approach either way process systematic wherein take account related variable system need architecture required hardware software right data travel transforms throughout travel system Systems design overlap system analysis system engineering system architecture The system design approach first appeared right World War II engineer trying solve complex control communication problem They needed able standardize work formal discipline proper method especially new field like information theory operation research computer science general Techopedia Terms Copyright Techopedia Designing Large Scale Distributed Systems become standard part software engineering interview Engineers struggle System Design Interviews SDIs primarily following two reason A great performance SDIs highly rewarding since reflects upon ability work complex system translates position compensation salary stock interviewing company offer At talked hundred candidate went design interview As part process compiled list frequently asked System Design Interview Questions Following frequently asked question along pointer thing interviewer want consider designing system Given typically long URL would would design service would generate shorter unique alias Discuss thing like Videos mean service storing transmitting petabyte petabyte discus efficiently store distribute data away huge number user watch share simultaneously imagine streaming latest episode hit TV show like Games Thrones In addition discus Interviewers interested knowing Users service post question share link Other user answer question comment shared link The service able Discuss thing like When designing social medial service hundred million billion user interviewer interested knowing would design following component A lot time interviewer spend whole interview discussing design newsfeed While designing service discus thing like For user type query need design service would suggest top searched term starting whatever user typed Discuss thing like For Web Crawler design scalable service crawl entire Web fetch hundred million Web document Discuss thing like You expected develop Rate Limiter service This service would need store location million Discuss thing like Following resource help prepare software engineering interview Happy interviewing By clapping le signal u story really stand  Educative help learn programming using interactive course let author quickly create publish sell course hacker start afternoon Instantly share code note snippet Picking right architecture Picking right battle Managing please add legend diagram This great technical It missing methodology according Agile architecture done developing front Matter fact might even bad decide topic developing sleeping software Please see I see mention message queue task scheduling RPC This interesting missing mention security It always better design start try retrofit later Picking right architecture Picking right battle Managing vague Architecture come project requirement Requirements Architecture gon na make micro service blog This great document would remain reference future interview In addition I found following two Quora answer quite helpful Also read course discussed good set design problem Can talk trade offs Like choosing SQL NoSQL Databases Availability pattern Design pattern Cover CDN detail 
system  life  cycle	The view system proposed system address phase existence include system conception design development production construction distribution operation maintenance support retirement disposal The conceptual design stage stage identified need examined requirement potential solution defined potential solution evaluated system specification developed The system specification represents technical requirement provide overall guidance system design Because document determines future development stage completed conceptual determined system specification properly address motivating need Key step within conceptual design stage include During stage system lifecycle subsystem perform desired system function designed specified compliance system specification Interfaces subsystem defined well overall test evaluation requirement At completion stage development specification produced sufficient perform detailed design development Key step within preliminary design stage include For example system analyst Viti Bank tasked examine current information system Viti Bank fast growing bank Fiji Customers remote rural area finding difficulty access bank service It take day even week travel location access bank service With vision meeting customer need bank requested service examine current system come solution recommendation current system provided meet need This stage includes development detailed design brings initial design work completed form specification This work includes specification interface system intended environment comprehensive evaluation system logistical maintenance support requirement The detail design development responsible producing product process material specification may result substantial change development specification Key step within detail design development stage include During production construction stage product built assembled accordance requirement specified product process material specification deployed tested within operational target environment System assessment conducted order correct deficiency adapt system continued improvement Key step within product construction stage include Once fully deployed system used intended operational role maintained within operational environment Key step within utilization support stage include Effectiveness efficiency system must continuously evaluated determine product met maximum effective lifecycle Considerations include Continued existence operational need matching operational requirement system performance feasibility system versus maintenance availability alternative system The system life cycle series stage worked development new information system A lot time money wasted system developed work properly exactly required A new system much likely successful carefully planned developed The first stage system life cycle This investigation carried system analyst find main problem existing system technically possible solve problem developing computer based solution During analysis stage system analyst investigate existing system identify exactly problem existing system Systems analyst use variety method gather information example A design specification produced containing information This stage involves Setting system match design specification Testing carried using plan make sure part system work correctly normal extreme erroneous data Might include Carried new system running week month identify modification may need made A new information system may need changed due Copyright Revision World Networks Ltd The also referred term used describe process planning creating testing deploying The system development lifecycle concept applies range hardware software configuration system composed hardware software combination A system development life cycle composed number clearly defined distinct work phase used system engineer system developer plan design build test deliver Like anything manufactured assembly line SDLC aim produce system meet exceed customer expectation based customer requirement delivering system move clearly defined phase within scheduled time frame cost estimate Computer system complex often especially recent rise link multiple traditional system potentially supplied different software vendor To manage level complexity number SDLC model methodology created synchronize stabilize SDLC described along spectrum agile iterative sequential methodology Agile methodology focus lightweight process allow rapid change without necessarily following pattern SDLC approach along development cycle methodology focus limited project scope expanding improving product multiple iteration Sequential BDUF model waterfall focus complete correct planning guide large project risk successful predictable result Other model tend focus form development guided project scope adaptive iteration feature development In project defined PLC SDLC slightly different activity occur According Taylor project life cycle encompasses activity system development life cycle focus realizing product SDLC used development IT project describes different stage involved project drawing board completion project The SDLC methodology per se rather description phase life cycle application Software Development Embedded Systems Hardware Software Design These phase broadly speaking investigation analysis design build test implement maintenance support All development methodology commonly known waterfall scrum methodology follow SDLC phase method varies vastly methodology In Scrum methodology example one could say single user story go phase SDLC within single sprint Contrast waterfall methodology another example every business requirement recorded analysis phase SDLC document called Business Requirements Specification translated description recorded design phase document called Functional Specification built one go collection solution feature typically period three nine month These methodology obviously quite different approach yet contain SDLC phase requirement born travel life cycle phase ending final phase maintenance support typically whole life cycle start subsequent version software application The describes process building information system deliberate structured methodical way reiterating stage product life The system development life cycle according Elliott Strachan Radford originated develop large scale functional age large scale Information system activity revolved around heavy routine Several system development framework partly based SDLC SSADM produced UK government Ever since according Elliott traditional life cycle approach system development increasingly replaced alternative approach framework attempted overcome inherent deficiency traditional SDLC The system development life cycle framework provides sequence activity system designer developer follow It consists set step phase phase SDLC us result previous one The SDLC adheres important phase essential developer explained section It includes evaluation present system information gathering feasibility study request approval A number SDLC model created waterfall fountain spiral build fix rapid prototyping incremental synchronize stabilize The oldest best known waterfall model sequence stage output stage becomes input next These stage characterized divided different way including following In following diagram stage system development life cycle divided ten step definition creation modification IT work product Not every project require phase sequentially executed However phase interdependent Depending upon size complexity project phase may combined may overlap The system investigates IT proposal During step must consider current priority would affected handled Before system planning done conducted determine creating new improved system viable solution This help determine cost benefit resource requirement specific user need required completion The development process continue management approves recommendation feasibility study Following different component feasibility study The goal determine problem attempt fix system This step involves system different piece analyze situation analyzing project goal breaking need created attempting engage user definite requirement defined In design function operation described detail including screen layout business rule process diagram documentation The output stage describe new system collection module subsystem The design stage take initial input requirement identified approved requirement document For requirement set one design element produced result interview workshop prototype effort Design element describe desired system feature detail generally include functional hierarchy diagram screen layout diagram table business rule business process diagram complete diagram full data dictionary These design element intended describe system sufficient detail skilled developer engineer may develop deliver system minimal additional input design Environments controlled area system developer build distribute install configure test execute system move SDLC Each environment aligned different area SDLC intended specific purpose Examples environment include The code tested various level Unit system user acceptance testing often performed This grey area many different opinion exist stage testing much iteration occurs Iteration generally part waterfall model mean rectify defect validate fix prior deployment incorporated phase The following type testing may relevant depending type system development Once system stabilized adequate testing SDLC ensures proper training system performed documented transitioning system support staff end user Training usually cover operational training people responsible supporting system well training end user using system delivery production operating environment After training successfully completed system engineer developer transition system final production environment intended used end user supported support operation staff The system includes change enhancement decommissioning sunset system system important aspect SDLC As key personnel change position organization new change implemented There two approach system development traditional approach structured Information Engineering includes traditional system approach also called structured analysis design technique The object oriented approach view information system collection object integrated make full complete information system The final phase SDLC measure effectiveness system evaluate potential enhancement The process developing information system IS effectively use hardware software data process people support company business objective System analysis design considered activity serf set stage bound problem SAD leveraged set correct balance among competing requirement functional analysis domain System analysis design interacts strongly distributed enterprise architecture enterprise Architecture business architecture relies heavily concept partitioning interface persona role modeling arrive system description This high level description broken component module analyzed designed constructed separately integrated accomplish business goal SDLC SAD cornerstone full life cycle product system planning analysis OOA process analyzing task also known develop conceptual model used complete task A typical OOA model would describe computer software could used satisfy set requirement During analysis phase programmer might consider written requirement statement formal vision document interview stakeholder interested party The task addressed might divided several subtasks domain representing different business technological area interest Each subtask would analyzed separately Implementation constraint system built considered analysis phase rather addressed design OOD The conceptual model result OOA typically consist set one number It may also include kind The input design provided output Realize output artifact need completely developed serve input design analysis design may occur parallel practice result one activity feed short feedback cycle iterative process Both analysis design performed incrementally artifact continuously grown instead completely developed one shot Some typical common type design analysis input artifact The SDLC phase serve programmatic guide project activity provide flexible consistent way conduct project depth matching scope project Each SDLC phase objective described section key deliverable description recommended task summary related control objective effective management It critical project manager establish monitor control objective SDLC phase executing project Control objective help provide clear statement desired result purpose used throughout entire SDLC process Control objective grouped major category domain relate SDLC phase shown figure To manage control SDLC initiative project required establish degree WBS capture schedule work necessary complete project The WBS programmatic material kept project description section project notebook The WBS format mostly left project manager establish way best describes project work There key area must defined WBS part SDLC policy The following diagram describes three key area addressed WBS manner established project manager The diagram show coverage span numerous phase SDLC associated MCD subset primary mapping SDLC phase For example Analysis Design primarily performed part Acquisition Implementation Domain System Build Prototype primarily performed part delivery support The upper section work breakdown structure WBS identify major phase milestone project summary fashion In addition upper section provide overview full scope timeline project part initial project description effort leading project approval The middle section WBS based seven system development life cycle phase guide WBS task development The WBS element consist milestone task opposed activity definitive period usually two week Each task must measurable output document decision analysis A WBS task may rely one activity software engineering system engineering may require close coordination task either internal external project Any part project needing support contractor SOW written include appropriate task SDLC phase The development SOW occur specific phase SDLC developed include work SDLC process may conducted external resource contractor Baselines important part system development life cycle These baseline established four five phase SDLC critical iterative nature model Each baseline considered milestone SDLC Complementary system development life cycle Few people modern computing world would use strict waterfall model SDLC many modern methodology superseded thinking Some argue SDLC longer applies model like Agile computing still term widely use technology circle The SDLC practice advantage traditional model system development lends structured environment The disadvantage using SDLC methodology need iterative development web development stakeholder need review regular basis software designed Instead viewing SDLC strength weakness perspective far important take best practice SDLC model apply whatever may appropriate software designed A comparison strength weakness SDLC An alternative SDLC rapid application development combine prototyping joint application development implementation CASE tool The advantage RAD speed reduced development cost active user involvement development process The life cycle enables user transform project operational one The System Development Life Cycle SDLC short multistep iterative process structured methodical way This process used model provide framework technical activity deliver quality system meet exceeds business expectation manage progression Traditionally life cycle consisted five stage That increased seven phase Increasing number step helped system analyst define clearer action achieve specific goal Similar project life cycle PLC SDLC us system approach describe process It often used followed IT IS project development The SDLC highlight different stage phrase step development process The life cycle approach used user see understand activity involved within given step It also used let know time step repeated previous step reworked needing modify improve system This first phase system development process It identifies whether need new system achieve business strategic objective This preliminary plan feasibility study company business initiative acquire resource build infrastructure modify improve service The company might trying meet exceed expectation employee customer stakeholder The purpose step find scope problem determine solution Resources cost time benefit item considered stage The second phase business work source problem need change In event problem possible solution submitted analyzed identify best fit ultimate goal project This team consider functional requirement project solution It also system analysis take analyzing need end user ensure new system meet expectation Systems analysis vital determining business need well met responsible individual piece project sort timeline expected There several tool business use specific second phase They include The third phase describes detail necessary specification feature operation satisfy functional requirement proposed system place This step end user discus determine specific business information need proposed system It phase consider essential component hardware software structure networking capability processing procedure system accomplish objective The fourth phase real work particular programmer network engineer database developer brought major work project This work includes using flow chart ensure process system properly organized The development phase mark end initial section process Additionally phase signifies start production The development stage also characterized instillation change Focusing training huge benefit phase The fifth phase involves system integration system testing program procedure carried Quality Assurance QA determine proposed design meet initial set business goal Testing may repeated specifically check error bug interoperability This testing performed end user find acceptable Another part phase verification validation help ensure program successful completion The sixth phase majority code program written Additionally phase involves actual installation system This step put project production moving data component old system placing new system via direct cutover While risky complicated move cutover typically happens hour thus minimizing risk Both system analyst see realization project implemented change The seventh final phase involves maintenance regular required update This step end user system wish boost performance add new capability meet additional user requirement If business determines change needed phase SDLC company might proceed life cycle phase The life cycle approach project process Even though step difficult others none overlooked An oversight could prevent entire system functioning planned Systems development specialist Innovative Architects posse extensive experience managing type project If situation organization think customized software solution may need today Innovative Architects able quickly guide step ensuring new system online soon possible We partner diverse list provider always get right solution Microsoft Gold Certified Partner Managed Microsoft Consulting Services Partner Integration Consultants BizTalk Consulting Server Implementation SharePoint Consulting Development Microsoft SOA Solutions Business Performance IT EDI Consulting Services With office located minute away Atlanta Duluth Georgia Washington Innovative Architects expert IT consulting firm offering comprehensive Microsoft consulting service Georgia Alabama Florida Tennessee North Carolina South Carolina Mississippi New York Business Software Implementation Custom Solutions All right reserved Website SEO Advantage MITRE system engineer SEs orchestrate complete development need operation applying set building block SEs expected understand work fundamental building block engineering system regardless specific methodology used They expected define system conceptually transform user need system requirement develop ass architecture They expected compose ass alternative design development approach develop test certification strategy monitor ass contractor effort design development integration test assist field deployment operation maintenance All system engineering model process organized around concept life cycle Although detailed view implementation terminology used articulate SE life cycle differ across MITRE sponsor share fundamental element For example Department Defense DoD Instruction us following phase however conceptualization system life cycle mean unique international system engineering standard covering process stage It defines set process divided four category technical project agreement enterprise Example stage described document concept development production utilization support retirement The International Council Systems Engineering INCOSE us consistent approach Systems Engineering Handbook The V model pp shown Figure common graphical representation system engineering life cycle The left side V represents concept development decomposition requirement function physical entity architected designed developed The right side V represents integration entity including appropriate testing verify satisfy requirement ultimate transition field operated maintained The model used SEG based representation For phase written article succinctly describe major activity cycle They summarized This first phase concerned transforming user expression operational need concept operation conceptual definition set initial operational requirement Articles topic area include In phase detailed system requirement elicited user stakeholder requirement analyzed refined plan process managing requirement throughout rest system life cycle developed With today complex system requirement always degree instability uncertainty method accommodate included well phase Articles topic area include Once requirement expressed folded management process system architecture described The architecture foundation development integration testing operation interfacing improvement system time go In system architecture article discus various architecture pattern architecture architectural framework DoDAF architectural framework formal process developing architecture Articles topic area include At point system life cycle complete comprehensive description system expected perform developed along architectural representation guide actual design development hardware software interface Articles topic area include During design development phase system subsystem complete In next system integration phase system component interface system integrated operational whole Articles topic area include Because system completely designed point necessary test Testing phase also involves property reliability security interoperability Articles topic area include Finally ensure successful transition system field plan procedure must developed operation maintenance Because technological underpinnings system constantly changing product improvement including insertion new technology must planned This topic staging area article subject relevance SE Building Blocks neatly fit one topic In case subject matter edge understanding system engineering represents difficult problem MITRE SEs work yet formed sufficient critical mass constitute separate topic The system life cycle described rarely ever linear discussion might imply There often iterative cycle missing phase overlapping element etc Additionally process activity may apply one phase system life cycle better envisioned threading overarching building block For series article written topic called These include two article modeling simulation MITRE Systems Engineering Guide Questions Contact Streamlined development relies consistent methodology process getting point A point B If getting foot wet wide world development need understand Software Development Life Cycle SDLC SDLC Software Development Life Cycle process produce software highest quality lowest cost shortest time SDLC includes detailed plan develop alter maintain replace software system SDLC involves several distinct stage including planning design building testing deployment Popular SDLC model include SDLC work lowering cost software development simultaneously improving quality shortening production time SDLC achieves apparently divergent goal following plan remove typical pitfall software development project That plan start evaluating existing system deficiency Next defines requirement new system It creates software stage design development testing deployment By anticipating costly mistake like failing ask end user suggestion SLDC eliminate redundant rework fix Following best practice stage SDLC ensures process work smooth efficient productive way The changed SDLC way Developers responsible step entire development process We also see value shifting left When development Ops team use toolset track performance pin defect inception retirement application provides common language faster handoff team APM tool used development QA production This keep everyone using toolset across entire development lifecycle Read More The common SDLC example SDLC model listed SDLC done right allow highest level management control documentation Developers understand build All party agree goal front see clear plan arriving goal Everyone understands cost resource required Several pitfall turn SDLC implementation roadblock development tool help u Failure take account need customer user stakeholder result poor understanding system requirement outset The benefit SDLC exist plan followed faithfully Stackify State Line Rd Ste Leawood KS SDLC also abbreviation Synchronous Data Link Control The system development life cycle SDLC conceptual model used describes stage involved information system development project initial feasibility study maintenance completed application Bringing development IT ops together help address many app deployment challenge Our expert guide highlight benefit DevOps approach Explore successfully integrate team improve collaboration streamline testing You forgot provide Email Address This email address appear valid This email address already registered Please You exceeded maximum character limit Please provide Corporate Address By submitting Email address I confirm I read accepted Terms Use By submitting personal information agree TechTarget may contact regarding relevant content product special offer You also agree personal information may transferred processed United States read agree Various SDLC methodology developed guide process involved including original SDLC method rapid application development RAD joint application development fountain model build fix Frequently several model combined sort hybrid methodology Documentation crucial regardless type model chosen devised application usually done parallel development process Some method work better specific type project final analysis important factor success project may closely particular plan followed In general SDLC methodology follows following step Find content member offer By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States Few would deny adopting microservices provides benefit enough secure microservices We explore Container platform enable high degree portability container portability limitation related Open source certainly made impact including application development management This guide look Oracle great job getting Java SE released earlier year modularity various smaller update may enough At JavaOne Oracle identified four project significant impact future Java Project Valhalla Whether secure cloud secure mobile device secure IOT interaction organization making blockchain security IBM joined Docker MTA program make easier enterprise modernize existing application using container This product update explores new database software release ScaleArc SQL Server integrated Learn architecture help digital transformation despite many structure exist Expert AWS gave automation capability boost release CloudFormation StackSets feature let dev team deploy VMware Cloud AWS provides option Dedicated Hosts offer increased isolation But majority AWS Amazon SQS enables user process track task queue Combine Lambda CloudWatch add extra message software pricing associated cloud also useful deployment shown MIT lecturer Ben Shields say business learn lot analytical progress sport Visual data analysis important first step advanced analytics project analyst data scientist CEO Sacha Rose say specialist reporting tool saved company thousand avoiding unnecessary mistake WestJet initial gamification project focus expense reporting HR transformed watch The healthcare wearable commonly seen today think Fitbit provide clinically valuable data health IT expert Although healthcare organization wavered trusting data cloud service provider area cloud Healthcare organization want work toward initiative may want consider outsourcing IT support The Agile philosophy rigid dogmatic good The DevOps evangelist better pay attention risk DevOps Out old new right Not much come application security Old danger linger remain Warning All IoT product could set DevOps practice principle back year thanks lack industry All Rights Reserved System Development Life Cycle SDLC series six main phase create hardware system software system combination meet exceed customer expectation broad general term per Wikipedia A set interacting interdependent component forming integrated whole term used different industry therefore limited term explains phase creating software component integrates software component create whole system Some specific take SDLC include Below take general look System Development Life Cycle phase bearing mind system different term complexity required component expected solution functionality The Planning phase crucial step creating successful system phase decide exactly want problem trying solve After analyzing data three choice develop new system improve current system leave system The requirement determined documented expectation system perform A feasibility study made project well involving determining whether organizationally economically socially technologically feasible important maintain strong communication level client make sure clear vision finished product function The design phase come good understanding customer requirement phase defines element system component security level module architecture different interface type data go system A general system design done pen piece paper determine system look like function detailed expanded system design produced meet functional technical requirement logically physically This phase come complete understanding system requirement specification actual construction process complete illustrated design requested system In Software Development Life Cycle actual code written system contains hardware implementation phase contain configuration hardware meet certain requirement function In phase system ready deployed installed customer premise ready become running live productive training may required end user make sure know use system get familiar implementation phase may take long time depends complexity system solution present Bringing different component subsystem together create whole integrated system Introducing system different input obtain analyze output behavior way function Testing becoming important ensure customer satisfaction requires knowledge coding hardware configuration design Testing performed real user team specialized personnel also systematic automated ensure actual outcome compared equal predicted desired outcome In phase periodic maintenance system carried make sure system become obsolete include replacing old hardware continuously evaluating system performance also includes providing latest update certain component make sure meet right standard latest technology face current security threat These main six phase System Development Life Cycle iterative process project It important mention excellent communication level maintained customer Prototypes important helpful come meeting requirement By building system short iteration guarantee meeting customer requirement build whole system Many model system development life cycle came idea saving effort money time addition minimizing risk meeting customer requirement end project thesis model Continues improvement fixing system essential Airbrake provides robust bug capturing application In notifies bug instantly allows easily review tie bug individual piece code trace cause back recent change Airbrake enables categorize search prioritize error bug occur team quickly determine root cause The time effort save capturing error Airbrake invaluable Capture Track Your Application Exceptions Minutes Want latest tutorial process outline Airbrake news delivered straight inbox Fill form subscribe No searching log file Capture every bug error app line code There large number As discussed article model fall three major category primarily sequential process primarily evolutionary concurrent process rational unified process various form Vee spiral model primarily interpersonal unconstrained process agile development Scrum extreme programming XP dynamic system development method process This article specifically focus Vee Model primary example sequential process In discussion important note Vee model variation Vee model address basic set system engineering SE activity The key difference model way group represent aforementioned SE activity General implication using Vee model system design development discussed specific understanding life cycle model impact system engineering activity please see knowledge area KAs Part The sequential version Vee Model shown Figure Its core involves sequential progression plan specification product baselined put configuration management The vertical arrow enables project perform concurrent opportunity risk analysis well continuous validation The Vee Model encompasses first three life cycle stage listed Generic Life Cycle Stages table INCOSE exploratory research concept development INCOSE The Vee Model endorses INCOSE INCOSE definition life cycle stage purpose activity shown Figure The INCOSE contains detailed version Vee diagram Figures incorporates life cycle activity generic Vee model A similar diagram developed Defense Acquisition University DAU seen Figure Lawson Lawson elaborates activity life cycle stage note useful consider structure generic life cycle stage model type SoI portrayed Figure This model indicates one definition stage precede production stage implementation acquisition provisioning development two system element accomplished Figure show generic life cycle stage variety stakeholder standard organization commercial government organization Although stage differ detail similar sequential format emphasizes core activity noted Figure definition production It important note many activity throughout life cycle iterated This example discussed For discussion important note employ phase used ass evolution system various stage The stage contain activity performed achieve goal serve control manage sequence stage transition stage For project essential define publish term related definition used respective project minimize confusion A typical composed following phase These program management view apply SoI also element structure Variations Vee model deal general stage life cycle Additional information stage found section see link additional Part article detail It important note life cycle stage activity stage supported set analysis agreement part exploratory research stage critical development successful system Without proper understanding user need system run risk built solve wrong problem The first step exploratory research phase define user stakeholder requirement constraint A key part process establish feasibility meeting user requirement including technology readiness assessment As many SE activity often done iteratively stakeholder need requirement revisited new information becomes available A recent study National Research Council National Research Council focused reducing development time US Air Force project The report note simply stated system engineering translation user need definition system architecture iterative process result effective system The iterative involvement stakeholder critical project success Except first last decision gate project gate performed simultaneously See Figure During alternate concept created determine best approach meet stakeholder need By envisioning alternative creating model including appropriate prototype stakeholder need clarified driving issue highlighted This may lead incremental evolutionary approach system development Several different concept may explored parallel The selected concept identified concept stage elaborated detail lowest level produce solution meet Throughout stage vital continue user involvement validation upward arrow Vee model On hardware done frequent program review customer resident representative appropriate In agile development practice customer representative integrated development team The production stage SoI built manufactured Product modification may required resolve production problem reduce production cost enhance product SoI capability Any modification may influence system requirement may require system All change require SE assessment change approved A significant aspect product life cycle management provisioning supporting system vital sustaining operation product While supplied product service may seen narrow NSOI acquirer also must incorporate supporting system wider WSOI These supporting system seen system asset needed activated response situation emerged respect operation NSOI The collective name set supporting system integrated logistics support ILS system It vital holistic view defining producing operating system product service In Figure relationship system design development ILS requirement portrayed The requirement reliability resulting need maintainability testability driving factor In support stage SoI provided service enable continued operation Modifications may proposed resolve supportability problem reduce operational cost extend life system These change require SE assessment avoid loss system capability operation The corresponding technical process maintenance process In retirement stage SoI related service removed operation SE activity stage primarily focused ensuring disposal requirement satisfied In fact planning disposal part system definition concept stage Experiences century repeatedly demonstrated consequence system retirement disposal considered outset Early century many country changed law hold creator SoI accountable proper disposal system To control progress project different type review planned The commonly used listed follows although name universal Eichmueller Foreman  Brussels Belgium Aerospace Defence Industries Association Europe ASD Industries Association AIA Faisandier A  Belberaud France Forsberg Mooz Cotterman  ed New York NY USA Wiley Sons INCOSE version San Diego CA USA International Council Systems Engineering INCOSE Lawson London UK College Publications Kings College UK Beedle et al   database online Accessed December Boehm Turner  New York NY USA Fairley New York NY USA Wiley Sons Forsberg Mooz Cotterman  ed New York NY USA Wiley Sons INCOSE version San Diego CA USA International Council Systems Engineering INCOSE Lawson Kings College UK College Publications Pew Mavor ed  Washington DC USA The National Academies Press Royce  New York NY USA Addison Wesley Anderson Sequim WA USA Blue Hole Press Baldwin Clark  Cambridge MA USA MIT Press Beck New York NY USA Addison Wesley Beedle et al  The Agile Manifesto Principles behind Agile Manifesto The Agile Manifesto database online Accessed Available Biffl Aurum Boehm Erdogmus Gruenbacher ed  New York NY USA Springer Boehm B  A Spiral Model Software IEEE Boehm B  Some Future Trends Implications Systems Software Engineering Boehm Egyed Kwan Port Shah Madachy  Using WinWin Spiral Model A Case IEEE Boehm Turner J Lane Koolmanojwong press  Boston MA USA Addison Wesley Castellano  Top Five Quality Software July Available Checkland New York NY USA Wiley Crosson Boehm  Adjusting Software Life cycle Anchorpoints Lessons Learned System Systems Proceedings Systems Software Technology Conference April Salt Lake City UT USA Dingsoyr Dyba Moe ed  Agile Software Development Current Research Future Chapter Boehm J Lane Koolmanjwong Turner New York NY USA Springer Dorner New York NY USA Basic Books Forsberg I Could Do That Then I System Engineering Research Development Proceedings Fifth Annual International Council Systems Engineering INCOSE International Symposium July Louis MO USA Forsberg Projects Don Begin With Proceedings IEEE Systems Conference April San Diego CA USA Gilb Maryland Heights MO USA Elsevier Butterworth Heinemann Goldratt Great Barrington MA USA North River Press Hitchins New York NY USA Wiley Holland J  New York NY USA Perseus Books   Systems Software Engineering Part Guide Life Cycle Management Geneva Switzerland International Organization Standardization ISO Electrotechnical Commission IEC   Geneva Switzerland International Organisation Standardisation International Electrotechnical Commissions Institute Electrical Electronics Engineers    Geneva Switzerland International Organization Standardization ISO Electrotechnical Commission IEC E Jarzombek J  Top Five Quality Software July Available Kruchten New York NY USA Addison Wesley Landis North Branch MN USA Specialty Press Madachy Hoboken NJ USA Wiley Maranzano Rozsypal Zimmerman Warnken Wirth Weiss  Architecture Reviews Practice IEEE National Research Council National Academies USA  Washington DC USA The National Academies Press Osterweil Software Processes Software Proceedings SEFM International Conference Software Engineering Monterey CA USA Poppendeick Poppendeick  New York NY USA Addison Wesley Rechtin Upper Saddle River NY USA Rechtin Maier  Boca Raton FL USA CRC Press Schwaber Beedle  Upper Saddle River NY USA Prentice Hall Spruill Top Five Quality Software January Available Stauder Top Five Department Defense Program September Available Warfield J  New York NY USA Wiley Womack Jones  New York NY USA Simon Schuster Please provide comment feedback SEBoK You need log DISQUS using existing account Yahoo Google Facebook Twitter etc create DISQUS account Simply type comment text field DISQUS guide login registration step Feedback archived used future update SEBoK 
testing description	investigation conducted provide stakeholder information quality product service test Software testing also provide objective independent view software allow business appreciate understand risk software implementation Test technique include process executing program application intent finding error defect verifying software product fit use Software testing involves execution software component system component evaluate one property interest In general property indicate extent component system test As number possible test even simple software component practically infinite software testing us strategy select test feasible available time resource As result software testing typically exclusively attempt execute program application intent finding error defect The job testing iterative process one bug fixed illuminate deeper bug even create new one Software testing provide objective independent information quality software risk failure user sponsor Software testing conducted soon executable software even partially complete exists The often determines testing conducted For example phased process testing occurs system requirement defined implemented testable program In contrast requirement programming testing often done concurrently Although testing determine correctness software assumption specific hypothesis see testing identify defect within software Instead furnishes compare state behavior product mechanism someone might recognize problem These oracle may include limited specification comparable product past version product inference intended expected purpose user customer expectation relevant standard applicable law criterion A primary purpose testing detect software failure defect may discovered corrected Testing establish product function properly condition establish function properly specific condition The scope software testing often includes examination code well execution code various environment condition well examining aspect code supposed need In current culture software development testing organization may separate development team There various role testing team member Information derived software testing may used correct process software developed Every software product target audience For example audience video game software completely different banking software Therefore organization develops otherwise invests software product ass whether software product acceptable end user target audience purchaser stakeholder Software testing process attempting make assessment Not software defect caused coding error One common source expensive defect requirement gap unrecognized requirement result error omission program designer Requirement gap often Software fault occur following process A programmer make mistake result fault bug software If defect executed certain situation system produce wrong result causing Not defect necessarily result failure For example defect never result failure A defect turn failure environment changed Examples change environment include software run new platform alteration interacting different software A single defect may result wide range failure symptom A fundamental problem software testing testing combination input precondition initial state feasible even simple product This mean number software product large defect occur infrequently difficult find testing More significantly dimension quality supposed versus supposed highly subjective something constitutes sufficient value one person may intolerable another Software developer ca test everything use combinatorial test design identify minimum number test needed get coverage want Combinatorial test design enables user get greater test coverage fewer test Whether looking speed test depth use combinatorial test design method build structured variation test case A study conducted report software bug cost economy billion annually More third cost could avoided better software testing performed software testing cost common China Philippines India preferred destination It commonly believed earlier defect found cheaper fix The following table show cost fixing defect depending stage found For example problem requirement found would cost time fix already found requirement review With advent modern practice service cost maintenance may lessen time The data table extrapolated scant Laurent Bossavit say analysis The smaller project curve turn two team student sample size small extrapolating smaller project general totally indefensible The GTE study explain data say came two project one large one small The paper cited Bell Labs Safeguard project specifically disclaims collected data Boehm data point suggest The IBM study Fagan paper contains claim seem contradict Boehm graph numerical result clearly correspond data point Boehm even cite paper TRW data except writing Making Software cited original article There exists large study conducted TRW right time Boehm cite paper contain sort data would support Boehm claim Software testing done software tester Until term software tester used generally later also seen separate profession Regarding period different goal software testing different role established The separation testing initially introduced Although attention breakage testing successful test one find bug illustrated desire software engineering community separate fundamental development activity debugging verification There many approach available software testing referred whereas actually executing programmed code given set referred Static testing often implicit proofreading plus programming editor check source code structure compiler check syntax data flow Dynamic testing take place program run Dynamic testing may begin program complete order test particular section code applied discrete module Typical technique either using execution environment Static testing involves whereas dynamic testing involves Together help improve Among technique static analysis used ensure test case detect error introduced mutating source code Software testing method traditionally divided testing These two approach used describe point view test engineer take designing test case testing also known clear box testing glass box testing transparent box testing structural testing seeing source code test internal structure working program opposed functionality exposed In testing internal perspective system well programming skill used design test case The tester chooses input exercise path code determine appropriate output This analogous testing node circuit ICT While testing applied level software testing process usually done unit level It test path within unit path unit integration subsystem test Though method test design uncover many error problem might detect unimplemented part specification missing requirement Techniques used testing include Code coverage tool evaluate completeness test suite created method including testing This allows software team examine part system rarely tested ensures important tested Code coverage reported percentage statement coverage ensures code path branch term executed least This helpful ensuring correct functionality sufficient since code may process different input correctly incorrectly testing treat software black box examining functionality without knowledge internal implementation without seeing source code The tester aware software supposed testing method include testing testing testing testing aim test functionality software according applicable requirement This level testing usually requires thorough provided tester simply verify given input output value behavior either expected value specified test case Test case built around specification requirement application supposed It us external description software including specification requirement design derive test case These test though usually functional testing may necessary assure correct functionality insufficient guard complex situation One advantage black box technique programming knowledge required Whatever bias programmer may tester likely different set may emphasize different area functionality On hand testing said like walk dark labyrinth without flashlight Because examine source code situation tester writes many test case check something could tested one test case leaf part program untested This method test applied level software testing It typically comprises testing higher level also dominate unit testing well The aim visual testing provide developer ability examine happening point software failure presenting data way developer easily ﬁnd information requires information expressed clearly At core visual testing idea showing someone problem test failure rather describing greatly increase clarity understanding Visual testing therefore requires recording entire test process capturing everything occurs test system video format Output video supplemented tester input via webcam audio commentary microphone Visual testing provides number advantage The quality communication increased drastically tester show problem event leading developer opposed describing need replicate test failure cease exist many case The developer evidence requires test failure instead focus cause fault fixed Visual testing particularly environment deploy development software since agile method require greater communication tester developer collaboration within small team important methodology checking software integrity require le preparation time implement important bug found quickly In ad hoc testing testing take place improvised impromptu way ability test tool visually record everything occurs system becomes important order document step taken uncover bug Visual testing gathering recognition test used many individual involved development process For customer becomes easy provide detailed bug report feedback program user visual testing record user action screen well voice image provide complete picture time software failure developer testing American spelling testing involves knowledge internal data structure algorithm purpose designing test executing test user level The tester required full access software source code Manipulating input data formatting output qualify input output clearly outside black box calling system test This distinction particularly important conducting two module code written two different developer interface exposed test However test require modifying data repository database log file qualify user would normally able change data repository normal production operation testing may also include determine instance boundary value error message By knowing underlying concept software work tester make testing choice testing software outside Typically tester permitted set isolated testing environment activity seeding The tester observe state product tested performing certain action executing statement database executing query ensure expected change reflected testing implement intelligent test scenario based limited information This particularly apply data type handling There generally four recognized level test unit testing integration testing component interface testing system testing Tests frequently grouped added software development process level specificity test The main level development process defined guide system testing distinguished test target without implying specific process model Other test level classified testing objective There two different level test perspective customer testing LLT testing HLT LLT group test different level component software application product HLT group test whole software application product Unit testing refers test verify functionality specific section code usually function level In environment usually class level minimal unit test include constructor destructors These type test usually written developer work code style ensure specific function working expected One function might multiple test catch branch code Unit testing alone verify functionality piece software rather used ensure building block software work independently Unit testing software development process involves synchronized application broad spectrum defect prevention detection strategy order reduce software development risk time cost It performed software developer engineer construction phase software development lifecycle Rather replace traditional QA focus augments Unit testing aim eliminate construction error code promoted QA strategy intended increase quality resulting software well efficiency overall development QA process Depending organization expectation software development unit testing might include metric analysis peer code review analysis software verification practice Integration testing type software testing seek verify interface component software design Software component may integrated iterative way together big bang Normally former considered better practice since allows interface issue located quickly fixed Integration testing work expose defect interface interaction integrated component module Progressively larger group tested software component corresponding element architectural design integrated tested software work system The practice component interface testing used check handling data passed various unit subsystem component beyond full integration testing unit The data passed considered message packet range data type checked data generated one unit tested validity passed another unit One option interface testing keep separate log file data item passed often timestamp logged allow analysis thousand case data passed unit day week Tests include checking handling extreme data value interface variable passed normal value Unusual data value interface help explain unexpected performance next unit Component interface testing variation focus data value beyond related action subsystem component System testing test completely integrated system verify system meet requirement For example system test might involve testing logon interface creating editing entry plus sending printing result followed summary processing deletion archiving entry logoff Operational acceptance used conduct operational readiness product service system part OAT common type software testing used mainly project This type testing focus system supported become part production environment Hence also known operational readiness testing ORT OR A testing within OAT limited test required verify aspect system In addition software testing ensure portability system well working expected also damage partially corrupt operating environment cause process within environment become inoperative An installation test assures system installed correctly working actual customer hardware A common cause software failure real perceived lack operating system old new target environment differ greatly original application intended run required become must render For example case lack occur programmer develop test software latest version target environment user may running This result unintended consequence latest work may function earlier version target environment older hardware earlier version target environment capable using Sometimes issue fixed proactively operating system functionality separate program determines whether reasonable proceed testing consists minimal attempt operate software designed determine whether basic problem prevent working Such test used Regression testing focus finding defect major code change occurred Specifically seek uncover degraded lost feature including old bug come back Such regression occur whenever software functionality previously working correctly stop working intended Typically regression occur program change newly developed part software collides previously existing code Common method regression testing include previous set test case checking whether previously fixed fault The depth testing depends phase release process added feature They either complete change added late release deemed risky shallow consisting positive test feature change early release deemed low risk Regression testing typically largest test effort commercial software development due checking numerous detail prior software feature even new software developed using old test case test part new design ensure prior functionality still supported Acceptance testing mean one two thing Alpha testing simulated actual operational testing potential independent test team developer site Alpha testing often employed software form internal acceptance testing software go beta testing Beta testing come alpha testing considered form external Versions software known released limited audience outside programming team known beta tester The software released group people testing ensure product fault Beta version made available open public increase field maximal number future user deliver value earlier extended even indefinite period time refers activity verify specific action function code These usually found code requirement documentation although development methodology work use case user story Functional test tend answer question user particular feature work refers aspect software may related specific function user action behavior certain Testing determine breaking point point extreme scalability performance lead unstable execution requirement tend reflect quality product particularly context suitability perspective user Continuous testing process executing part software delivery pipeline obtain immediate feedback business risk associated software release candidate Continuous testing includes validation scope testing extends validating requirement user story assessing system requirement associated overarching business goal Destructive testing attempt cause software fail It verifies software function properly even receives invalid unexpected input thereby establishing input validation routine form example failure testing Various commercial testing tool linked page also numerous free software tool available perform destructive testing Performance testing generally executed determine system performs term responsiveness stability particular workload It also serve investigate measure validate verify quality attribute system scalability reliability resource usage primarily concerned testing system continue operate specific load whether large quantity data large number This generally referred software The related load testing activity performed activity often referred way test software function even certain component example file database increase radically size way test reliability unexpected rare workload often referred load endurance testing check see software continuously function well acceptable period There little agreement specific goal performance testing The term load testing performance testing volume testing often used interchangeably system strict timing constraint To test timing constraint met used check user interface easy use understand It concerned mainly use application testing may include compliance standard essential software process confidential data prevent The International Organization Standardization ISO defines type testing conducted evaluate degree test item associated data information protected unauthorised person system use read modify authorized person system denied access The general ability software automatically tested without actual translation using It verify application still work even translated new language adapted new culture different currency time zone Actual translation human language must tested Possible localization failure include Development Testing software development process involves synchronized application broad spectrum defect prevention detection strategy order reduce software development risk time cost It performed software developer engineer construction phase software development lifecycle Rather replace traditional QA focus augments Development Testing aim eliminate construction error code promoted QA strategy intended increase quality resulting software well efficiency overall development QA process Depending organization expectation software development Development Testing might include data flow analysis metric analysis peer code review unit testing code coverage analysis traceability software verification practice testing basically comparison two output generally one variable changed run test change one thing run test compare result This useful situation useful program With complex project multivariant testing done In concurrent testing focus performance continuously running normal input normal operational condition opposed stress testing fuzz testing Memory leak well basic fault easier find method In software testing conformance testing verifies product performs according specified standard Compilers instance extensively tested determine whether meet recognized standard language A common practice software testing testing performed independent group tester functionality developed shipped customer This practice often result testing phase used buffer compensate project delay thereby compromising time devoted testing Another practice start software testing moment project start continuous process project finish In contrast emerging software discipline movement adhere model In process written first often extreme programming methodology The test expected fail initially As code written test pas incrementally larger portion test suite The test suite continuously updated new failure condition corner case discovered integrated regression test developed Unit test maintained along rest software source code generally integrated build process inherently interactive test relegated partially manual build acceptance process The ultimate goal test process achieve software update published public frequently This methodology increase testing effort done development reaching formal testing team In development model test execution occurs requirement defined coding process completed Although variation exist organization typical cycle testing The sample common among organization employing model The practice commonly found development model might clear explicit Many programming group relying especially group use There many framework write test software run test automatically every time code checked system While automation reproduce everything human way think useful regression testing However require testing script order truly useful Program testing fault detection aided significantly testing tool tool include feature Some feature may incorporated single composite tool IDE Quality measure include topic completeness requirement capability compatibility There number frequently used measure used assist determining state software adequacy testing Based amount test case required construct complete test suite context test suite applied implementation test collect enough information precisely determine whether system correct incorrect according specification hierarchy testing difficulty proposed It includes following class It proved class strictly included next For instance testing assume behavior implementation test denoted deterministic known finite set input output known number state belongs Class I subsequent class However number state known belongs class Class II If implementation test must deterministic machine failing specification single trace continuation number state unknown belongs class Class III Testing temporal machine transition triggered input produced within interval belongs class Class IV whereas testing many system belongs Class V even belong Class I The inclusion Class I require simplicity assumed computation model testing case involving implementation written programming language testing implementation defined machine depending continuous magnitude proved Class I Other elaborated case testing framework must semantics temporal machine rational timeouts belong Class II The software testing process produce several Several certification program exist support professional aspiration software tester quality assurance specialist No certification offered actually requires applicant show ability test software No certification based widely accepted body knowledge This led declare testing field ready certification Certification measure individual productivity skill practical knowledge guarantee competence professionalism tester Some major include Software testing used association The term verification validation commonly used interchangeably industry also common see two term defined contradictory definition According IEEE Standard Glossary Software Engineering Terminology And according ISO standard The contradiction caused use concept requirement specified requirement different meaning In case IEEE standard specified requirement mentioned definition validation set problem need want stakeholder software must solve satisfy Such requirement documented Software Requirements Specification SRS And product mentioned definition verification output artifact every phase software development process These product fact specification Architectural Design Specification Detailed Design Specification etc The SRS also specification verified least sense used subject But ISO specified requirement set specification mentioned must verified A specification previously explained product software development process phase receives another specification input A specification verified successfully correctly implement input specification All specification verified except SRS first one validated though Examples The Design Specification must implement SRS Construction phase artifact must implement Design Specification So word defined common term apparent contradiction disappears Both SRS software must validated The SRS validated statically consulting stakeholder Nevertheless running partial implementation software prototype kind dynamic testing obtaining positive feedback increase certainty SRS correctly formulated On hand software final running product artifact document including source code must validated dynamically stakeholder executing software try Some might argue SRS input word stakeholder therefore SRS validation SRS verification Thinking way advisable cause confusion It better think verification process involving formal technical input document Software testing part SQA process In SQA software process specialist auditor concerned software development process rather artifact documentation code system They examine change software engineering process reduce number fault end delivered software defect rate What constitutes acceptable defect rate depends nature software A flight simulator video game would much higher defect tolerance software actual airplane Although close link SQA testing department often exist independently may SQA function company Software testing task intended detect defect software contrasting computer program expected result actual result given set input By contrast QA implementation policy procedure intended prevent defect occurring first place If love finding fixing bug programmimg coding could suited career software testing As software tester involved quality assurance stage software development deployment You conduct automated manual test ensure software created developer fit purpose Software testing involves analysis software system avert risk prevent software issue Your role integral creation software system technical product including vehicle electronic good defence healthcare Ultimately software tester employed find bug issue within product get deployed everyday user You might work bespoke individual project multinational project spanning globe costing billion pound You need become familiar programming using coding language Assessing code one part role software tester Your role vary depending project requirement You may join project initial implementation stage ass potential risk brought project midway testing becomes key requirement Large organisation may software tester dedicated one project whereas smaller organisation may central team working multiple project However work activity likely include Salaries vary according location technical knowledge sector The City London financial service currently pay highest salary Some company also offer bonus scheme benefit overtime payment unsociable hour Income figure intended guide Working hour usually follow standard office day eight nine hour However due nature project work may required work outside time On occasion may mean working shift weekend work This would likely occur period software deployment project happens taking place across variety location time zone Software tester often degree computer science IT However role open graduate variety degree discipline including You enter software testing profession HND foundation degree A software IT engineering diploma may highly regarded company You need You would benefit gaining professional software testing experience summer placement internship This would expose full development lifecycle You would also gain experience working team using written verbal communication skill A number large graduate employer offer summer internship placement provide opportunity gain relevant work experience Additionally company run work shadow scheme give insight software testing profession Your university may also computing society Joining relevant university society help demonstrate passion technology may provide opportunity meet company industry professional Software tester required variety organisation sector Large employer sophisticated software IT system opportunity Technology company smaller organisation also require software tester You find software testing opportunity Large graduate employer may include software testing within rotational IT graduate programme This would give opportunity gain experience software testing well IT role including project management application support software development Employers le traditional rotational graduate scheme may offer software testing direct entry role candidate start work software tester day one Look vacancy Training depend company join vary structured training development programme organised via graduate scheme training short course required As IT sector ever changing important keep date development specific software testing trend training ideal way student recent graduate gain understanding software development lifecycle Additionally could consider joining professional association BCS The Chartered Institute IT It may help expand awareness IT sector provide opportunity meet variety professional The BCS along accredited training organisation worldwide run number software testing course professional qualification The course qualification mapped SFIAplus Skills Framework Information Age UK competency framework describing IT role skill needed carry At present specific software testing postgraduate degree offered UK institution However uncommon software testing professional decide study postgraduate IT qualification point career Search You may start career software tester graduate scheme via position Career progression rapid The speed progress depend experience exposure different system awareness testing method Professional qualification technical skill help speed progression Some software tester progress senior software testing role including You could choose specialise gaining experience within specific sector financial service medium Or may decide diversify develop understanding many sector Additionally software tester required work business project team could move role business analysis project management Progression software development role another possible route Written AGCAS editor November All major credit debit card accepted Copyright Graduate Prospects All right reserved software hardware testing conducted complete integrated system evaluate system compliance specified System testing fall within scope require knowledge inner design code logic As rule system testing take input integrated software component passed also software system integrated applicable hardware system The purpose integration testing detect inconsistency software unit integrated together called hardware System testing limited type testing seek detect defect within also within system whole System testing performed entire system context Specification FRS Specification SRS System testing test design also behaviour even believed expectation customer It also intended test beyond bound defined requirement specification The following example different type testing considered System testing Although different testing organization may prescribe different test part System testing list serf general framework foundation begin Test Description Language TDL new language specification test description presentation test execution result There methodology gap expression need tested test purpose described prose Test Purpose Language TPLan complex coding executable test Testing Test Control Notation version TDL fill gap TDL represents next generation testing language exploiting advantage software engineering The benefit TDL include The introduction TDL driven industry It used primarily exclusively functional testing ETSI leading development Test Description Language TDL In published first ETSI Standard ES TDL provides description semantics element We adding necessary language functionality integrate TDL test description test automation framework provide Open Source tool support To accelerate adoption TDL MTS commissioned reference implementation TDL order lower barrier entry user tool vendor getting started using TDL The team expert within Specialist Task Force STF demonstrate preview reference implementation made publicly available first half Selected partner also showcase TDL solution We launched TDL world third ETSI User Conference Advanced Automated Testing October The following list latest published ETSI standard test description language A full list related standard public domain accessible via ETSI Via interface also update ETSI standard For work progress see ETSI ETSI Get instant notification Economic Times Though report company laying employee surfacing since long Family Business Forum Let get smarter money Celebrating year Tetra Pak India Luxury Real Estate Homes Sale Runway Success Season A one stop platform caters pulse pulsating energy Latest news analysis GST Manage grow money smartly one tool A one stop platform caters pulse pulsating healthcare Online financial calculator AM Nov Returns NAV Day Change Class Category CHOOSE LANGUAGE ENG Suggest new Definition Proposed definition considered inclusion Loading Please wait Find comment offensive Choose reason click Report button This alert moderator take action Reason reporting Your Reason Reported admin Copyright Bennett Coleman All right reserved For reprint right Find comment offensive Choose reason click Report button This alert moderator take action Reason reporting Your Reason Reported admin Software Testing evaluation software requirement gathered user system specification Testing conducted phase level software development life cycle module level program code Software testing comprises Validation Verification Validation process examining whether software satisfies user requirement It carried end SDLC If software match requirement made validated Verification process confirming software meeting business requirement developed adhering proper specification methodology Target test These actual coding mistake made developer In addition difference output software desired output considered error When error exists fault occurs A fault also known bug result error cause system fail failure said inability system perform desired task Failure occurs fault exists system Testing either done manually using automated testing tool This testing performed without taking help automated testing tool The software tester prepares test case different section level code executes test report result manager Manual testing time resource consuming The tester need confirm whether right test case used Major portion testing involves manual testing This testing testing procedure done aid automated testing tool The limitation manual testing overcome using automated test tool A test need check webpage opened Internet Explorer This easily done manual testing But check take load million user quite impossible test manually There software hardware tool help tester conducting load testing stress testing regression testing Tests conducted based two approach When functionality tested without taking actual implementation concern known testing The side known testing functionality tested way implemented also analyzed Exhaustive test method perfect testing Every single possible value range input output value tested It possible test every value real world scenario range value large It carried test functionality program It also called Behavioral testing The tester case set input value respective desired result On providing input output match desired result program tested ok problematic otherwise In testing method design structure code known tester testing engineer end user conduct test software testing technique The input divided similar class If one element class pass test assumed class passed The input divided higher lower end value If value pas test assumed value may pas In previous method one input value time tested Cause input Effect output testing technique combination input value tested systematic way The behavior software depends multiple parameter In pairwise testing multiple parameter tested different value The system change state provision input These system tested based state input It conducted test program implementation order improve code efficiency structure It also known Structural testing In testing method design structure code known tester Programmers code conduct test code The testing technique The purpose testing set test case cover statement branch condition The branch condition tested true false statement covered This testing technique emphasis cover data variable included program It test variable declared defined used changed Testing may defined various level SDLC The testing process run parallel software development Before jumping next stage stage tested validated verified Testing separately done make sure hidden bug issue left software Software tested various level While coding programmer performs test unit program know error free Testing performed testing approach Unit testing help developer decide individual unit program working per requirement error free Even unit software working fine individually need find unit integrated together would also work without error For example argument passing data updation etc The software compiled product tested whole This accomplished using one following test Tests functionality software requirement This test prof efficient software It test effectiveness average time taken software desired task Performance testing done mean load testing stress testing software put high user data load various environment condition These test done software meant work various platform accessed number person When software ready hand customer go last phase testing tested response This important even software match user requirement user like way appears work may rejected The team developer perform alpha testing using system used work environment They try find user would react action software system respond input After software tested internally handed user use production environment testing purpose This yet delivered product Developers expect user stage bring minute problem skipped attend Whenever software product updated new code feature functionality tested thoroughly detect negative impact added code This known regression testing Testing document prepared different stage Testing start test case generation Following document needed reference Functional Requirements document This describes far testing take place releasing product This mention detail aspect test team responsibility matrix test manager test engineer This SDLC document related requirement gathering process As new requirement come added matrix These matrix help tester know source requirement They traced forward backward The following document may required testing started done This document contains list test required conducted It includes Unit test plan Integration test plan System test plan Acceptance test plan This document detailed description test case procedure execute This document contains test case report result test This document contains test log every test case report The following document may generated testing This test summary collective analysis test report log It summarizes concludes software ready launched The software released version control system ready launch We need understand software testing different software quality assurance software quality control software auditing These software development process monitoring mean assured measure taken per standard organization This monitoring done make sure proper software development method followed This system maintain quality software product It may include functional aspect software product enhance goodwill organization This system make sure customer receiving quality product requirement product certified fit use This review procedure used organization develop software A team auditor independent development team examines software process procedure requirement aspect SDLC The purpose software audit check software development process conform standard rule regulation Copyright All Rights Reserved Penetration testing also called pen testing practice computer system network Web application find vulnerability attacker could exploit Enterprises continue put cloud security strategy top list Learn latest cloud security risk trend well tip secure deployment You forgot provide Email Address This email address appear valid This email address already registered Please You exceeded maximum character limit Please provide Corporate Address By submitting Email address I confirm I read accepted Terms Use By submitting personal information agree TechTarget may contact regarding relevant content product special offer You also agree personal information may transferred processed United States read agree Pen test automated software application performed manually Either way process includes gathering information target test reconnaissance identifying possible entry point attempting break either virtually real reporting back finding The main objective penetration testing determine security weakness A pen test also used test organization security policy compliance employee security awareness organization ability identify respond security incident Penetration test sometimes called attack pen test good guy attempting break Pen test strategy include Targeted testing performed organization IT team penetration testing team working together It sometimes referred approach everyone see test carried This type pen test target company externally visible server device including domain name server DNS server Web server firewall The objective find outside attacker get far get gained access This test mimic inside attack behind firewall authorized user standard access privilege This kind test useful estimating much damage disgruntled employee could cause A blind test strategy simulates action procedure real attacker severely limiting information given person team performing test beforehand Typically may given name company Because type test require considerable amount time reconnaissance expensive Double blind testing take blind test carry step In type pen test one two people within organization might aware test conducted test useful testing organization security monitoring incident identification well response procedure See also Find content member offer By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States Few would deny adopting microservices provides benefit enough secure microservices We explore Container platform enable high degree portability container portability limitation related Open source certainly made impact including application development management This guide look Oracle great job getting Java SE released earlier year modularity various smaller update may enough At JavaOne Oracle identified four project significant impact future Java Project Valhalla Whether secure cloud secure mobile device secure IOT interaction organization making blockchain security IBM joined Docker MTA program make easier enterprise modernize existing application using container This product update explores new database software release ScaleArc SQL Server integrated Learn architecture help digital transformation despite many structure exist Expert AWS gave automation capability boost release CloudFormation StackSets feature let dev team deploy VMware Cloud AWS provides option Dedicated Hosts offer increased isolation But majority AWS Amazon SQS enables user process track task queue Combine Lambda CloudWatch add extra message software pricing associated cloud also useful deployment shown MIT lecturer Ben Shields say business learn lot analytical progress sport Visual data analysis important first step advanced analytics project analyst data scientist CEO Sacha Rose say specialist reporting tool saved company thousand avoiding unnecessary mistake WestJet initial gamification project focus expense reporting HR transformed watch The healthcare wearable commonly seen today think Fitbit provide clinically valuable data health IT expert Although healthcare organization wavered trusting data cloud service provider area cloud Healthcare organization want work toward initiative may want consider outsourcing IT support The Agile philosophy rigid dogmatic good The DevOps evangelist better pay attention risk DevOps Out old new right Not much come application security Old danger linger remain Warning All IoT product could set DevOps practice principle back year thanks lack industry All Rights Reserved Payment Card Industry Data Security Standard PCI DSS compliance adherence set policy procedure developed protect credit debit cash card transaction prevent misuse cardholder personal information Software testing method assessing functionality There many different type software testing two main category Dynamic testing assessment conducted program static testing hand examination program associated Dynamic static method often used together There different business Evaluating market today difficult See product match best company By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States An internal audit IA organizational initiative monitor analyze business operation order determine Pure risk also called absolute risk category threat beyond human control one possible outcome Risk assessment identification hazard could negatively impact organization ability conduct business Phishing form fraud attacker masquerade reputable entity person email communication Vulnerability disclosure practice publishing information computer security problem type policy Incident response organized approach addressing managing aftermath security breach cyberattack also Fast Healthcare Interoperability Resources FHIR interoperability standard electronic exchange healthcare The Office National Coordinator Health Information Technology abbreviated ONC entity within Precision medicine PM rapidly evolving development healthcare physician caregiver consider Business continuity disaster recovery BCDR closely related practice describe organization preparation A business continuity plan BCP document consists critical information organization need continue A call tree sometimes referred phone tree telecommunication chain notifying specific individual TLC flash cell flash type NAND flash memory store three bit data per cell Copy data management CDM approach reducing storage consumption involves eliminating unnecessary duplication cell SLC flash type storage store one bit data per cell flash medium A hybrid hard disk drive electromechanical spinning hard disk contains amount NAND Flash memory All Rights Reserved In general testing finding well something work In term human being testing tell level knowledge skill acquired In computer hardware software development testing used key checkpoint overall process determine whether objective met For example software development product objective sometimes tested product user representative When design complete coding follows finished code tested unit module level programmer component level group programmer involved system level component combined together At early late stage product service may also tested The IoT world may exciting serious technical challenge need addressed especially developer In handbook learn meet security analytics testing requirement IoT application At system level manufacturer independent reviewer may subject product service one test possibly using one Whether viewed product service also tested various way observing user experience asking question user timing flow specific usage scenario comparing site By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States While general benefit public cloud increased scalability apply mobile apps way IaaS Backups critical cloud strategy store data important Explore automated backup Serverless computing boost flexibility reduce overall cloud cost To tap benefit though sure The DevOps journey well underway many obstacle remain New product using artificial intelligence machine learning Testing internet thing one thing AI take next level A LogiGear executive share company A complicated new game required complicated testing strategy help outside Here game maker Anki learned Oracle great job getting Java SE released earlier year modularity various smaller update may enough At JavaOne Oracle identified four project significant impact future Java Project Valhalla Whether secure cloud secure mobile device secure IOT interaction organization making blockchain security IBM joined Docker MTA program make easier enterprise modernize existing application using container This product update explores new database software release ScaleArc SQL Server integrated Learn architecture help digital transformation despite many structure exist Expert All Rights Reserved Get instant notification Economic Times Though report company laying employee surfacing since long Family Business Forum Let get smarter money Celebrating year Tetra Pak India Luxury Real Estate Homes Sale Runway Success Season A one stop platform caters pulse pulsating energy Latest news analysis GST Manage grow money smartly one tool A one stop platform caters pulse pulsating healthcare Online financial calculator AM Nov Returns NAV Day Change Class Category CHOOSE LANGUAGE ENG Suggest new Definition Proposed definition considered inclusion Walkthrough software testing used review document peer manager fellow team member guided author document gather feedback reach consensus A walkthrough organised based need Generally people working work product involved walkthrough process Description This review becomes beneficial An uncovered unidentified bug exists system period time known Latent Bug The bug may persist system one version software Description Latent bug bug identified past version It existing error yet caused failure exact condition never fulfil Watir pronounced water group Ruby library automated web browser It allows writing test easy read maintain In word simple flexible tool Description Watir drive browser way people It also check result like ensuring appearance expected text page Watir support application Portability testing refers testing ease moving one product software one environment another One example includes testing product well functioning Windows measuring behaviour Windows This measured term effort involved task Description The main use case followed portability testing application desi SoapUI functional automation testing tool SoapUI free open source tool designed help test APIs SOAP REST interface ensure interoperability different application Description SoapUI graphical interface feature It allows easily create execute automated functional test regression Workflow testing involves mimicking production environment testing phase tested perspective The test database must include sufficient test data workflow tested thoroughly Description This kind testing perfect application Workflow activity interact software application whose functiona Calabash automation framework used enable automated UI Acceptance Tests It support different mobile platform iOS Android We automate different mobile application using native mobile web hybrid Description Calabash open source support Cucumber allows writing test natural language understood business expert This type testing done user customer authorised entity determine need business process Description Acceptance testing important phase testing decides whether client approves It may involve functionality usability performance application It also known user Mobile automation name suggests refers done mobile device Automation process whereby one automates testing application case mobile application WAP site app This done using tool help reducing testing time cycle Description Mobile automation done using many tool paid w Baseline testing refers validation document specification test case designed Baseline general refers benchmark form base new creation In software testing refers benchmarking performance application Many problem discovered solved baseline testing Description Baseline testing type Loading Please wait Find comment offensive Choose reason click Report button This alert moderator take action Reason reporting Your Reason Reported admin Copyright Bennett Coleman All right reserved For reprint right Find comment offensive Choose reason click Report button This alert moderator take action Reason reporting Your Reason Reported admin 
transient error	Some distributed database cluster make use transient error A transient error temporary error likely disappear soon By definition safe client ignore transient error retry failed operation database server The retry free side effect Clients forced abort work fail another database server immediately They may enter retry loop wait error disappear giving database server Transient error seen example using MySQL Cluster But bound specific clustering solution per se perform automatic retry loop case transient error This increase distribution transparency thus make easier migrate application running single database server run cluster database server without change source application The automatic retry loop repeat requested operation user configurable number time pause attempt configurable amount time If error disappears loop application never see If error forwarded application handling In example duplicate key error provoked make plugin retry failing query two time error passed application Between two attempt plugin sleep millisecond The example output something similar Because execution retry loop transparent user point view example check provided plugin learn As example show plugin instructed consider error transient regardless database server error semantics The error stock MySQL server considers temporary error code When configuring error code make sure configuration reflects semantics cluster error code The following mysqlnd C API call monitored plugin check transient error The corresponding user API call similar name The maximum time plugin may sleep retry loop depends function question The retry loop sleep millisecond However function dispatched connection The retry loop setting applied every connection command run Thus function may interrupt program execution longer function run one server For example dispatched connection may sleep millisecond Please keep mind setting long sleep time large retry number Using default setting unlikely ever see delay second This article describes prevent troubleshoot diagnose mitigate connection error transient error client application encounter interacts Azure SQL Database Learn configure retry logic build connection string adjust connection setting A transient error also transient fault underlying cause soon resolve An occasional cause transient error Azure system quickly shift hardware resource better various workload Most reconfiguration event often complete le second During reconfiguration time span may connectivity issue Azure SQL Database Applications connecting Azure SQL Database built expect transient error handle implementing retry logic code instead surfacing user application error If client program using program told transient error throw The property compared list transient error near top topic You retry SQL connection establish depending following Client program occasionally encounter transient error robust contain retry logic When program communicates Azure SQL Database party middleware inquire vendor whether middleware contains retry logic transient error A SQL SELECT statement fails transient error retried directly When SQL UPDATE statement fails transient error fresh connection established UPDATE retried A user interface program account human tendency give long wait We recommend delay second first retry Retrying delay shorter second risk overwhelming cloud service For subsequent retry delay grow exponentially maximum second A discussion client use available You might also want set maximum number retries program Code sample retry logic variety programming language available To test retry logic must simulate cause error corrected program still running One way test retry logic disconnect client computer network program running The error As part first retry attempt program correct misspelling attempt connect To make practical unplug computer network start program Then program recognizes run time parameter cause program Your program purposely misspell user name first connection attempt The error As part first retry attempt program correct misspelling attempt connect To make practical program could recognize run time parameter cause program If client program connects Azure SQL Database using Framework class use later Core leverage connection retry feature Details feature When build object coordinate value among following parameter Specifically chosen value make following equality true For example count interval second timeout second would quite give system enough time final retry connecting The parameter let object retry connect operation without telling bothering program returning control program The retries occur following situation There subtlety If transient error occurs executed object retry connect operation certainly retry query However quickly check connection sending query execution If quick check detects connection problem retries connect operation If retry succeeds query sent execution Suppose application robust custom retry logic It might retry connect operation time If add connection string increase retry count retries You might intend high number retries The connection string necessary connecting Azure SQL Database slightly different string connecting Microsoft SQL Server You copy connection string database Use obtain connection string necessary client program interact Azure SQL Database After blade appears database visual convenience click standard minimize control collapse blade used browsing database filtering If intend use connection library copy string labeled For information see You must configure SQL Database server accept communication IP address computer host client program You editing firewall setting If forget configure IP address program fail handy error message state necessary IP address Scroll click The blade displayed Click The blade displayed Type low high IP address value range want enable For information see Typically need ensure port open outbound communication computer host client program For example client program hosted Windows computer Windows Firewall host enables open port If client program hosted Azure virtual machine VM read For background information cofiguration port IP address see If program us class like connect Azure SQL Database recommend use Framework version higher When use connection object connection pool recommend program temporarily close connection immediately using connection expensive way creating new connection If using earlier recommend upgrade latest If program failing connect Azure SQL Database one diagnostic option try connect utility program Ideally utility would connect using library program us On Windows computer try utility Once connected test whether short SQL SELECT query work Suppose suspect connection attempt failing due port issue On computer run utility report port configuration On Linux following utility might helpful On Windows utility might helpful Here example execution queried port situation Azure SQL Database server run laptop computer An intermittent problem sometimes best diagnosed detection general pattern day week Your client assist diagnosis logging error encounter You might able correlate log entry error data Azure SQL Database log internally Enterprise Library offer managed class assist logging Here SELECT statement query log error information You search entry problem event log Azure SQL Database Try following SELECT statement database Next returned row might look like The null value shown often null row Enterprise Library framework class help implement robust client cloud service one Azure SQL Database service You locate topic dedicated area assist first visiting Retry logic handling transient error one area assist Note The source code available public Microsoft plan make feature update maintenance update EntLib The following class particularly useful retry logic All namespace class class In namespace Here link information The Logging block highly flexible configurable solution allows For detail see Next class C source code method The source code clarifies error considered transient worthy retry April Numerous line removed copy emphasize readability Veeam product related data center technology Wed Feb Tue Aug Tue Aug Fri Oct pm Fri Oct pm Fri Oct pm Fri Oct pm Fri Oct pm Mon Nov pm Tue Nov pm Tue Nov pm Thu Nov Tue Nov pm Fri Feb Tue Apr pm Users browsing forum No registered user guest Hi On couple VMs I getting error message Processing finished error Unable allocate processing resource Error Writer VSS Writer failed The writer experienced error If backup process retried error likely reoccur tr Failed verify writer state tr Failed perform task Queued processing Task rescheduled Retrying snapshot creation attempt Writer VSS Writer failed The writer experienced error If backup process retried error likely reoccur tr Failed verify writer state tr Failed perform task Make sure VM Software Target Storage Provider feature installed Failed create snapshot Microsoft Software Shadow Copy provider mode child partition snapshot Details Writer VSS Writer failed The writer experienced error If backup process retried error likely reoccur tr Failed verify writer state tr Failed perform task My question mean And importantly I go fixing Any help would greatly appreciated always The help desk software IT Free Track user IT need easily feature need Brand Representative Rob please refer following thread Or better open case Veeam support usually quite unpleasant error root cause may vary I agree Andrew opening support case Veeam Generally speaking error like pop Veeam support fix quickly Not mention pay support The fix find hardly justify cost put Hours researching time spent fixing time spent supporting patch patching patch etc Support generally already paid year charge fixing error like put backup back schedule tonight feeling relieved quickly start happening blue Reinstall agent host make sure integrated service installed VMs reboot host A option I usually calling support Besides support troubleshoot Run You get Veeam ONE report available even free version Thanks Hi guy I tormented problem I successfully solved In property virtual machine need remove check mark integration Services Backup Volume snapshot After backup successful Good luck Quote Post A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition This service advanced JavaScript available learn Motivated capacity allocation problem within finite planning period conduct transient analysis queue Lévy input From cost minimization perspective investigate error induced using stationary congestion measure opposed measure Invoking recent result fluctuation theory Lévy process derive refined cost function account transient effect This lead corrected capacity allocation rule transient queue Extensive numerical experiment indicate cost reduction achieved correction significant The issue matching service system capacity stochastic demand induced client arises many practical setting Typically resource available satisfy demand scarce hence expensive This force manager consider system efficiency quality service perceived client In paper focus context queue variable amenable optimization server speed The behavior queue received much attention queueing theory First effort analyze property queue date back example The analysis paper mostly yield implicit expression performance characteristic Laplace transforms equation infinite convolution More specifically vast literature transient analysis queue goal derive explicit expression queue length characteristic see example These work provide variety explicit expression transient dynamic although complexity resulting expression typically involving Bessel function expose intricate intractability matter Consequently approximation method insightful quantification dynamic based numerical asymptotic method become prevalent recent literature The asymptotic method either exploit knowledge evolution queueing process time grows large arrival rate increased infinity It noteworthy substantial contribution transient literature made Abate Whitt exploit existence decomposition mean transient queue length obtain expression moment queue length virtual waiting probabilistic argument several queueing model More recently asymptotic method used justify application stationary performance measure Markovian environment refine see example Other approximative method known uniform acceleration expansion developed reveal asymptotic behavior queue function moreover able capture arrival rate The majority work mentioned reflect error imposed usage performance metric instead correct counterpart However light shed accumulation error finite period time To best knowledge work address issue paper Steckley Henderson compute approximation error accumulated transient delay probability Our analysis hand centered around mean workload requires different approach In addition focus performance measure main goal paper investigate quality staffing rule Although queue serf leading example analysis choose use general framework arrival process queue Namely let server face Lévy process This give advantage obtained result apply broader queue input class Brownian motion Gamma process To shed light influence transience queueing process traditional staffing question study capacity allocation problem context cost minimization objective function function We investigate invalidity stationary assumption echoed operational cost accounting penalty Furthermore establish result strict convexity function almost value minor exception certain deterministic initial state essential property convergence cost function corresponding minimizer stationary counterpart Building upon insight gained analysis optimality gap reflect parameter setting underlying queueing process refined capacity sizing rule yield significant improvement case little effect Special emphasis put relationship accuracy standard procedure length planning period The remainder paper structured follows Section devoted model description present preliminary result The main result given Sect result regarding optimization problem discussed Sect followed validation novel technique numerical experiment Sect  We give concluding remark topic research Sect  We deferred proof appendix The proof Lemma follows directly differentiation Laplace transform therefore straightforward mean workload queue different initial state The depicts Since time horizon analysis limited process may approach distribution sufficiently close appropriately use property capacity allocation To overcome disparity propose way include influence transient phase capacity allocation problem From evident finding explicit characterization suffices study term detail We start stating main result section describes leading order behavior increase Note expression provides actual cost function We elaborate implication additional information optimization problem Sect  In remainder section provide detailed description step taken obtain outcome We assume fixed service rate throughout analysis section therefore omit subscript Proofs intermediate result found Appendix Before starting analysis correction term introduce auxiliary notation By denote workload process described Sect initial state expectation respect nonnegative random variable independent process To able compare use coupling technique Observe definition stationary distribution therefore Furthermore Hence quantifying difference transient stationary mean equivalent comparing workload process two queue starting two different random state We starting analysis two queue starting two state respectively At end analysis obtain original form replacing Sample path visualization process This leaf u two unknown The next lemma give equivalent form latter Since term several value appears many preliminary result devote attention next subsection This immediately induces expression henceforth Visualization area curve In case process exists shown truncation error order See Appendix detail Throughout section assume convex strictly convex otherwise Building upon strict convexity derive following convergence result The next result describes refinement term For queue obtained function simulation result accurate confidence interval width For reflected Brownian motion used explicit distribution function given double numerical integration The result several value two different starting state depicted Figs  These plot also include approximated function We make observation based figure First indeed note pointwise convergence grows three case However difference stationary cost small value significant This clear plot close heavy traffic In scenario evident refinement stationary cost function needed fairly good job providing correction especially moderate value Comparison exact waiting cost function corrected cost function PSA cost function queue  Comparison exact waiting cost function corrected cost function PSA cost function Pareto queue  Comparison exact waiting cost function corrected cost function PSA cost function reflected Brownian motion  Finally observe approach This divergence clear expression Our correction term relies premise coupling scheme sample path two queue starting different state hit high probability This equivalent stating largest two queue emptied least time However approach system enters heavy traffic hence hitting time zero barrier set run infinity Consequently cause approximation inaccurate small value In section examine whether corrected staffing rule indeed yield significant cost reduction choice comparing true cost We conduct comparison different value parameter starting state numerical experiment The three model calculation queue Pareto queue reflected Brownian motion introduced previous subsection We focus Comparison cost queue corrected staffing rule relative cost improvement   Pareto Comparison cost queue corrected staffing rule relative cost improvement   Just result queue observe higher reduction larger value Also Hence conclusion queue similar queue Comparison cost RBM corrected staffing rule relative cost improvement   Comparison cost RBM corrected staffing rule relative cost improvement   Based upon numerical result Tables make remark The three model roughly exhibit similar behavior varied note approach increasing also implies cost reduction achieved corrected staffing rule vanishes Also observe scenario examined cost reduction increase This explained investigation objective function function Namely small curve relatively flat around true optimum Hence case moderate deviation likely lead significant cost increase However becomes larger server efficiency valued minimization congestion curve becomes sharp around hence accurate approximation required achieve acceptable cost level Hence corrected staffing rule prof particularly useful case Motivated nature queue practical application studied impact transient phase traditional capacity allocation question By defining cost minimization problem objective function contains correction accounting transient period identified leading behavior cost function function interval length As result yield approximation actual cost function refinement stationary counterpart Our numerical experiment Sect demonstrate improved accuracy achieved approximation number setting By perturbation analysis optimization problem furthermore give rise correction optimal capacity allocation order The necessity refined capacity allocation level substantiated numerics Sect show cost reduction achieved number setting compared setting stationary metric used Particularly small value large value reduction significant Additionally result also indicate relatively safe use stationary cost moderate small The latter reflects scenario QoS much valued service efficiency This observation link flat nature cost function around optimal value small statement optimality gap formally proved Proposition Besides validation theoretical result Sects numerical result also reveal phenomenon require investigation As noted corrected capacity allocation level case studied le optimal value This implies congestion level tend higher staffing scheme stationary staffing A possible explanation may fact planning period consideration finite Clearly setting analyzed anything happens time neglected Therefore might beneficial cost perspective end period higher expected congestion level need canceled future Related observation would interesting look setting staffing decision need made consecutive period equal length arrival rate change start period This case requires careful consideration correlation among staffing decision within separate period Another question arises concern translation qualitative finding general queue particular queue Whereas analysis central decision variable server speed variable interest queue typically number server It may well similar explicit correction staffing level deduced account transience Since analysis heavily relies comparability sample path two queue due equal negative drift two process another approach must taken tackle extension The analysis finding queue Lévy input presented paper may serve stepping stone investigation elaborate problem We distinguish two case The proof proposition relies following auxiliary lemma include proof completeness Consider sequence function let pointwise limit Assume strictly convex Furthermore let If minimizers respectively Applying Lemma function together Lemma obtain result immediately This article distributed term Creative Commons Attribution International License permit unrestricted use distribution reproduction medium provided give appropriate credit original author source provide link Creative Commons license indicate change made Over million scientific document fingertip Springer International Publishing AG Part A organization IEEE world largest technical professional organization dedicated advancing technology benefit humanity Copyright IEEE All right reserved Use web site signifies agreement term condition 
upward compression	In tutorial Dan Worrall explains concept upward compression show various useful application full mix drum guitar using FabFilter multiband FabFilter available via For information see Parallel compression powerful mixing technique often misunderstood Read find really help make better mix When talking student age experience I often find one area struggle compression Perhaps surprising since concept fairly challenging even contemplating subtlety different kind physical implementation modelling Compressors available myriad different form using feedback control path even variation device opto attenuator diode ring valve list go Let leave complexity aside moment though article I really want try clear common misunderstanding increasingly fashionable technique parallel compression Of course discussing inherently complicated topic compression vital establish common framework terminology understand talking I begin The first thing establish compressor form actually answer reduces dynamic range input signal Whether configured make loud bit quieter quiet bit louder fundamentally exists reduce overall dynamic range something large unmanageable something smaller appropriate intended application The term range interpreted variety way purpose article I using refer range average signal level quietest musical element loudest difference ppp fff section performance like The vast majority compressor apply compression mean essence loud stuff made quieter More specifically signal threshold level left alone amount determined ratio setting The diagram Figure convenient way describing relationship signal level input compressor output The ladder top left show situation bypass input signal appears output exactly level horizontal The ladder right show effect downward compression signal level threshold remain unchanged reduced level proportionally according selected ratio case The conventional way illustrating compression plot graph input level horizontal axis output level vertical axis The graph Figure obtained measuring amplitude response compressor DAW using Audio Precision test system The dotted straight red line degree show response compressor bypassed clearly illustrating go come unchanged level The different coloured solid line obtained compressor switched threshold set The line result ratio clearly show input threshold ie Level horizontal axis output Level vertical axis threshold In word rise input result rise output half much hence compression ratio The trace show progressively ratio Anything generally referred output level barely rise regardless much input level exceeds threshold Incidentally compressor like one used measurement switch abruptly nothing squashing audio revealed distinct change angle transfer curve A compressor move gently inaction action transfer plot would curve smoothly away degree linear slope instead diverting abruptly Now let imagine musical signal quietest element measure loudest starting dynamic range If pas signal compressor threshold output signal range level threshold thus unchanged The latter figure arises source peak level threshold thus reduced half threshold Therefore dynamic range reduced case time peak level reduced level To help illustrate point I added coloured bar previous plot illustrate dynamic range peak level reduced Useful though form compression often want reduce dynamic range without reducing peak level In word want raise level quieter signal component rather turn loud one The usual way achieve introduce gain output compressor A good way understanding concept return ladder diagram I prefer call compression avoid confusion true compression I come back moment As lowest ladder diagram Figure show input signal first downwardly compressed usual way output raised level fixed amount gain The overall result dynamic range reduced time peak level restored input signal raised quiet bit made louder However diagram reveals clearly still louder element quieter signal simply raised level That key difference compression compression By latter term I mean processing squash quieter element leaving loud bit alone final diagram Figure illustrates So using condition previous measured example let say want amount reduction also want peak level remain This easily accomplished keeping compressor ratio threshold setting dialling gain The result seen measured plot Figure The direct effect adding gain raise overall output level seen vertical shift linear part transfer curve In case input signal emerges compressor quieter element musical signal raised amount Louder element threshold compressed ratio gain counteracting compressor peak level reduction highest input level appears output Normal downward compression whether used gain inherently change character loud signal extent squashing Rule number one downward compressor squash anything loud However action turning level back afterwards instantaneous take place timescale governed compressor attack release time constant The inevitable result sound shape complex delicate loud transient signal altered quite drastically This significant part reason different compressor design sound different one compressor may preferred given situation another An alternative way reducing dynamic range could potentially avoid issue damaged transient compress quieter signal leave loud one alone In word could employ device turn level signal threshold This true compression described briefly kind arrangement would theory least preserve loud delicate transient signal completely intact squashing quieter element Unfortunately though extremely rare find physical device actually least particularly easy achieve goal electronic hardware The Dbx Quantum I believe one device I aware current production Nevertheless I find measure device transfer curve might look something like I mocked Figure loud signal threshold would remain completely unaffected quiet signal would turned level amount depending ratio setting line ratio Once upwards compressor characteristic instead hard knee I illustrated plot would curve gently upwards instead changing angle abruptly However spend moment thinking idea genuine upwards compression realise would actually lot use application would probably raise noise floor wholly inappropriate level For example take upwards compressor gentle ratio threshold If ambient noise floor recording say act compression would drag appalling probably really want Given difficulty finding true upwards compressor I hear respond alternative way achieving something similar I glad asked yes The idea parallel compression conceived achieve much goal upwards compression In word aim leave delicate loud transient intact raising level signal employing standard downward compressor found conventional studio Given description might logically assume parallel compression somehow achieves form upwards compression great many people indeed often refer way included occasion It bit complicated though really depends parallel compressor set In strict technical term parallel compressor setup actually form downward compressor exhibit unique useful characteristic allows behave exactly like upwards compressor defined dynamic range Before examine real measurement different configuration probably worth revisiting quickly parallel compression work The basic concept split input signal feed two path one direct path feeding normal downward compressor The compressor output mixed unity gain direct path produce compressed signal The compressor set high ratio fact limiting often used threshold adjusted provides lot gain reduction input signal loudest The gain reduction better fact good start would better Of course requires compressor behaves nicely applying lot gain reduction generate distortion product The attack release control set suit material effect required usual way When configured parallel compression way contribution compressor loudest signal peak well quieter direct path massive gain reduction forced apply This mean point involvement mixed output signal virtually insignificant output signal completely dominated original input signal coming via direct path As result loud delicate transient left completely intact unchanged primary aim technique That tick one When come quiet input signal fall compressor threshold compressor obviously wo applying gain reduction This mean identical signal via direct compressor path two identical signal mixed together combined level greater individual signal In word simple parallel compression arrangement raise level quiet signal It interesting note raising quiet signal completely benign There active gain manipulation going would genuine upwards compressor straight gain effect In term reduction simple form parallel compression leaf loud bit unaffected raise quiet bit total reduction dynamic range If squashing required solution stack parallel compressor For example adding another pair compressor making three total plus direct path provide four identical signal combination output hence increase signal around Additional compression path added even dynamic range reduction Although little cumbersome greedy studio resource actually quite common technique described Michael Brauer Track feature November edition SOS part vocal processing technique Admittedly part approach combining different compressor different sound character achieve subtle tonal colour also creating genuine upwards compression Although Brauer probably frequently cited user parallel compression far one feature littered similar mention successful producer mix engineer including Jaycen Joshua tell u If use parallel compression risk thing sounding thin You begin original track producer love manipulate may deviate much whereas blend treatment pleasing I mentioned upwards compression perhaps time look real test measurement Figures obtained using Audio Precision test set measuring audio signal going parallel compression configuration DAW I used standard compressor previous example adjusted threshold ratio input signal neared compressor putting gain reduction In Figure blue line show transfer curve direct path would expect straight line degree confirming output level input level via route The dotted purple line show output compression path signal level threshold follow linear direct path threshold output level limited give virtually horizontal transfer curve Across top signal range output compressor barely increase The red line result parallel compression mixing together direct compression path unity gain As plot clearly illustrates signal compressor threshold exhibit fixed level increase exactly would expect combining two identical signal For signal threshold transfer curve show gentle compression slope overall gain gradually reverting back towards unity although never quite reaching That really look much like upwards compression It actually look pretty much conventional downwards I tried match reduction using compressor applied directly input signal gain usual way provide compression However closest I could get compression characteristic ratio threshold gain The result shown green line Although compression occurs slightly lower level peak level close overall gain reduction similar Something interesting becomes apparent though compare compression slope parallel red uplift green arrangement Look closely see uplift compressor trace perfectly straight line parallel compression slope actually curve downwards In fact parallel compressor threshold level actually look like gently curving slope upwards compressor To try make compression slope obvious I increased amount dynamic range reduction adding another pair parallel compressor totalling three result shown Figure The blue line show transfer curve three compressor set threshold As see quiet signal raised immediately threshold compression curve quite distinctly bowed trending towards angle linearity nears Above threshold curve follows exactly general shape true upwards compression There one obvious difference though parallel compression slope reverts linear gain shift similar gain threshold A true upwards compressor slope would continue horizontally In plot green line result setting compressor threshold make upwards compression characteristic much obvious To help reinforce point Figure illustrates exactly parallel compression setup still threshold set yet parallel compression path The red dotted line transfer curve direct path purple line output single parallel compressor configuration That look like upwards compression curve Well fact becomes even obvious ratio increased adding extra parallel compressor The dark blue line parallel compressor three compressor path plus direct path green line five compressor orange line seven compressor set threshold Quite clearly input signal upwardly compressed equivalent gentle compressor ratio determined number parallel compressor configuration However important remember signal threshold also raised level fixed gain shift dependent many parallel path summed behaviour quite different true upwards compressor I pointed earlier true upwards compressor gentle ratio threshold would raise ambient noise floor acceptable appalling Presumably reason upward compressor despite fact DSP designer free constraint electronics Using parallel compression single compressor would raise noise floor even using three parallel compressor squash would raise far acceptable Exploring measurement obtained compressor different configuration revealed taken complete system considering signal level noise floor clipping point parallel compression actually variation conventional downwards compression In strict technical sense parallel compression variation uplift compression combining downwards compression gain albeit way However benefit approach compressed region threshold exhibit normal characteristic would expected conventional compressor It downwards way resembles typical characteristic slope true upwards compressor least restricted dynamic range Consequently signal region compressor threshold compressed manner exactly true upwards compressor lifting level quieter signal threshold leaving louder element alone gentle progressive manner To intent purpose therefore parallel compression bestow similar character upwards compression within specific range signal level ie threshold From practical perspective key effective parallel compression ensure compressor threshold set comfortably lowest signal level processed In way source dynamic range fully contained within true upwards compression region transfer characteristic Furthermore adding additional parallel compressor increase effective compression ratio make processing obvious effective yet without introducing disastrous hike noise floor While configuring parallel compression system might impractical studio trivially simple achieve modern DAW setup All dial appropriate setting one compressor copy many additional parallel channel require So know ever asked whether parallel compression true answer depending wide dynamic range window And hopefully better idea make mix It necessary use multiple compressor increase amount uplift compression increasing gain single compressor raising gain parallel return path effect This discussed detail Q A response published June issue Sound On Sound Ltd Media House Trafalgar Way Bar Hill Cambridge United Kingdom Sound On Sound Ltd registered England Wales GB All content copyright SOS Publications Group licensors All right reserved The content article subject worldwide copyright protection reproduction whole part whether mechanical electronic expressly forbidden without prior written consent Publishers Great care taken ensure accuracy preparation article neither Sound On Sound Limited publisher held responsible content The view expressed contributor necessarily publisher Web site designed maintained PB Associates SOS simply operation reduces volume loud amplifies quiet sound thus reducing Compression commonly used A dedicated electronic hardware unit audio software applies compression called In compressor became available software plugins run software In recorded live music compression parameter may adjusted change way affect sound Compression limiting identical process different degree perceived effect A compressor high generally fast reduces loud sound certain threshold quiet sound remain unaffected A extreme type downward compression increase loudness sound certain threshold leaving louder sound unaffected Both downward upward compression reduce dynamic range audio signal An increase dynamic range audio signal Expanders generally used make quiet sound even quieter reducing level fall set threshold level A type expander The signal entering compressor split one copy sent signal level measured circuit controlled measured signal level applies required gain amplifier This design known type used today compressor Earlier design based layout signal level measured amplifier There number technology used amplification different advantage disadvantage used configuration called voltage change alter gain Optical compressor use small lamp create change signal gain Other technology used include When working digital audio technique commonly used implement compression via dedicated Often algorithm used emulate analog technology A compressor reduces level audio signal amplitude exceeds certain It commonly set dB lower threshold dB mean larger portion signal treated compared higher threshold dB The amount gain reduction determined ratio mean input level threshold output signal level dB threshold The gain level reduced dB It important understand compressor lowering signal desired ratio lowering signal compressor still working even input signal fallen threshold amount time determined The highest ratio often known It commonly achieved using ratio effectively denotes signal threshold brought threshold level except briefly sudden increase input loudness known A compressor might provide degree control quickly act The phase period compressor decreasing gain reach level determined ratio The phase period compressor increasing gain level determined ratio zero dB level fallen threshold The length period determined rate change required change gain For intuitive operation compressor attack release control labeled unit time often millisecond This amount time take gain change set amount dB decided dB For example compressor time constant referenced dB attack time set m take m gain decrease dB m decrease dB In many compressor attack release time adjustable user Some compressor however attack release time determined circuit design adjusted user Sometimes attack release time dependent meaning time change depending input signal Because loudness pattern source material modified compressor may change character signal subtle quite noticeable way depending setting used Another control compressor might offer knee This control whether bend response curve threshold threshold abrupt hard gradual soft A soft knee slowly increase compression ratio level increase eventually reach compression ratio set user A soft knee reduces audible change uncompressed compressed especially higher ratio hard knee changeover would noticeable A compressor responds instantaneous level input signal While providing tighter peak control peak sensing might yield quick change gain reduction evident compression sometimes even distortion Some compressor apply averaging function commonly RMS input signal comparing level threshold This produce relaxed compression closely relates human perception loudness A compressor stereo linking mode applies amount gain reduction left right channel This done prevent image shifting occur channel compressed individually It becomes noticeable loud element panned either edge stereo field raise level program compressor threshold causing image shift toward center stereo field Stereo linking achieved two way Either compressor sum mono left right channel input left channel control functional compressor still calculates required amount gain reduction independently channel applies highest amount gain reduction case could still make sense dial different setting left right channel one might wish le compression event Because compressor reducing gain level signal ability add fixed amount output usually provided optimum level used The function designed overcome problem forced compromise slow attack rate produce gain change fast attack rate capable catching transient misnomer future actually observed Instead input signal split one side delayed The signal used drive compression delayed signal appears output This way slower attack rate used catch transient The cost solution signal delayed Compression often used make music sound louder without increasing peak amplitude By compressing peak loudest signal becomes possible increase overall gain volume signal without exceeding dynamic limit reproduction device medium The net effect compression applied along gain boost relatively quiet sound become louder louder sound remain unchanged Compression often applied manner audio system restaurant retail similar public environment play background music relatively low volume need compressed keep volume fairly constant also make quiet part music audible ambient noise Compression increase average output gain reduced dynamic range For paging evacuation system add clarity noisy circumstance save number amplifier required Compression often used music production make performance consistent dynamic range sit mix instrument better maintain consistent attention listener Vocal performance usually compressed make stand surrounding instrument add clarity Compression also used instrument sound create effect primarily focused boosting For instance drum cymbal sound tend decay quickly compressor make sound appear sustained tail Guitar sound often compressed produce fuller sustained sound Most device capable compressing audio dynamic also used reduce volume one audio source another audio source reach certain level called In often used controlled kick drum similar percussive trigger prevent two conflicting provide pulsating rhythmic dynamic sound A compressor used reduce sound vocal feeding compressor set relevant frequency frequency activate compressor If unchecked sibilance could cause distortion even sound level high This usage called Compression used voice communication employ Often used make particular station signal readable distant station make one station transmitted signal stand others This occurs especially amateur radio station competing opportunity talk station Since SSB signal depends level net result average amplitude signal hence average transmitted power would stronger would compression used Most modern amateur radio SSB transceivers speech compressor built Compression also used especially transmit audio professional Compression used extensively boost perceived volume sound reducing dynamic range source audio typically CDs range accommodated broadcast signal Broadcasters country legal limit instantaneous peak volume may broadcast Normally limit met permanently inserted hardware chain see As alluded use compressor boost perceived volume favorite trick broadcaster want station sound louder volume comparable station dial The effect make heavily compressed station jump listener given volume setting But loudness jump limited difference also exist programme material within channel Loudness difference frequent source audience complaint especially TV commercial promos seem loud Complicating many broadcaster use peak meter Unfortunately peak level reading correlate well perceived loudness It basically used prevent overmodulation The European Broadcasting Union addressing issue EBU PLOUD Group consist audio professional many broadcaster equipment manufacturer In EBU published EBU Recommendation R introduces new way metering normalising audio The Recommendation based could called real revolution Several European TV station already announced support new norm manufacturer announced product supporting new Mode Loudness meter To help audio engineer understand Loudness Range material consists check compression may needed fit channel specific delivery platform EBU also introduced Loudness Range Descriptor Record company mixing engineer mastering engineer gradually increasing overall volume commercial album The greater achieved using higher degree compression limiting compression algorithm engineered specifically accomplish task maximizing audio level digital stream Hard limiting result affecting tone timbre music The effort increase loudness referred Most television commercial compressed heavily typically dynamic range dB achieve perceived loudness staying within permissible limit This explanation problem TV viewer listener noticed year While commercial receive heavy compression reason radio broadcaster traditionally used achieve loud audio image TV program material particularly old movie soft dialogue comparatively uncompressed TV station This result commercial seeming much louder television program A compressor sometimes used reduce dynamic range signal transmission expanded afterward This reduces effect channel limited dynamic range See often include compression circuitry protect speaker sudden peak could damage speaker player often use compression effect either available pedal unit device bass amp even sound level regular amplitude peak kick drum cause rest mix change volume due compressor generally avoided music production However many musician purposefully use phenomenon causing mix alter volume rhythmically time beat A compressor used bring audio volume listener hearing range To enable patient perceive direction sound coming compression may required Compressors also used electronic active sound protection let sound ordinary volume heard normally attenuating louder sound possibly also amplifying softer sound This allows example shooter wearing hearing protection shooting range converse normally sharply attenuating much louder sound gunshot similarly musician hear quiet music protected loud noise drum cymbal crash Compression limiting identical process different degree perceived effect A compressor high ratio generally fast attack time Compression ratio generally considered limiting high ratio fast attack time Ideally ensures audio signal never exceeds amplitude threshold Ratios way considered wall The sonic result momentary infrequent limiting harsh unpleasant thus common safety device live sound broadcast application Some amplifier include limiter prevent sudden volume peak causing distortion damaging speaker Some modern consumer electronics device incorporate limiter us AVLS audio product A compressor input control gain main input output based level signal input The compressor behaves conventional manner input supplied signal The input used lowering music volume automatically speaking The DJ microphone signal routed input whenever DJ speaks compressor reduces volume music A sidechain control used reduce volume signal strong spectral content within certain frequency range act reducing level vocal range kHz A help reduce high frequency tend overdrive medium phonograph record FM radio Another use music production serf maintain loud bass track without causing undue peak result loss overall One technique insert compressor parallel signal path This known form upward compression give measure dynamic control without significant audible side effect ratio relatively low compressor sound relatively neutral On hand high compression ratio significant audible artifact chosen one two parallel signal used concert mixer recording engineer artistic effect called Combining linear signal compressor reducing output gain compression chain result detail enhancement without peak reduction since compressor significantly add combined gain low level This often beneficial compressing transient content since maintains dynamic liveliness despite reducing overall dynamic range Multiband compressor act differently different frequency band The advantage multiband compression compression unneeded audible gain change pumping frequency band caused changing signal level single frequency band Multiband compressor work first splitting signal number The frequency range crossover frequency may adjustable Each split signal pass compressor independently adjustable threshold ratio attack release The signal recombined additional limiting circuit may employed ensure combined effect create unwanted peak level Software emulation multiband compressor complex many band require corresponding computing power Multiband compressor primarily tool inclusion set increasing use among mix engineer signal chain commonly use hardware multiband compressor increase apparent without fear Having louder sound often considered advantage commercial competition However adjusting radio station multiband output compressor requires artistic sense style plenty time good ear This constantly changing audio band may equalizing effect output dynamically modifying frequency response A development approach programmable radio output processing parameter multiband compressor automatically change different setting according current programme block style time day Serial compression used Serial compression achieved using two fairly different compressor signal chain One compressor generally stabilizes aggressively compress stronger peak This normal internal signal routing common combination device marketed RMS compressor general gain control followed fast peak sensing limiter overload protection Done properly even heavy serial compression sound natural way possible single compressor It often used even erratic Some support implement compression These increase perceived volume audio track even volume music playlist span multiple music type This improves listenability audio played speaker played noisy environment car party Such software may also used audio mastering In article released January Emmanuel Deruty Damien Tardieu performed systematic study describing influence compressor brickwall limiter musical audio signal The experiment involved four software limiter Waves Sonnox Oxford Limiter Thomas Mundt Loudmax Blue Cat Protector well four software compressor Waves Sonnox Oxford Dynamics Sonalksis URS The study provides objective data limiter compressor audio signal Five signal descriptor considered integrated loudness LRA density clipped sample RMS power account signal physical level loudness perceived level The crest factor difference signal peak average power occasion considered basis measure instance Finally LRA repeatedly considered measure dynamic musical sense The tested limiter following influence signal In word limiter increase physical perceptual level increase density clipped sample decrease crest factor decrease LRA given amount limiting substantial As far compressor concerned author performed two processing session using fast attack m one case slow attack m Gain deactivated resulting file normalized Set fast attack tested compressor following influence signal In word compressor increase physical perceptual level slightly They decrease density clipped sample decrease crest factor Set slow attack tested compressor following influence signal In word compressor decrease physical perceptual level decrease influence crest factor clipped sample density Amplitude compression one confusing effect audio engineer For engineer compression seem complicated intimidating The processing compressor depends many factor including threshold ratio attack time release time knee On compressor factor set engineer compressor factor fixed For engineer may even intuitive control helpful use performing amplitude compression On top one way use compressor From subtle dynamic range reduction extreme tone shaping compressor several dramatically different purpose mix This important different control compressor least able select compressor correct fixed setting I heard many engineer similar experience compressor They think Let see compressor add anything After routing track compressor arbitrarily adjust parameter stumble upon desired sound stop using compressor This make use compressor As much I wish I could say There wrong way use compressor nothing could truth Unfortunately many way use compressor incorrectly In fact incorrect use compressor one fastest way ruin mix For reason recommendation compress purpose In word use compressor specific reason Whether trying solve problem mix add textural effect mix able quickly choose compressor use setting start Here five basic starting point compressor corresponding purpose Conventional downward compressor detect signal amplitude higher threshold respond reducing amplitude signal By using fast attack time fast release time compressor respond almost instantaneously signal amplitude cross threshold Therefore gain reduction primarily applied signal amplitude threshold When amplitude drop threshold gain reduction applied If threshold set attack signal trigger compressor setting compressor used tame transient signal also help prevent signal clipping The threshold adjusted change much transient changed Lowering threshold increasing ratio squash transient resulting higher relative amplitude note sustain Extreme setting technique work well This technique work well compressor The field effect transistor circuit compressor mean respond quickly This technique great controlling attack drum hit note guitar This transient tamer technique used perceptually push instrument back mix attack cut much The complement transient tamer transient enhancer Rather using compressor reduce amplitude signal attack compressor used reduce amplitude signal sustain The threshold still set gain reduction triggered transient However attack time increased gain reduction delayed attack pass compressor By delaying gain reduction sustain signal reduced With technique compressor release set gain reduction continues start next note Therefore release time set synchronized note instrument groove If snare drum playing backbeat gain reduction previous note return dB next note played This technique great drum bass guitar piano anywhere else want sharpen instrument attack Changing compressor ratio low setting high setting change much sustain squashed To dial setting compressor helpful use compressor fine control attack time release time The following order operation used quickly dial appropriate setting based song There also many compressor fixed setting perform technique automatically The dbx example compressor fixed attack time allows signal transient pas The dbx great drum great bass The release time program dependent meaning synchronize way instrument note automatically On SSL console compressor switch attack time In one position attack time fast position attack time slower Essentially switch assumes engineer need two setting either attack time compress transient attack time allow transient pas In general helpful way think using compressor attack control Even though variable knob used set wide range attack time much simpler ask question Transient choosing attack setting This transient enhancer technique used perceptually push instrument forward mix transient cut In theory compressor amplitude processor used reduce compress dynamic range signal This accomplished reducing amplitude part signal high amplitude However compressor also used increase expand dynamic range signal accomplished transient enhancer technique Nonetheless many time purpose using compressor actually reduce dynamic range signal With transient tamer technique threshold conventionally set compressor responds transient portion signal Another technique reduce signal dynamic range set threshold compressor responds transient sustain portion signal If low ratio used transparent method reduce dynamic range One place start would use ratio This technique requires compressor variable ratio go After low ratio set threshold reduced nearly entire signal trigger compressor With technique effective gain reduction portion signal slightly threshold smaller effective gain reduction portion signal significantly threshold As example ratio input signal dB threshold output dB threshold The effective gain reduction dB If input signal dB threshold output dB threshold effective gain reduction dB Therefore technique effective way slightly reduce gain low amplitude signal gently reduce gain high amplitude signal With low ratio compressor transparent The dynamic range signal reduced decreasing amplitude threshold downwards compression Additionally dynamic range signal reduced increasing amplitude threshold This called upwards compression This mode operation typically found analog hardware compressor However becoming common digital software compressor This type compression helpful purpose change amplitude quieter part signal One example would would like increase amplitude instrument sustain Common place use technique vocal lead instrument bass The result upwards compression signal much consistent level Therefore help vocal part stay front rest mix It also help make sure bass sits context mix without ever getting loud quiet When come compressor ratio upwards compression us ratio le As example ratio mean input signal dB threshold increased output dB threshold When actually setting ratio upwards compression little go long way Even setting significant impact This type compression found many software compressor including Waves several iZotope plugins Lastly another version upwards compression accomplished using combination downwards compression gain Therefore compressor specific setting upwards compression still achieve similar result Downwards compression used reduce amplitude signal threshold After downwards compression performed additional headroom increase gain signal without clipping By applying constant gain amplitude threshold threshold increased If performed carefully type compression actually increase amplitude portion signal low amplitude almost net change amplitude portion high amplitude This type compression used subtly dramatically Try series parallel Experiment technique everything drum vocal piano etc Almost compressor used technique You could try All Buttons Mode drum room mics gentler setting vocal Fairchild Compressors one versatile powerful processor audio engineer use Even though many parameter possible combination parameter compressor mastered use common mix situation After learning several basic starting point matter making minor adjustment make compression audible When compress make sure compress purpose To learn check video Eric Tarr You might also like Sign first learn new tutorial sale giveaway Awesome Talk soon There error submitting subscription Please try Awesome We sent download link inbox There error submitting subscription Please try What Knee Compressor The Basics Attack Time Compressor The Basics Audio Compression Like cool toy geeky gift Check Give u like share follow Of course downward compression downward expansion thought ratio like ratio upward If upward compression would ratio upward expansion I think typo conventional upwards Expansion work level fall threshold rise see happening graph Hello way make printable version please Found solution Print Friendly PDF chrome extension Therefore technique effective way slightly INCREASE gain low amplitude signal gently reduce gain high amplitude signal With low ratio compressor transparent Eric Tarr man Seriously Ive looking like year Im finding I used think Mr Weiss best teacher PAF seriously Tarr man I learn something new Aha moment every time tackle topic perspective A transparent teacher making world music much higher quality one teaching time also known technique used Parallel compression form upward compression achieved mixing unprocessed lightly compressed signal heavily compressed version signal Rather bringing highest peak purpose reduction reduces dynamic range bringing softest sound adding audible detail It often used stereo percussion bus recording mixdown vocal recording mix live concert mix The internal circuitry noise reduction introduced contained parallel bus heavy compression one two mixed flexible ratio In October article Mike Bevelle published magazine describing technique applied studio recording Bevelle called compression though term made confusion technique us external key side chain signal determine compression target signal Bevelle article entitled Compressors Limiters reprinted magazine June A article Richard Hulse April included application tip description implementing technique digital audio workstation coined term parallel compression described implementation upward compression increase audibility softer passage Studio engineer New York City became known reliance technique picked name New York compression The human ear sensitive loud sound suddenly reduced volume le soft sound increased compression take advantage difference Unlike normal limiting downward compression fast music retained parallel compression preserving feel immediacy live performance Because method le audible human ear compressor set aggressively high ratio strong effect In audio mix using analog analog compressor parallel compression achieved sending monophonic stereo signal two direction summing multiple pathway mixing together ear achieve desired effect One pathway straight summing mixer pathway go mono stereo compressor set aggressively gain reduction The compressed signal brought back summing mixer blended straight signal If digital component used must taken account If normal analog method used digital compressor signal traveling parallel pathway arrive summing mixer slightly different time creating unpleasant phasing effect The digital compressor pathway take little time process order millisecond longer Instead two pathway must number processing stage straight pathway assigned compression stage given aggressively high ratio In case two signal go compression stage pathway delayed amount time one set dynamic range compression little set high amount gain reduction The method used artistically fatten beef mix careful setting attack release time compressor These setting may adjusted compressor cause signal pump breathe song adding character sound Unusually extreme implementation achieved studio mix engineer New us five parallel compressor adjusted individually tonal variation mixed blended taste achieve target sound vocal Mix engineer Anthony Rollmottle Puglisi us parallel compression applied conservatively across entire mix especially electronic music give track extra oomph power make difference quieter portion jam without resorting one horrific squeeze dynamic right song While parallel compression widely utilized electronic dance music compression technique popularly used give synth lead melodic element pulsating quality ubiquitous genre One track may kick thereby compressing beat occurs Let talk upward expansion There four different type dynamic processing upward expansion one opinion good technique achieve fullness sound And seems people never talk I think time An upward expander take signal threshold increase gain acting like opposite compression Let say normal compressor signal threshold apply example ratio signal threshold would rise But invert ratio ratio every threshold output rise So increase dynamic range making loud part peak louder The parameter work way setting compression One use case use technique transient get attack overhead channel So I set threshold like I normally would applying regular compression Less get transient example I use fast attack pretty high ratio Don forget reduce make gain So afford cool expensive transient shaper use technique instead Because transient shaper work similar way If choose slower attack time longer release time use technique bring tone body drum It efficient way get tone drum But work Part Production Expert Community Copyright Production Expert Ltd Area promotion coupon code If spent time browsing internet searching make mix better doubt come across term parallel compression It something anyone mix understand able apply mix Let explore basic concept parallel compression set DAW Before begin let say parallel compression NOT simply knob In response growing interest parallel compression company begun including knob circuit The problem trend parallel compression specific signal routing technique guarantee circuitry knob either executed properly b even parallel compression For true parallel compression route signal console DAW What parallel compression Simply put upward compression Traditional compression remove attenuates peak within signal With parallel compression blend two routed version signal one signal compression signal heavy compression The heavily compressed signal void peak maintains lower level part signal When blended uncompressed signal level added quieter component signal giving larger sound maintaining original peak dynamic Rather quieting peak adding signal level lifting quieter component signal resulting upward compression Cool Well let learn set It actually super easy Here basic drum session There four mono track kick drum snare drum overhead left overhead right These track set output monitor routed stereo master fader We start bussing drum stereo AUX track The AUX stereo since want maintain stereo panning original drum track If original track mono could add mono AUX track If wanted add parallel compression one track would skip step altogether Next want properly route track AUX track This alternative group function As see image drum group However active ignore Sending sub mix case drum AUX group always good practice regardless whether using parallel compression It allows control overall level sub mix without adjust individual track faders mixed In case AUX also allows add effect sub mix We adding compression AUX since dry sub mix could add EQ wanted Now need add second AUX track like give name make sense Now add compression Drums Cmp AUX For sake visual tutorial add software compressor course always add hardware compressor For hardware compressor would route compressor available converter input output You add compressor selecting select converter in out assigned compressor Our next tutorial focus adding hardware insert detail If adding parallel compression mono track mono AUX would need assign mono software compressor single hardware compressor Now compressor limiting You want squash hell signal eliminate peak leaving lower level uncompressed signal There correct way really experiment In case set plugin ratio fastest attack release hit input hard Now fun part Simply increase Drums Comp fader add parallel compression As increase fader hear compressed fill fill bottom One important note worth mentioning DAW processing latency compressed AUX Be aware latency causing phase issue mix adjust DAW converter delay compensation accordingly One trick avoid phase issue add compressor dry AUX leave bypass mode However modern DAWs simple easy use delay compensation tool TapeOp Larry Crane great video overview parallel compression want hear used mix Check We got back We offer flat rate repair DIY build get stuck Listen Yes step step build guide User photo DIY without compromise Copyright Hairball Audio Web design begin learning software business creative video instruction recognized industry expert  So may heard parallel compression interview article sound like overly complex math equation actually understand sometimes referred upwards compression simply combining signal compressed one blending approach preserve dynamic openness character frequency response unprocessed signal solving issue dynamic track getting lost Let take look work Take Me Down actually using parallel compression Drum Sub Mix I aux track without compression little bit EQ little bit low end little bit top end drum And I aux track feeding drum bus drum track aux track And DrumSquash track fed A This update includes one additional chapter cover latest feature Pro Tools including plugins advanced metering option mixing shortcut offline bouncing Are sure want mark video course unwatched This affect course history report certificate completion course Type entry box click Enter save note Press video thumbnail jump immediately timecode shown Notes saved account also exported plain text MS Word PDF Google Doc Evernote You started assessment previously complete You pick left start begin learning software business creative video instruction recognized industry expert Thank taking time let u know think site We unable submit feedback two version one type processor basically opposite compressor Most also thing Their sensor respond incoming signal level like compressor affect level opposite manner dynamic range signal rather decreasing The control control otherwise one compressor The threshold control signal trigger effect ratio control much signal cut boosted upon crossing threshold nbsp different meaning depending ask Most people use upward mean lazy inaccurate use term common mainstream usage The correct interpretation achieved various type compression circuit Parallel compression actually people claim result sound Also DSP plugins like Waves process call upward compression may fit definition nbsp There expanders Upward expansion boost signal dynamically increasing amount signal go threshold Downward expansion usually find typical rack processor cut signal dynamically signal threshold Expanders often used improve ratio recording also used special dynamic effect like making bass line percussive helping vocal pop mix nbsp A gate sometimes called noise gate downward expander extremely high ratio When signal level reach threshold gate go closed signal pass open signal pass It nothing Some gate offer advanced control attack decay time basic one threshold knob This common way controlling noise hum distortion pickup noisy circumstance pluck note gate open note dy gate close keeping quiet next note Of course mean full volume I really recommend unless making intentionally music In case noise suppressor gate cut high frequency range noise usually found near KHz sometimes downward expander filter In either case work removing part signal cutting high cutting beginning end note A cutting le brutality elegance getting around fact remove signal noise Because I recommend ANY noise suppressor price unless option nbsp Many guitarist find amp setup pedal way prevent getting wash noise feedback noise gate may necessary normal part working big distortion sound onstage nbsp For anyone else cascading stage usually better way reduce eliminate noise Try shielding cavity instrument making sure grounded properly Identify inherently noisy pedal replace one Try using isolated power supply pedal  Check gain staging sure stage set clean possible often setting input gain low output level high This input level gain usually active boost add amplify noise output master volume typically passive cut maximum internal gain add extra noise One way another almost always better noise problem rather spending money piece equipment mediocre job hiding noise All text page written owned OVNIFX right reserved Copying prohibited please feel free link page using link text compressor review Upward compression In software design upward compression mean form demodularization subordinate module copied body superior module Other Interview Questions 
version description document	By Friday February In I put everything need deal technical requirement software In I put everything design description package component inside software interface workflow In I put everything description whole architecture system software In I gathered information organization test traceability SRS requirement description result test The description delivery software hardware If contains mandatory information identify software version dependency generated This template last first series template You need document software development project middle importance medical device However made simple project For project complexity need pay attention software configuration software development The next two template software configuration management plan software development plan They contain information subject find project management plan Later I add risk management plan template Then series management template complete Stay tuned list template growing fast You find Please feel free give feedback contact I share template condition Comments formatted using simple wiki syntax may refer The Software Version Description SVD identifies describes software version consisting one Computer Software Configuration Items CSCIs It used release track control software version The term version may applied initial release software subsequent release software one multiple form software released approximately time example different site EC This Data Item Description DID contains format content preparation instruction data product generated specific discrete task requirement delineated contract This DID used developer tasked identify record exact version software delivered user support site The Contract Data Requirements List CDRL DD specify whether deliverable data delivered paper electronic medium given electronic form ASCII CALS compatible specified word processor support software may delivered developer format rather format specified herein may reside software engineering CASE automated tool rather form traditional document This DID supersedes Limited Approval Use automated technique encouraged The term document DID mean collection data regardless medium  Diagrams table matrix presentation style acceptable substitute text data required DID made readable using style  The document shall include title page containing applicable document number volume number indicator security marking restriction handling document date document title name abbreviation identifier system subsystem item document applies contract number CDRL item number organization document prepared name address preparing organization distribution statement For data database alternative form information shall included external internal label equivalent identification method  The document shall contain table content providing number title page number titled paragraph figure table appendix For data database alternative form information shall consist internal external table content containing pointer instruction accessing paragraph figure table appendix equivalent  Each page shall contain unique page number display document number including version volume date applicable For data database alternative form file screen entity shall assigned name number way desired data indexed accessed  If paragraph tailored DID resulting document shall contain corresponding paragraph number title followed This paragraph tailored For data database alternative form representation need occur table content equivalent  Any section paragraph subparagraph DID may written multiple paragraph subparagraphs enhance readability  If data description required DID published standard data element dictionary specified contract reference entry dictionary preferred including description  Commercial existing document may substituted part document contain required data Content requirement begin following page The number shown designate paragraph number used document Each number understood prefix within DID For example paragraph numbered understood paragraph within DID This section shall divided following paragraph This paragraph shall contain full identification system software document applies including applicable identification number title abbreviation version number release number It shall also identify intended recipient SVD extent identification affect content software released example source code may released recipient This paragraph shall briefly state purpose system software document applies It shall describe general nature system software summarize history system development operation maintenance identify project sponsor acquirer user developer support agency identify current planned operating site list relevant document This paragraph shall summarize purpose content document shall describe security privacy consideration associated use This section shall list number title revision date document referenced document This section shall also identify source document available normal Government stocking activity This section shall divided following paragraph This paragraph shall list identifying number title abbreviation date version number release number applicable physical medium example listing tape disk associated documentation make software version released It shall include applicable security privacy consideration item safeguard handling concern static magnetic field instruction restriction regarding duplication license provision This paragraph shall list identifying number title abbreviation date version number release number applicable computer file make software version released Any applicable security privacy consideration shall included This paragraph shall contain list change incorporated software version since previous version If change class used Class II change change shall separated class This paragraph shall identify applicable problem report change proposal change notice associated change effect change system operation interface hardware software This paragraph apply initial software version This paragraph shall identify reference data contained software version For software version first paragraph shall describe change made adaptation data This paragraph shall list identifying number title abbreviation date version number release number applicable document pertinent software version released included release This paragraph shall provide reference following information applicable Instructions installing software version b Identification change installed version used including adaptation data included software version Security privacy safety precaution relevant installation Procedures determining whether version installed properly A point contact consulted problem question installation This paragraph shall identify possible problem known error software version time release step taken resolve problem error instruction either directly reference recognizing avoiding correcting otherwise handling one The information presented shall appropriate intended recipient SVD example user agency may need advice avoiding error support agency correcting This section shall contain general information aid understanding document background information glossary rationale This section shall include alphabetical listing acronym abbreviation meaning used document list term definition needed understand document Appendixes may used provide information published separately convenience document maintenance chart classified data As applicable appendix shall referenced main body document data would normally provided Appendixes may bound separate document ease handling Appendixes shall lettered alphabetically A B etc Translator Simon Wright Last updated United States whose purpose establish uniform requirement software development documentation It released replaced It meant interim standard effect two year commercial standard developed Unlike previous effort like seminal mainly focused risky new area software development first attempt truly comprehensive description It baseline ISO IEEE related effort replaced It also contains much material subsequent professionalization project management covered Project Management Body Knowledge PMBOK The document Overview Tailoring Guidebook page The Application Reference Guidebook page Associated document template Data Item Descriptions described bringing documentation process order could scale project size human conducting aircraft battleship canal dam factory satellite submarine etcetera It one military standard survived Perry Memo Secretary Defense William Perry memorandum commanding discontinuation However canceled May replaced essentially identical demilitarized version EIA process example guide Several program outside military continued use standard due familiarity perceived advantage alternative standard free availability standard document presence process detail including Data Item Descriptions standard describes development documentation term DIDs effort select conduct system development support effort Each DID generically describes required content file document describes system aspect system These document could take many form source code installation script various electronic paper report contracting party government encouraged specify acceptable format Any data item description specific contract meaning section desired particular effort identified provided part identifying CDRL item produced delivered contractor Exactly DIDs part DIDs required particular system depends nature project part produced contract The DIDs 
working  storage	IBM Knowledge Center us JavaScript Scripting appears disabled supported browser Enable JavaScript use try Please note DISQUS operates forum When sign comment IBM provide email first name last name DISQUS That information along comment governed By commenting accepting follow section Create save customized word list Sign today start improving vocabulary Please set username People see Author Name public word list Crude oil gasoline heating oil diesel propane liquid including biofuels natural gas liquid Exploration reserve storage import export production price sale Sales revenue price power plant fuel use stock generation trade demand emission Energy use home commercial building manufacturing transportation Reserves production price ment productivity distribution stock import export Includes hydropower solar wind geothermal biomass ethanol Uranium fuel nuclear reactor generation spent fuel Comprehensive data summary comparison analysis projection integrated across energy source Monthly yearly energy forecast analysis energy topic financial analysis Congressional report Financial market analysis financial data major energy company Greenhouse gas data voluntary ing electric power plant emission State energy information including overview ranking data analysis Maps energy source topic includes forecast map International energy information including overview ranking data analysis Short timely article graphic energy fact issue trend May August November Containing storage capacity data crude oil petroleum product selected biofuels The report includes table detailing working net available shell storage capacity type facility product Petroleum Administration Defense District PAD District Net available shell storage capacity broken show percent exclusive use facility operator percent leased others Crude oil storage capacity data also provided Cushing Oklahoma important crude oil market center Data released twice year near end May data March near end November data September You activate Facebook Messenger news bot Once subscribed bot send digest trending story day You also customize type story sends Click button subscribe wait new Facebook message TC Messenger news bot Thanks TC Team Storing energy produced renewable source significant challenge one number player including Tesla looking address Add Alphabet X formerly Google X list making attempt Its new Malta project focused building storage facility support power grid The Malta project us cold antifreeze hot salt store power system designed keep power reserve longer battery Tesla us keep power using Powerpack station populate Malta another moonshot ambitious X lab also spawned initiative like car project Google became Alphabet well Google Glass It also looking different project Malta seems one promising Here work Two tank get filled salt another two filled antifreeze similar hydrocarbon liquid system take electricity generated renewable source like wind solar This converted hot cold air heat salt cool antifreeze Then process reversed hot cold air pushed towards resulting gust wind move turbine generating usable electricity grid This kind thing needed renewable generation typically trouble dealing peak hour power consumption A power generation facility spin grid need power solar wind generate nature make possible schedule necessary line human use Rather discarding excess energy falling short time storage solution like Malta Tesla Powerpack allow generation peak generation time distribution peak consumption time As government utility globally look invest renewable power generation storage increasingly valuable commodity Latest headline delivered daily Crude oil gasoline heating oil diesel propane liquid including biofuels natural gas liquid Exploration reserve storage import export production price sale Sales revenue price power plant fuel use stock generation trade demand emission Energy use home commercial building manufacturing transportation Reserves production price ment productivity distribution stock import export Includes hydropower solar wind geothermal biomass ethanol Uranium fuel nuclear reactor generation spent fuel Comprehensive data summary comparison analysis projection integrated across energy source Monthly yearly energy forecast analysis energy topic financial analysis Congressional report Financial market analysis financial data major energy company Greenhouse gas data voluntary ing electric power plant emission State energy information including overview ranking data analysis Maps energy source topic includes forecast map International energy information including overview ranking data analysis Short timely article graphic energy fact issue trend April March Natural gas working storage capacity term demonstrated maximum working gas volume design capacity November slightly higher November Lower state Peak demonstrated capacity grew exception South Central Salt grew nearly East region fell le Similarly design capacity period slightly East region flat Midwest Mountain Pacific region South Central region The Energy Information Administration EIA us two measure natural gas storage capacity demonstrated maximum working gas volume design capacity This measure represents sum peak volume reported active storage facility November Lower state regardless individual peak occurred recent period covering December This incremental growth maximum demonstrated storage capacity occurred amid following market condition The total demonstrated maximum working gas volume Lower state increased November November rising billion cubic foot Bcf Bcf This period increase driven largely South Central region expanded Bcf In South Central Salt new demonstrated peak Bcf increase Bcf compared previous period This increase largely attributed several facility reaching new maximum level The East region period contrast showed slightly lower demonstrated peak Bcf Bcf lower last year demonstrated peak based storage volume December November Decreases spread across many different facility region whose previous maximum level occurred December This measure sum working gas design capacity active storage field November reported survey Form Design capacity based physical characteristic reservoir installed equipment operating procedure particular site often certified federal state regulator In third consecutive year new underground storage facility began operation Relatively existing storage facility expanded Market condition period include The total design capacity Lower state grew Bcf November November increasing Bcf With exception South Central region capacity storage region relatively unchanged capacity two period The East region decreased Bcf Midwest Mountain Pacific region showed significant change The South Central region contrast showed increased capacity Bcf increase attributable South Central Nonsalt Working gas capacity South Central Nonsalt expanded Bcf November November Most increase attributed two field Kinder Morgan Tejas West Clear Lake field expanded working gas capacity Bcf accounting increase Oneok field significantly expanded working capacity converting base gas working gas adding Bcf regional total Several incremental expansion occurred throughout region Working gas capacity South Central Salt expanded Bcf Most increase attributed two field Bridgeline Napoleonville field Louisiana added almost Bcf working gas capacity restored service Energy Transfer Fuel Ann Salt field Texas added Bcf working gas capacity converting base gas capacity These capacity addition offset Bcf decrease Boardwalk Louisiana Midstream Choc facility region No new storage facility began operating third consecutive year Increases working gas design capacity period came expansion existing field Eight existing facility expanded capacity Bcf November November Bridgeline Napoleonville facility working gas capacity Bcf restored service All eight expansion located South Central region The largest expansion Kinder Morgan Tejas West Clear Lake facility Texas expanded Bcf As November November concentrated salt formation possibly high deliverability rate Salt storage facility capable sending natural gas within short time sometimes within hour making responsive customer demand Most new storage capacity expansion existing facility One exception Magnum Gas Storage facility Utah new facility first salt facility West may operational late This facility likely become operational construction delay occur Three facility region became inactive collectively removed le Bcf design capacity total A facility considered inactive full year without injection activity company declares storage field drawing stock abandonment Two facility resumed storage activity adding Bcf storage capacity As mentioned Bridgeline Napoleonville field Louisiana restored service adding nearly Bcf working gas capacity The Atmos Energy Corporation Liberty South field Kansas also restored service adding Bcf working gas capacity SoCalGas Aliso Canyon experienced took led several month Because natural gas storage facility provide additional supply time increased demand removal facility service led region raised concern meeting peak demand Aliso Canyon one largest storage field nation serf important supplement regional supply The facility delivery capability likely diminished result incident Reduction facility capability may represent region The capacity peak demonstrated volume SoCalGas Aliso Canyon field included report Pacific region total Although field mostly unavailable storage service technically met EIA criterion active storage facility EIA report daily Southern California energy market information For second consecutive year injection season ended October level natural gas storage Working gas stock state totaled Bcf October October These figure notably lower peak capacity figure October stock reflect volume storage facility one specific day Maximum demonstrated capacity occur month period design capacity may exceed level storage facility would regularly reach The Midwest Mountain South Central region two South Central Lower reached new maximum November High storage volume generally apply downward pressure natural gas spot price The average Henry Hub spot price per million British thermal unit lower This lowest since Natural gas accounted larger share electricity generation recent High level natural generation even led In addition pipeline liquefied natural gas LNG export The Sabine Pass terminal Louisiana February With relatively low natural gas price total slightly first production decline since However produced substantially natural gas came online Northeast well connects regional production consuming market Higher natural gas production may reduce reliance storage source supply particularly Northeast Midwest region past geographically removed production center EIA forecast lead increase national production In Northeast production continued grow new pipeline infrastructure came online coinciding regional decline storage Conversely Gulf Coast state South Central region production declined new export outlet opened coinciding increase regional storage capacity Looking data substantial increase design capacity took place South Central region Texas accounting majority increase The increase attributable two field Kinder Morgan Tejas West Clear Lake facility Energy Transfer Fuel Ann Salt field Pennsylvania state showed significant decrease design capacity accounting nearly decline East region Several facility showed small decrease design capacity main driver Bcf decrease Equitrans Rager Mountain field Many state underground natural gas storage showed minor change maximum demonstrated storage level Texas featured largest increase design capacity also showed largest increase demonstrated peak capacity Some decrease attributable prior demonstrated peak occurring fell outside December range New demonstrated peak necessarily coincide new capacity generally state increased capacity also tended show new demonstrated peak In LUN storage essential configuration environment performance A LUN unique identifier given separate device logical unit accessed SCSI iSCSI protocol LUNs key disk array configuration disk typically defined set protect failure however RAID group ca presented host By assigning LUNs portion RAID group capacity presented host individual mountable volume For IT pro involves number decision number LUNs created size hardware LUNs live Additionally technique used dictate host access LUNs This guide walk issue explaining basic implementation best practice management At basic level LUNs reference specific storage SAN A LUN represent hard disk drive HDD portion HDD even full storage array LUNs essential management efficiency storage dictate host access storage The following link provide closer look LUN storage work certain configuration affect performance storage environment Learn exactly logical unit number origin term work iSCSI environment Why need LUN storage rather using disk Find LUN work answer storage expert Randy Kerns Expert Brien Posey answer five question storage administrator LUN storage environment Because virtual LUNs tied physical device allocation administrator create large number allocated data written Because one LUN shared numerous host vice versa need consider big LUN many LUNs single host access Other important implementation consideration include RAID level get best performance cost whether use technology thin provisioning tiering data deduplication The material describes approach decision effect SAN environment LUN configuration play key role tweaking virtual machine VM performance Learn hardware disk type RAID level LUN storage help run VMs per host LUN storage improve virtual machine performance When deciding many VMs put LUN size infrastructure important consideration Masking zoning two common practice LUN storage affect LUN access This expert answer explains practice best SAN fabric This tip explores background LUN storage different LUN feature vendor offer determine type LUN best Are getting ready move cloud environment Or maybe still trying figure better business go private adopt public cloud Either way handbook Inside find private cloud way go well tactic strategy get From VM deployment platform option expect DRaaS service find inside You forgot provide Email Address This email address appear valid This email address already registered Please You exceeded maximum character limit Please provide Corporate Address By submitting Email address I confirm I read accepted Terms Use By submitting personal information agree TechTarget may contact regarding relevant content product special offer You also agree personal information may transferred processed United States read agree Typically LUN storage managed one software program specifies path LUNs host However management best practice differ depending type environment used Fibre Channel versus iSCSI storage example The following tip outline best practice managing LUN storage IT expert Brien Posey discus five fundamental idea storage professional must understand managing LUN storage In VMware environment LUN management critical factor optimizing storage capacity performance These best practice managing LUNs VMware help get LUN storage By submitting agree receive email TechTarget partner If reside outside United States consent personal data transferred processed United States FlashSystem building block foundation IBM FlashSystem array New NAND module use TLC The debate still rage whether array make hybrid array obsolete cost matter Hardware vendor OCZ Storage Solutions said Saber HMS APIs let host server coordinate process take place Latest TechTarget cloud survey find cloud backup cloud file sync share disaster recovery archiving popular Cloud storage implementation user range backup DR tiering We reveal cloud storage application Assistant Editor Rachel Kossman tweet link content well analysis industry expert Interact let u A DR strategy cornerstone ensuring infrastructure application continue operate major outage hit Our Protection ransomware save business money time event attack It critical plan ahead BC DR testing major challenge organization Our free template offer way incorporate testing Following acquisition Vista Equity Partners Datto backup recovery line merging Autotask The company Aparavi us architecture try elbow way emerging competitive market protecting restoring Commvault HyperScale appliance architecture linear scalability HyperScale part vendor new All Rights Reserved 
work product	In American protects material prepared anticipation opposing counsel It also known It sometimes mistakenly called This doctrine apply country communication protected legal discovery process much limited Under doctrine tangible material intangible equivalent collected prepared anticipation litigation discoverable That party unable obtain information mean obtaining information without For example witness may left country Where required showing made court still protect mental impression attorney redacting part document containing mental impression The doctrine inclusive Unlike privilege includes communication attorney client includes material prepared person attorney self The material may prepared anybody long prepared eye towards realistic possibility impending litigation Additionally includes material collected attorney interrogatory signed statement information acquired prosecution defense case However memoranda brief communication writing prepared counsel use prosecuting client case mental impression conclusion opinion legal theory never discoverable opposing party However doctrine also le powerful privilege therefore may overcome showing necessity The doctrine originated case affirmed decision excluded discovery oral written statement made witness defendant attorney The Supreme Court acting recommendation Advisory Committee later enshrined doctrine formally Rule b Project team produce deliverable accorance contract term Images Work product deliverable two management term used describe different part project A work product includes beginning stage project proposal agenda report analysis information project A deliverable hand end result project At inception project organization determine implement apply work product deliverable meet requirement project A work product may begin analysis made development project creating type proposal project company deliver project received approval Companies use work product provide information current stakeholder potential investor Types information available work product might include prototype presentation recorded discussion diagram status report The organization also use work product source information project progress The deliverable mean many thing within one particular project project many deliverable A product company deliver completed building example deliverable However deliverable also represent goal organization surpassing previous sale acquiring customer A deliverable therefore something organization measure quantify includes tangibles finished product intangible increasing sale quarter percent An interim deliverable intermediate deliverable produced final deliverable For example furniture manufacturer may deliver table chair prior delivering remainder furniture order Once project approved work product provide information organization life project Specifically work product provide information agreement made define scope work establish payment arrangement Additionally work product also report information detail project including agenda meeting meeting minute trip report The goal project achieve something deliver end result This usually represents good service combination For organization deliver project organization able pay project Once organization establishes financing organization initiate parameter project Some parameter include life cycle planning project execution project closeout project including specific deliverable These parameter also represent part work product project Brian Bass written topic accounting trend Account Today He work senior auditor specializing manufacturing financial service company one Big accounting firm Bass hold master degree accounting University Utah Project Teams Examples Project Teams Project Plan Components Project Plan Project Mobilization Plan How Prepare Project Mobilization Plan Motivate Stakeholders How Motivate Stakeholders A rule opposing party generally may compel written oral material prepared course legal representation especially preparation litigation In limited circumstance however opposing party may discover compel disclosure work product upon showing substantial need undue hardship  See  Documents crafted attorney anticipation litigation Contain thought mental impression lawyer thus generally discoverable document may enjoy protection discovery trial application work product doctrine document include mental impression attorney party seeking document show substantial need inability obtain equivalent information without undue hardship The work product doctrine another limitation discoverable material It protects certain document crafted lawyer anticipation litigation covered aforementioned privilege At issue whether thought mental impression lawyer memorialized note document crafted anticipation litigation discoverable adversary In important case United States Supreme Court ruled whether note taken attorney interviewing witness sinking boat would discoverable Apparently attorney note intensely sought opposition evidence case The attorney note filled impression thought witness testimony The opposition obtaining document would served dual purpose procuring information disclosed witness gaining insight thought attorney integral aspect case The court held note largely contained thought impression attorney discoverable Historically lawyer officer court bound work advancement justice faithfully protecting rightful interest client In performing various duty however essential lawyer work certain degree privacy free unnecessary intrusion opposing party counsel Proper preparation client case demand assemble information sift considers relevant irrelevant fact prepare legal theory plan strategy without undue needle interference That historical necessary way lawyer act within framework system jurisprudence promote justice protect client The court greatly concerned lawyer preparation strategy litigation would hampered lawyer knew adversary could subpoena personal note case Again note reportedly permeated attorney thought impression witness On level discovery note akin getting hold opposing coach playbook adversary know play opposing coach call given situation adversary earns great technical advantage The court concerned lawyer note discoverable lawyer would feel free creative crafting strategy client case lawyer knowing personal note could obtained would stop keeping written record thought impression This end would serve client well especially long complicated case many witness document craft strategy around The court stated forcing lawyer testify remembers saw fit write could qualify evidence use impeachment corroborative purpose would make attorney much le officer court much ordinary witness The standard profession would thereby There one caveat regarding application work product doctrine consider Courts stated party seeking document protected doctrine would chance obtain demonstrate substantial need unable obtain equivalent without undue hardship The United States Supreme Court however held attorney work product based witness oral statement scenario adversary seeking document must make strong showing necessity overcome protection work product doctrine To sum study work product doctrine document may enjoy protection discovery trial application work product doctrine document include mental impression attorney party seeking document show substantial need inability obtain equivalent information without undue hardship Let look example shore explored topic Work product refers writing note memoranda report conversation client witness research confidential material reflect attorney impression conclusion opinion legal research product material confidential required submitted answer discovery request subpoenae The privilege disclosure belongs attorney Courts generally hold protection work done prior attorney involvement For example work investigator hired insurance company prior hiring attorney filing suit protected To afforded protection immunity doctrine material question must prepared anticipation litigation trial writing note memoranda report conversation client witness research confidential material attorney developed representing client particularly preparation trial A work product may demanded subpenaed opposing party document letter third party evidence since work product reflects confidential strategy tactic theory employed attorney All content website including dictionary thesaurus literature geography reference data informational purpose This information considered complete date intended used place visit consultation advice legal medical professional 
