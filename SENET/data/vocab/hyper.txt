code: source code, op code, condition code, machine code, object code, operation code, absolute code, micro code, specific code, assembly code, relocatable code, status code, interpretive code, compiler code, assembler code
configuration audit: physical configuration audit, functional configuration audit
assembler: relocating assembler, absolute assembler
repeatability: test repeatability
entity: dependent entity , non-primary entity, entity subtype, independent entity, system entity, dependent entity, independent entity 
report: test incident report, test report, item transmittal report, test item transmittal report, test summary report
traceability: requirements traceability, bidirectional traceability
assessment: assessment record, assessment output
web: web app, web application
buffering: simple buffering, anticipatory buffering, dynamic buffering
monitor: hardware monitor, execution monitor, software monitor
generator: application generator, test data generator, code generator, test case generator, test generator
graph: undirected graph, directed graph
encoding: two-level encoding, single-level encoding
assertion: inductive assertion method, output assertion, loop assertion, inductive assertion, input assertion
control board: change control board, configuration control board
program: target program, control program, source program object module, object program, supervisory program, source program, computer program
quality assurance: software quality assurance
order language: higher order language, high order language
flowchart: system flowchart, program flowchart
staging stream: baseline staging stream
configuration control: configuration control board
return: return code
format: instruction format, address format
read: nondestructive read, destructive read
input-process-output: input-process-output chart, hierarchical input-process-output
microinstruction: diagonal microinstruction, vertical microinstruction, horizontal microinstruction
risk profile: project risk profile
workload: workload model
compaction: global compaction, local compaction
background: background processing
interrupt: interrupt mask, priority interrupt, interrupt priority, interrupt latency, interrupt service routine
word: computer word
execution: execution efficiency, backward execution, reverse execution, execution time, reversible execution
compiler: on-line compiler, compiler generator, interactive compiler, incremental compiler, root compiler, compiler compiler, conversational compiler
address instruction: three-plus-one address instruction, one-plus-one address address instruction, four-plus-one address instruction, two-plus-one address instruction, one-plus-one address instruction, n-plus-one address instruction, two-plus-one address instruction, n-plus-one address instruction
name: box name, function name
sample instance: sample instance table, sample instance diagram
driven testing: data driven testing, keyword driven testing
recovery: backward recovery, forward recovery
manual: installation manual, programmer manual, maintenance manual, operator manual, user manual, diagnostic manual, support manual
roll: roll in, roll out
item: critical item, configuration item
diagram: entity-relationship diagram, state diagram, data structure diagram, state transition diagram, program structure diagram, box diagram, data flow diagram, block diagram
arrow: arrow segment, boundary arrow, internal arrow
inspection: design inspection, code inspection
backlog: product backlog
user: user documentation, user manual
kernel: security kernel
requirement: performance requirement, design requirement, functional performance requirement, physical requirement, contractual requirement, interface requirement, product requirement, customer requirement, nonfunctional requirement, derived requirement, functional requirement, implementation requirement
dump: static dump, core dump, differential dump, selective dump, change dump, snapshot dump, postmortem dump, memory dump, dynamic dump
configuration management: software configuration management, global configuration management
testing: component testing, performance testing, functionality testing, structural testing, validation testing, development testing, module testing, path testing, formal testing, branch testing, mutation testing, functional testing, white-box testing, integration testing, acceptance testing, security testing, alpha testing, qualification testing, back-to-back testing, operational testing, informal testing, glass-box testing, system testing, beta testing, unit testing, interface testing, statement testing
library: software library, production library, software development library,system library, macro library, master library, program library
prototyping: rapid prototyping
computer: computer resource allocation, microprogrammable computer, microprogrammed computer, computer resources
design: program design, hardware design language, data-structure-oriented design, detailed design, object-oriented design, function-oriented design, design document, data structure-centered design, design specification, design description, structured design, preliminary design, functional design, architectural design
result: execution result, expected result
pass: forward pass, backward pass
entity type: associative entity type
programmer: chief programmer, backup programmer, chief programmer team
capacity: memory capacity, storage capacity, channel capacity
clash: order clash, structure clash
decision: leading decision UNTIL, leading decision, trailing decision
source statement: logical source statement, physical source statement
specification: functional specification, performance specification, test case specification, requirements specification, test specification, formal specification, interface specification, interface requirements specification, development specification
state: privileged state, master state, problem state, slave state, supervisor state
version: version description document
decomposition: hierarchical decomposition, functional decomposition, modular decomposition
mutation: program mutation
tolerance: error tolerance, fault tolerance
programming language: nonprocedural programming language, procedural programming language
foreground: foreground processing
design review: preliminary design review, system design review, critical design review
schedule: master schedule, milestone schedule
driver: test driver
processing: background processing, foreground processing
component: computer software component, computer program component
flow: data flow, control flow
agreement: semantic agreement, syntactic agreement
efficiency: execution efficiency, storage efficiency
incident: software test incident
key: primary key, foreign key
address: machine address, source address, destination address, one-level address, n-level address, indirect address, specific address, generated address, base address, two-level address, real address, self-relative address, effective address, relative address, direct address, indexed address, relocatable address, multilevel address, virtual address, symbolic address, synthetic address, n-level address, absolute address
interface: interface requirements specification, human-machine interface, user interface, man-machine interface, interface design document
hierarchical modeling:
estimate: estimate to complete, estimate at completion
configuration: configuration item form, configuration identification, configuration management, configuration audit, global configuration, local configuration, configuration index, configuration context, configuration item development record, configuration status accounting, project area configuration, configuration provider, configuration control, configuration specification, configuration item
change: engineering change, specification change notice
software development: software development notebook, software development folder, software development file
definition: data set definition, resource definition
configuration identification: product configuration identification functional baseline, allocated configuration identification, functional configuration identification, product configuration identification
language: stratified language, declarative language, assembly language, algebraic language, computer language, high level language, symbolic language, assembler language, object language, high-order language, rule-based language, interactive language, target language, block-structured language, procedure-oriented language, program definition language, artificial language, structured programming language, requirements specification language, formal language, source language, algorithmic language, high order language, unstratified language, programming language, nonprocedural language, procedural language, program design language, fifth-generation language, fifth generation language, logic programming language, second generation language, machine language, design language, application-oriented language, third generation language, authoring language, fourth generation language, query language, list processing language, fourth-generation language, natural language, specification language, algorithmic list processing language
modular: modular decomposition, modular programming
fault: program-sensitive fault, fault secure, data-sensitive fault, fault masking, pattern-sensitive fault, fault tolerance
correctness: proof of correctness, partial correctness, total correctness
job: job control language, job step, job stream
compatible: upward compatible, downward compatible
life cycle: system life cycle, software life cycle
of accounts: code of accounts, chart of accounts
test case: test case specification, test case generator
software: support software, system software, software repository, application software, software development library
origin: assembled origin, loaded origin
identification: allocated configuration identification
point: restart point, entry point, reentry point, rescue point
development cycle: system life cycle software development cycle, system development cycle, software development cycle
float: free float, total float
period: wearout-failure period, burn-in period, early-failure period, constant-failure period
loader: absolute loader, relocating loader, relative loader, linking loader
state class: independent state class, dependent state class
requirements specification: software requirements specification, system requirements specification
quality: quality factor, quality control, quality attribute, quality assurance
seeding: bug seeding, error seeding
management: source control management, change management, software configuration management, software release management, configuration management
compression: downward compression, upward compression, lateral compression
engineering change: engineering change proposal
acceptance: acceptance test, acceptance testing
system: online documentation system, help system
submit: termination submit, invocation submit
class: collection-valued class, mutable class, immutable class, value class, state class, scalar-valued class
flow diagram: control flow diagram, data flow diagram
call: call tree, call graph
configuration item: software configuration item, hardware configuration item, computer software configuration item
maintenance: perfective maintenance, adaptive maintenance, software maintenance, corrective maintenance
criteria: exit criteria, acceptance criteria, entry criteria, test criteria, pass-fail criteria, pass-fail criteria
scope: project scope, product scope
type: composite type, enumeration type, primitive type, real type, integer type, character type, atomic type, logical type
editor: text editor
box: white box, black box, glass box
diversity: software diversity
statement: assignment statement, control statement
relationship: nonintrinsic relationship, logical relationship, nonidentifying relationship , precedence relationship, nonidentifying relationship, intrinsic relationship, identifying relationship
requirements review: system requirements review, software requirements review
validity: link validity, validity summary
chief programmer: chief programmer team
link: incoming link, outgoing link, content link, trace link
module: object module, load module
code generator: source code generator
data flow: data flow graph, data flow diagram
cardinality: outer cardinality, inner cardinality, cardinality constraint
effort: apportioned effort, discrete effort
design language: hardware design language, program design language
jump: conditional jump, unconditional jump
exception: addressing exception, data exception, operation exception, protection exception, underflow exception, overflow exception
subroutine: open subroutine, direct insert subroutine, closed subroutine
limits: specification limits, control limits
cluster: incomplete cluster, total cluster, partial cluster
characteristic: data characteristic, software characteristic
and validation: verification and validation, independent verification and validation
instruction: multiaddress four-two-address address instruction, single-address instruction, four-address instruction, three-address instruction, n-address instruction, single-operand instruction, n-plus-one address instruction, zero-address instruction, one-address instruction, two-address instruction, n-plus-one address instruction, absolute instruction, instruction cycle, indirect instruction, effective instruction, instruction format, direct instruction, instruction time, instruction length, double-operand instruction, multiaddress instruction, multiple-address instruction, immediate effective instruction, immediate instruction, n-address instruction
tree: specification tree, documentation tree
value: quality factor value, metric value
paging: anticipatory paging, demand paging
calendar: resource calendar, project calendar
error: semantic error, soft error, indigenous error, syntactic error, error seeding, syntax error, error model, static error, fatal error, dynamic error, error prediction, transient error
property: single-valued property, scalar-valued property, collection-valued property, multi-valued property
loop: loop control, loop assertion, loop body, loop invariant
control: version control, change control, configuration control, interface control
critical path: critical path methodology
addressing: one-ahead addressing, repetitive addressing
documentation: on-screen documentation, printed documentation, embedded documentation, separate documentation
constant: variable figurative constant, figurative constant
stream: job stream, run stream
process: capable process, stable process, standard process, statistically managed process, performed process, managed process
attribute: quality attribute
metric: quality metric, software quality metric
binding: dynamic binding, static binding
argument: output argument, input argument
fail: fail safe, fail soft
engineering: systems engineering, reverse engineering, hardware engineering, software engineering, inverse engineering
generation language: fourth generation language, fifth generation language
nonidentifying relationship: optional nonidentifying relationship nonidentifying relationship , optional nonidentifying relationship, mandatory nonidentifying relationship
file: XML data configuration file, XDC file, external interface file, internal logical file
global configuration: global configuration management
operation: housekeeping operation, overhead operation, operation field, single-step operation, step-by-step operation, operation part
absolute: absolute code, absolute assembler, absolute instruction, absolute loader, absolute address
Database Connectivity: Open Database Connectivity, Java Database Connectivity
selective construct: monadic selective construct, dyadic selective construct
redundancy: standby redundancy, active redundancy, homogeneous redundancy
baseline: functional baseline, product baseline, allocated baseline
recursion: simultaneous recursion
storage: virtual storage, real storage, multilevel storage
machine: host machine, target machine
field: operation field, address field, operator field
test: test case specification, test description, test item transmittal report, test script, test plan, test report, test log, test procedure, test incident report, test summary report, test harness, test driver
ancestor: generic ancestor, reflexive ancestor
parameter: adaptation parameter
resource allocation: computer resource allocation, dynamic resource allocation
development: incremental development, software development plan
product: product line, product configuration identification, product family, product baseline
abstraction: data abstraction
trace: control flow trace, data trace, symbolic trace, logical trace, code trace, subroutine trace, selective trace, call trace, execution trace, retrospective trace, data flow trace, variable trace
object: object module, object program, object code
Identity Management: Simple Cloud Identity Management, System for Cross-domain Identity Management
chart: input-process-output chart, hierarchy chart, structure chart, bubble chart
allocation: computer resource allocation, contiguous allocation, storage allocation, dynamic resource allocation, dynamic allocation
subroutine trace:
plan: project plan, development plan
breakpoint: code breakpoint, static breakpoint, control breakpoint, dynamic breakpoint, prolog breakpoint, postamble breakpoint, programmable breakpoint, storage breakpoint, preamble breakpoint, data breakpoint, epilog breakpoint
variable: global variable, control variable, loop-control variable, local variable
control language: job control language
data: local data, global data
lifecycle: lifecycle application, lifecycle tool
cycle: system life cycle, system development cycle, software development cycle, software life cycle, development life cycle
audit: physical configuration audit, functional configuration audit
cause: special cause, common cause
coupling: content coupling, pathological coupling, common-environment coupling, common-environment coupling, control coupling, common coupling, hybrid coupling, input-output coupling, data coupling, common-environment content coupling
failure: hard failure, soft failure
counter: instruction counter, program counter
mask: interrupt mask
pseudo: pseudo instruction, pseudo operation
analysis: dynamic analysis, transaction analysis, static analysis demonstration, static analysis, transform analysis, transformation analysis
cohesion: procedural cohesion, temporal cohesion, functional cohesion, sequential cohesion, communicational cohesion, coincidental cohesion, coincidental communicational cohesion, logical cohesion
responsibility: class-level responsibility, instance-level responsibility
workspace: repository workspace
time: turnaround time, mean time to repair, setup time, port-to-port time, think time, run time, set-up time, execution time, mean time between failures, overhead time, busy time, down time, running time, response time, idle time, standby time, up time
entry: remote job entry, remote batch entry
model: error prediction model, static model, system model, dynamic model, workload model, waterfall model, error model, spiral model
review: design review, requirements review, software specification review, formal qualification review, test readiness review, software requirements review, code review
test procedure: test procedure specification
