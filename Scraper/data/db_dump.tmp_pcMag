{"1": {"flowcharter": "[]", "personal computer": "[]", "go to": "[{\"term\": \"genchi genbutsu\", \"definition\": \"A Japanese phrase (\\u73fe\\u5730\\u73fe\\u7269) that is frequently translated as:\\u00a0\\\"go and see for yourself.\\\" Genchi Genbutsu is a\\u00a0key principle of the Toyota Production System. According to Jeff Liker, author of The Toyota Way, it suggests that you\\u00a0cannot be sure you really understand any part of a business problem unless you go\\u00a0to the genba (the 'real place' - where work is done)\\u00a0and see for yourself firsthand. It is unacceptable to take anything for granted or to rely on the reports of others. See also genba.\"}]", "committer": "[]", "call by address": "[]", "input-process-output chart": "[]", "business epic kanban": "[]", "baseline staging stream": "[]", "input loopback": "[]", "product support": "[]", "absolute": "[{\"term\": \"relative size measure\", \"definition\": \"A means of expressing the overall size of an item where the\\u00a0absolute value is not considered, but the relative size of an item compared to other\\u00a0items is considered. For example, an item of size 2 is half the size of an item of size 4,\\u00a0but we have no idea how big an item of size 2 or 4 is in some absolute sense. See also\\u00a0ideal day, story point.\"}]", "printed documentation": "[]", "input sort": "[]", "system safety": "[]", "project schedule network diagram": "[]", "process profile": "[]", "diagram page": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "proposal": "[]", "developmental configuration": "[]", "optional": "[]", "picture": "[{\"term\": \"portfolio planning\", \"definition\": \"An activity for determining which products (or projects) to work\\u00a0on, in which order, and for how long. Sometimes referred to as portfolio management. Want to see a picture?\"}]", "plan-driven process": "[{\"term\": \"plan-driven process\", \"definition\": \"A style of development that attempts to plan for and anticipate\\u00a0up front all of the features a user might want in the end product and to determine\\u00a0how best to build those features. The work plan is based on execution of a sequential\\u00a0set of work-specific phases. Synonymous with anticipatory process, predictive process,\\u00a0prescriptive process, sequential process, traditional development process, waterfall\\u00a0process.\"}]", "demodularization": "[]", "specification by example": "[{\"term\": \"specification by example\", \"definition\": \"See acceptance-test-driven development.\"}]", "project human resource management": "[]", "cost performance baseline": "[]", "hybrid coupling": "[]", "branch": "[]", "signpost": "[]", "measurement procedure": "[]", "bug seeding": "[]", "implementation phase": "[]", "structured program": "[]", "path condition": "[]", "disorder domain": "[{\"term\": \"disorder domain\", \"definition\": \"A dangerous state where we really don\\u2019t understand or can\\u2019t make\\u00a0sense of the situation we are in. Our goal is to get out of this domain. 2. One of the\\u00a0domains in the Cynefin framework. See also Cynefin. Contrast with chaotic domain,\\u00a0complex domain, complicated domain, simple domain.\"}]", "local data": "[]", "reactivation": "[]", "test case specification": "[]", "unit": "[{\"term\": \"ideal day\", \"definition\": \"A unit for estimating the size of product backlog items based on how long\\u00a0an item would take to complete if it were the only work being performed, there were\\u00a0no interruptions, and all resources necessary to complete the work were immediately\\u00a0available. See also ideal hour. Contrast with story point.\"}]", "star schema": "[{\"term\": \"relative size measure\", \"definition\": \"A means of expressing the overall size of an item where the\\u00a0absolute value is not considered, but the relative size of an item compared to other\\u00a0items is considered. For example, an item of size 2 is half the size of an item of size 4,\\u00a0but we have no idea how big an item of size 2 or 4 is in some absolute sense. See also\\u00a0ideal day, story point.\"}]", "software product developer": "[]", "subject system": "[]", "critical path": "[{\"term\": \"ceremony\", \"definition\": \"A ritualistic or symbolic activity that is performed on well-defined occasions.\\u00a0Some people refer to the core Scrum activities of sprint planning, daily scrum,\\u00a0sprint review, and sprint retrospective as ceremonies. See also activity, unnecessary\\u00a0formality.\"}]", "word": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "commitment": "[{\"term\": \"commitment\", \"definition\": \"The act of binding oneself to a course of action. Scrum encourages\\u00a0commitment. Commitment means that during both good times and bad, each team\\u00a0member is dedicated to meeting the team\\u2019s collective goal. Contrast with forecast.\"}]", "application function point count": "[]", "node letter": "[]", "efferent": "[]", "single-operand instruction": "[]", "user roles": "[{\"term\": \"user role\", \"definition\": \"1. The name for a class of product users. 2. One of the key elements of a\\u00a0user story that defines the recipient of the value delivered by a user story. See also user story.\"}]", "evaluation report": "[]", "root cause": "[]", "solution": "[{\"term\": \"solution\", \"definition\": \"A product or a service that results from a development effort.\"}]", "community object": "[]", "optimizing process": "[]", "data communication": "[]", "risk avoidance": "[]", "beta testing": "[]", "sprint planning meeting": "[{\"term\": \"sprint retrospective\", \"definition\": \"An inspect-and-adapt activity performed at the end of every\\u00a0sprint. The sprint retrospective is a continuous improvement opportunity for a\\u00a0Scrum team to review its process (approaches to performing Scrum) and to identify\\u00a0opportunities to improve it. See also inspect and adapt.\"}]", "widow": "[]", "loosely coupled message communication": "[]", "swarming": "[{\"term\": \"swarming\", \"definition\": \"A behavior whereby team members with available capacity and appropriate\\u00a0skills collectively work (swarm) on an item to finish what has already been started\\u00a0before moving ahead to begin work on new items. See also T-shaped skills.\"}]", "pre-tested iteration": "[]", "package": "[{\"term\": \"regression testing\", \"definition\": \"A type of\\u00a0software testing\\u00a0that verifies that previously developed and tested software still performs correctly even after the software itself was changed or after other software in the same package or configuration has been changed. Basically, testing to determine that previously working software is still working in the presence\\u00a0of recently made changes (e.g., new features added, defects repaired, or code refactoring).\"}]", "entity attribute": "[]", "allocation": "[]", "kanban": "[{\"term\": \"Kanban\", \"definition\": \"An agile approach overlaid on an existing process that advocates visualizing\\u00a0how work flows through a system, limiting the work in process, and measuring and\\u00a0optimizing the flow of work. See also agile, work in process.\"}]", "glossary page": "[]", "common cause": "[]", "exploratory testing": "[]", "close procurements": "[]", "engineering interface reference management policy": "[]", "product planning": "[{\"term\": \"product planning\", \"definition\": \"See envisioning.\"}]", "indirect address": "[]", "project management software": "[]", "complex adaptive system": "[{\"term\": \"complex adaptive system\", \"definition\": \"A system with many entities interacting with each other in\\u00a0various ways, where these interactions are governed by simple, localized rules operating\\u00a0in a context of constant feedback. Examples include the stock market, the brain,\\u00a0ant colonies, and Scrum teams.\"}]", "task": "[{\"term\": \"task\", \"definition\": \"The technical work that a development team performs in order to complete a\\u00a0product backlog item. Most tasks are defined to be small, representing no more than\\u00a0a few hours to a day or so of work.\"}]", "back link": "[]", "fourth-generation language": "[]", "identity": "[]", "data structure": "[]", "tinderbox": "[]", "contractual requirement": "[]", "synchronous request": "[]", "happened-upon technical debt": "[{\"term\": \"happened-upon technical debt\", \"definition\": \"A status category for technical debt that represents\\u00a0debt that the development team was unaware existed until it was exposed during the\\u00a0normal course of performing work on the product. Contrast with known technical\\u00a0debt, targeted technical debt. See also technical debt.\"}]", "repetitive addressing": "[]", "substitutability": "[]", "traceability": "[]", "alternate flow": "[]", "scrum team": "[{\"term\": \"Scrum team\", \"definition\": \"A team composed of a product owner, ScrumMaster, and development\\u00a0team that works on a Scrum development effort. See also development team, product\\u00a0owner, ScrumMaster.\"}]", "defect aging": "[]", "extract": "[]", "cost-reimbursable contract": "[]", "diagnostic manual": "[]", "cadence": "[{\"term\": \"cadence\", \"definition\": \"A regular, predictable rhythm or heartbeat. Sprints of consistent duration establish a cadence for a development effort. See also synchronization.\"}]", "report": "[{\"term\": \"cost accounting\", \"definition\": \"1. Determining the costs of products, processes, projects to report the correct amounts on the\\u00a0financial statements. 2. A specific example would be determining\\u00a0if a cost should be treated as a capital expediture or an operational expense. See also captial expenditure, operational expense.\"}]", "writing reference": "[]", "address instruction": "[]", "shared resources": "[]", "technical performance measurement": "[{\"term\": \"innovation accounting\", \"definition\": \"Innovation accounting is a measurement/accounting system that uses actionable metrics\\u00a0to evaluate how fast we are learning as a critical measure of progress toward converging\\u00a0on a business-valuable result (Ries 2011).\"}]", "modularity": "[]", "verification": "[]", "baseline document": "[]", "menu by-pass": "[]", "parallel": "[]", "decision criteria": "[{\"term\": \"economic filter\", \"definition\": \"The decision criteria used by an organization to evaluate the economics\\u00a0of a proposed product in order to decide whether or not to fund it. Contrast\\u00a0with strategic filter.\"}]", "keyword driven testing": "[]", "sequential construct": "[]", "privileged state": "[]", "vertical slice": "[]", "bidirectional traceability": "[]", "peer review": "[]", "persistent storage": "[]", "process capability level rating": "[]", "finish-to-start": "[]", "closed loop": "[]", "institutionalization": "[]", "anticipatory paging": "[]", "product scope description": "[]", "storage device": "[]", "realization": "[]", "insight backlog": "[{\"term\": \"insight backlog\", \"definition\": \"A prioritized list of previously generated insights or process improvement\\u00a0ideas that have not yet been acted upon. The insight backlog is generated and\\u00a0used during sprint retrospectives. See also sprint retrospective.\"}]", "analog computer": "[]", "evaluation checklist": "[]", "infant mortality": "[]", "stand up": "[{\"term\": \"daily stand-up\", \"definition\": \"A common approach to performing a daily scrum whereby the participants\\u00a0stand for the entirety of the activity. Standing up promotes brevity and helps\\u00a0ensure that the activity does not exceed its timebox. See daily scrum.\"}]", "zComponent project": "[]", "idle work": "[{\"term\": \"idle work\", \"definition\": \"Work that is not actively being pursued as it sits in some queue. Contrast\\u00a0with idle workers.\"}]", "functional specification": "[]", "event timeline": "[{\"term\": \"event timeline\", \"definition\": \"A visual, chronologically ordered depiction of the meaningful events\\u00a0that occurred over a period of time. A common technique used during sprint retrospectives.\\u00a0See also sprint retrospective.\"}]", "multi-valued property": "[{\"term\": \"antifragility\", \"definition\": \"Having the property of being antifragile. See also antifragile.\"}]", "contract work breakdown structure": "[]", "interface control": "[{\"term\": \"principle of least astonishment\", \"definition\": \"Acting or developing work products in a way that is\\u00a0least likely to startle those around you. For example,\\u00a0if you develop a user interface and a customer using the product says \\\"Well, I would never have guessed that doing that was the correct thing to do!\\\" then you likely have failed the principle of least astonishment.\"}]", "computer software component": "[]", "syntax error": "[]", "commit war": "[]", "process owner": "[]", "operating system": "[]", "backlog refinement": "[{\"term\": \"product backlog refinement\", \"definition\": \"Product backlog refinement refers to\\u00a0the activities of writing and refining, estimating, and\\u00a0prioritizing product backlog items. Synonymous with\\u00a0product backlog grooming.\"}]", "behavior specification": "[]", "chart": "[{\"term\": \"burnup chart\", \"definition\": \"A graph that shows the progress of work toward a goal line associated\\u00a0with a value on the vertical axis. As work is completed over time (the horizontal axis),\\u00a0the progress line moves up (burns up) to be nearer to the goal line. We can show projected\\u00a0outcomes on burnup charts by calculating a trend line to see when work might\\u00a0be completed. Contrast with burndown chart.\"}]", "inputprocess-output chart": "[]", "cost-plus-incentive-fee contract": "[]", "standard": "[]", "objective": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "technical practices": "[{\"term\": \"technical practices\", \"definition\": \"The specific practices or techniques that are used during sprint\\u00a0execution to properly perform the work required to deliver features that have manageable\\u00a0levels of technical debt and meet the Scrum team\\u2019s definition of done.\"}]", "software requirements engineering": "[]", "level of effort": "[]", "indirect instruction": "[]", "capsule": "[]", "seeding": "[]", "test objective": "[]", "management review": "[]", "respecialize": "[]", "process capability determination sponsor": "[]", "iteration retrospective": "[]", "assembled origin": "[]", "binary digit": "[]", "spreadsheet program": "[]", "efficiency": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "embedded documentation": "[]", "process measures": "[]", "story splitting": "[]", "property": "[{\"term\": \"self-organization\", \"definition\": \"1. A bottom-up emergent property of a complex adaptive system\\u00a0whereby the organization of the system emerges over time as a response to its environment.\\u00a02. A property of a development team that organizes itself over time, without\\u00a0an external dominating force applying traditional top-down, command-and-control\\u00a0management. 3. Reflects the management philosophy whereby operational decisions\\u00a0are delegated as much as possible to those who have the most detailed knowledge of\\u00a0the consequences and practicalities associated with those decisions. See also complex\\u00a0adaptive system, emergence.\"}]", "disk": "[]", "perform qualitative analysis": "[]", "collection-valued property": "[]", "data source": "[]", "product configuration identification functional baseline": "[]", "source statements": "[]", "non-intrinsic relationship": "[]", "punch list": "[]", "expected result": "[]", "hard failure": "[]", "test class": "[{\"term\": \"test-first development\", \"definition\": \"A technical practice where the tests are written before the\\u00a0development is performed. An example is test-driven development. See also technical\\u00a0practices, test-driven development.\"}]", "addressing": "[]", "soft error": "[]", "independent state class": "[]", "role name": "[]", "auto-deploy": "[]", "topology": "[]", "traditional development process": "[{\"term\": \"traditional development process\", \"definition\": \"See plan-driven process.\"}]", "dynamic breakpoint": "[]", "key-style view": "[]", "interrupt priority": "[]", "link": "[]", "code smell": "[]", "security branch": "[]", "mechanism": "[]", "multilevel storage": "[]", "xenodochial": "[]", "project life cycle": "[]", "process attribute": "[]", "story points": "[{\"term\": \"story point\", \"definition\": \"A measure of the relative size of product backlog items that takes into\\u00a0account factors such as complexity and physical size. Typically determined by engaging\\u00a0in Planning Poker. See also ideal day, Planning Poker, relative size measure.\"}]", "single-hit decision table": "[]", "decoupling": "[]", "ground term": "[{\"term\": \"Boy Scout rule\", \"definition\": \"1. Always leave the campground cleaner than you found it. If you\\u00a0find a mess on the ground, clean it up regardless of who might have made the mess.\\u00a02. Every time you are in an area of the code doing work, always leave the code a little\\u00a0cleaner, not a little messier, than you found it. See also technical debt.\"}]", "discrete data": "[]", "immediate data": "[]", "networking": "[]", "capital expenditure": "[{\"term\": \"capital expenditure (CapEx)\", \"definition\": \"1. Funds used by a company to acquire or upgrade\\u00a0physical assets\\u00a0such as property, industrial buildings or equipment. It is often used to undertake new projects or investments by the firm.\\u00a0This type of outlay is also made by companies to maintain or increase the\\u00a0scope\\u00a0of their operations (investorpedia). 2. Capitalizing an expense means you don't offset your revenue against the expense in the\\u00a0year you purchased or built it. Instead you list the purchase as an asset on your balance sheet and then each year (through depreciation) you offset revenue on your income statement against that year\\u2019s depreciated amount. Contrast with operational expense.\"}]", "scrum master": "[{\"term\": \"ScrumMaster\", \"definition\": \"The coach, facilitator, impediment remover, and servant leader of\\u00a0the Scrum team. The ScrumMaster is one of the three roles on a Scrum team. The\\u00a0ScrumMaster provides process leadership and helps the Scrum team and the rest of\\u00a0the organization develop their own high-performance, organization-specific Scrum\\u00a0approach. See also Scrum team, product owner, development team,\\u00a0servant leader.\"}]", "and validation": "[]", "idle time": "[]", "configuration management system": "[]", "proof of correctness": "[]", "numeric": "[]", "functional performance requirement": "[]", "fail-safe": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "repair": "[]", "window": "[]", "data processing": "[]", "release train": "[{\"term\": \"release train\", \"definition\": \"1. An approach to aligning the vision, planning, and interdependencies of\\u00a0many teams by providing cross-team synchronization based on a common cadence.\\u00a0A release train focuses on fast, flexible flow at the level of a larger product. 2. In the Scaled Agile Framework (SAFe), an Agile Release Train is a long-lived, self-organizing collection of agile teams that plans, commits, and executes together. Agile release trains are organized around the enterprise\\u2019s significant value streams (source, Scaled Agile Framework).\\u00a0See also\\u00a0scrum of scrums.\"}]", "structured programming language": "[]", "control flow diagram": "[{\"term\": \"defined process\", \"definition\": \"A process with a well-defined set of steps. Given the same inputs, a\\u00a0defined process should produce the same output every time (within a defined variance\\u00a0range). Contrast with empirical process control.\"}]", "coupling": "[]", "request": "[{\"term\": \"incremental funding\", \"definition\": \"Funding some of the product development without committing\\u00a0to funding all of it. Using incremental funding, we fund just the first small part\\u00a0of the development effort and revisit the funding decision after we have the critical\\u00a0validated learning we are paying to get from the first part. See also\\u00a0confidence threshold,\\u00a0validated learning.\"}]", "concurrent task architecture": "[]", "load-and-go": "[]", "specific symbol": "[]", "evaluation technology": "[]", "common-environment coupling": "[]", "function field": "[{\"term\": \"integration\", \"definition\": \"The combining of the various components or assets of some or all of a\\u00a0product to form a coherent, larger-scope work product that can be validated to function\\u00a0correctly as a whole. See also continuous integration.\"}]", "unit testing": "[]", "deadlock": "[]", "software requirements review": "[{\"term\": \"release plan\", \"definition\": \"1. The output of release planning. On a fixed-date release, the release\\u00a0plan will specify the range of features available on the fixed future date. On a fixed scope\\u00a0release, the release plan will specify the range of sprints and costs required to\\u00a0deliver the fixed scope. 2. A plan that communicates, to the level of accuracy that is\\u00a0reasonably possible, when the release will be available, what features will be in the\\u00a0release, and how much will it cost. See also fixed-date release, fixed-scope release.\"}]", "relation": "[]", "data function": "[]", "organization": "[{\"term\": \"internal stakeholders\", \"definition\": \"Stakeholders who are internal to the organization that is developing\\u00a0the product, for example, senior executives, managers, and internal users. See\\u00a0also stakeholders. Contrast with external stakeholders.\"}]", "note": "[{\"term\": \"genba\", \"definition\": \"A Japanese term (\\u73fe\\u5834) meaning \\u201cthe real place,\\u201d or more practically, the place where value is created. When practicing genchi genbutsu (\\\"go and see for yourself\\\") the genba is the place you go because it is there that the real work is performed and you can get a firsthand, accurate account of what is really going on. Note: \\\"genba\\\" is sometimes written in English as \\\"gemba.\\\" See also\\u00a0genchi genbutsu.\"}]", "execution monitor": "[]", "basic symbol": "[]", "conduct procurements": "[]", "functional functional specification": "[]", "instruction repertoire": "[]", "call by location": "[]", "whitespace": "[]", "stage": "[{\"term\": \"cost accounting\", \"definition\": \"1. Determining the costs of products, processes, projects to report the correct amounts on the\\u00a0financial statements. 2. A specific example would be determining\\u00a0if a cost should be treated as a capital expediture or an operational expense. See also captial expenditure, operational expense.\"}]", "patch": "[]", "assessment output": "[]", "principle": "[{\"term\": \"principle\", \"definition\": \"A fundamental truth or belief that serves as the foundation for how we approach product development. An example Scrum principle is to demonstrate progress frequently. See also practice, values.\"}]", "lifecycle profits": "[{\"term\": \"lifecycle profits\", \"definition\": \"1. The total profit potential for a product over its lifetime. 2. In the\\u00a0case of portfolio planning, the total profit potential of the entire portfolio rather than\\u00a0a single product.\"}]", "measurement experience base": "[]", "software life cycle process": "[]", "target machine": "[]", "organizational breakdown structure": "[]", "operations": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "table heading": "[]", "mandatory subgroup": "[]", "conciseness": "[]", "program definition language": "[]", "system of interest": "[]", "documentation tree": "[{\"term\": \"sprint mapping\", \"definition\": \"sprint mapping. An activity to tentatively slot or map appropriately detailed, estimated, and priortized product backlog items into specific future sprints. One simple approach is to approximate\\u00a0a set of product\\u00a0backlog items for each of the next several sprints by grouping together into a sprint items whose aggregate size roughly\\u00a0equals the team\\u2019s average velocity. Synonymous with PBI slotting.\"}]", "remote terminal emulator": "[]", "objective evidence": "[]", "afferent": "[]", "backward execution": "[{\"term\": \"sprint execution\", \"definition\": \"The period of time during which the task-level work is performed by the development team to complete the features committed to during sprint planning. See also sprint planning.\"}]", "unit requirements documentation": "[]", "job control language": "[]", "software engineering environment": "[]", "online compiler": "[]", "overflow exception": "[]", "data coupling": "[]", "computing system tool": "[]", "synchronous": "[]", "reserve analysis": "[]", "idle standby": "[]", "operation": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "ordinal scale": "[]", "process assessment model": "[]", "high-level net": "[]", "electronic data interchange": "[]", "vanity metric": "[]", "partitioning": "[]", "fault tolerance": "[]", "back-up": "[]", "immutable class": "[]", "pseudo": "[]", "unavoidable technical debt": "[{\"term\": \"unavoidable technical debt\", \"definition\": \"A form of technical debt that is usually unpredictable\\u00a0and unpreventable and accrues through no fault of the team building the product.\\u00a0Contrast with naive technical debt, strategic technical debt. See also technical debt.\"}]", "minimap": "[]", "software development plan": "[]", "software specification review": "[]", "configuration specification": "[]", "return code": "[{\"term\": \"marginal economics\", \"definition\": \"Determining if spending the next chunk of money is justified by the return that investment would generate. When applying margin economics, we consider\\u00a0all work that has been performed on the product up\\u00a0to the decision point as a \\u201csunk cost\\u201d\\u00a0and therefore don't consider the sunk cost when determining whether to spend the next chunk of money. See portfolio planning.\"}]", "forecast": "[{\"term\": \"forecast\", \"definition\": \"1. Making statements, predictions, or estimations about events whose actual\\u00a0outcomes have not yet been observed. 2. The 2011 \\u201cScrum Guide\\u201d term for what a\\u00a0development team generates during sprint planning. See also estimation. Contrast\\u00a0with commitment.\"}]", "exit": "[{\"term\": \"acceptance criteria\", \"definition\": \"1. The external quality characteristics specified by the product owner from a business or stakeholder perspective. Acceptance criteria define desired behavior and are used to determine whether a product backlog item has been successfully developed. 2. The exit criteria that a component or a system must satisfy in order to be accepted by a user, customer, or other authorized entity (IEEE 610).\"}]", "risk identification": "[]", "cargo cult": "[{\"term\": \"cargo cult\", \"definition\": \"A name drawn from the phenomenon of certain South Sea islanders who believed that by building mockups of airplanes and constructing runways that they could bring back the planes and all the wealth that accompanied them during World War II, when advance U.S. bases in the Pacific used the islands as staging areas. So,\\u00a0by reconstructing or simulating the artifacts of a situation, they could effect its occurrence. The goal is to avoid cargo-cult adoption of agile (going through the motions without understanding why).\\u00a0Issues with cargo cults include:\"}]", "key migration": "[]", "concept of operations document": "[]", "specification limits": "[]", "style": "[{\"term\": \"plan-driven process\", \"definition\": \"A style of development that attempts to plan for and anticipate\\u00a0up front all of the features a user might want in the end product and to determine\\u00a0how best to build those features. The work plan is based on execution of a sequential\\u00a0set of work-specific phases. Synonymous with anticipatory process, predictive process,\\u00a0prescriptive process, sequential process, traditional development process, waterfall\\u00a0process.\"}]", "data flow diagram": "[]", "system of systems": "[]", "counter": "[{\"term\": \"WIP\", \"definition\": \"See work in process.\"}]", "identifying relationship": "[]", "indexed address": "[]", "engineering change proposal": "[]", "define scope": "[]", "boot": "[]", "risk register": "[]", "location reference": "[]", "requirement standard": "[]", "variable": "[{\"term\": \"transaction cost\", \"definition\": \"The fixed (overhead cost) and variable costs of executing (doing the work required to realize) the items in a batch of work. One of the two costs in determing the economic batch size in a U-curve optimization. In manufacturing, transaction cost is the cost of sending a batch to the next process.\\u00a0Contrast with holding cost. See also U-curve optimization.\"}]", "real time": "[]", "tightly coupled message communication without reply": "[]", "system breakdown structure": "[]", "mapping completeness": "[]", "metadata model": "[]", "file": "[]", "professional standard": "[]", "team release plan": "[]", "x interceptor": "[]", "scrum framework": "[{\"term\": \"Scrum framework\", \"definition\": \"A collection of values, principles, practices, and rules that form\\u00a0the foundation of Scrum-based development. See also Scrum.\"}]", "process capability": "[]", "item transmittal report": "[]", "story mapping": "[{\"term\": \"story mapping\", \"definition\": \"1. A technique that takes a user-centric perspective for generating a\\u00a0set of user stories. Each high-level user activity is decomposed into a workflow that\\u00a0can be further decomposed into a set of detailed tasks. 2. A two-dimensional representation\\u00a0of a traditional one-dimensional product backlog list. See also product\\u00a0backlog, user story.\"}]", "pass-fail criteria": "[]", "influencer": "[]", "clear text file encoding": "[]", "user-friendly": "[]", "software project life cycle process": "[]", "percent complete": "[]", "master schedule": "[]", "project resource constraint": "[]", "done checklist": "[]", "total cluster": "[]", "Apache Ant": "[]", "data type": "[]", "component standard": "[]", "terminal": "[]", "tunneling": "[]", "procurement documents": "[]", "licensing standard": "[]", "postprocessor": "[]", "software acquisition process": "[]", "stakeholders": "[{\"term\": \"stakeholder\", \"definition\": \"A person, group, or organization that affects or can be affected by an\\u00a0organization\\u2019s actions. See also external stakeholders, internal stakeholders.\"}]", "chart of accounts": "[]", "higher-level management": "[]", "program": "[{\"term\": \"program increment\", \"definition\": \"Largest plan-do-check-adjust (PDCA) learning cycle in the Scaled Agile Framework (SAFe).\\u00a0A program increment (aka PI)\\u00a0is\\u00a0a cadence-based interval for building and validating a full system increment, demonstrating value, and getting fast feedback. Each program increment synchronizes the work of\\u00a0multiple teams working across multiple iterations (sprints) to\\u00a0facilitate planning, limit WIP, provide for aggregation of newsworthy value for feedback, assure consistent program-level retrospectives.\\u00a0(adapted from the\\u00a0ScaledAgile website).\"}]", "monitoring and controlling processes": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "many-to-many relationship": "[]", "deep": "[{\"term\": \"DEEP\", \"definition\": \"An acronym coined by Roman Pichler and Mike Cohn for remembering a set\\u00a0of criteria used to evaluate the quality of a product backlog. The criteria are Detailed\\u00a0appropriately, Emergent, Estimated, and Prioritized. See also product backlog.\"}]", "recursive": "[]", "single sign-on": "[]", "claim": "[]", "instructional mode": "[]", "subtype": "[]", "test case execution record": "[]", "test summary report": "[]", "discrimination": "[]", "disassemble": "[]", "change and configuration management": "[]", "design architecture": "[]", "dumb terminal": "[]", "facilitation": "[{\"term\": \"silent grouping\", \"definition\": \"A facilitation technique for getting people to group related items\\u00a0without talking, relying only on the individual placement and movement of items\\u00a0(typically cards or sticky notes) as a means of communicating and coordinating\\u00a0among the participants. A technique frequently used during the sprint retrospective\\u00a0activity. See also sprint retrospective.\"}]", "domain engineering": "[{\"term\": \"complex domain\", \"definition\": \"1. A situation in which things are more unpredictable than they\\u00a0are predictable. If there is a right answer, we will know it only with hindsight. 2. One\\u00a0of the domains in the Cynefin framework. See also Cynefin. Contrast with chaotic\\u00a0domain, complicated domain, disorder domain, simple domain.\"}]", "defined process": "[{\"term\": \"defined process\", \"definition\": \"A process with a well-defined set of steps. Given the same inputs, a\\u00a0defined process should produce the same output every time (within a defined variance\\u00a0range). Contrast with empirical process control.\"}]", "project portfolio": "[]", "replication transparency": "[]", "system requirements review": "[]", "existing software": "[]", "measurement standard": "[]", "interruption": "[]", "script": "[{\"term\": \"sprint execution\", \"definition\": \"The period of time during which the task-level work is performed by the development team to complete the features committed to during sprint planning. See also sprint planning.\"}]", "response time": "[]", "requirements derivation": "[]", "low level language": "[]", "state name": "[]", "high-level language": "[{\"term\": \"tacit knowledge\", \"definition\": \"Unwritten and unspoken knowledge (including insights, intuitions,\\u00a0and hunches) that is hard, but not impossible, to articulate with formal language.\\u00a0The opposite of explicit or formal knowledge. Sometimes referred to as \\u201cknow-how.\\u201d\"}]", "instrumentation": "[]", "pager": "[]", "conditional jump": "[]", "first generation fifth generation language": "[]", "relocation transparency": "[]", "adaptability": "[]", "transportability": "[]", "well-engineered web site": "[]", "maintenance project": "[]", "gap": "[]", "reparent": "[]", "code inspection": "[]", "flow target": "[]", "retirement": "[]", "projectized organization": "[]", "critical section": "[]", "pattern-sensitive fault": "[]", "test report": "[]", "product": "[{\"term\": \"product\", \"definition\": \"1. The result of a product development effort. 2. A good or service consisting\\u00a0of a bundle of tangible and intangible attributes that satisfies consumers and is\\u00a0received in exchange for money or some other unit of value. 3. Typically a longerlived,\\u00a0more stable artifact against which organizations might conduct one or more\\u00a0projects. See also product development effort. Contrast with project.\"}]", "maintenance manual": "[]", "moscow": "[]", "point design": "[]", "intermediate software product needs": "[]", "bootstrap loader": "[]", "data-structure-oriented design": "[]", "user role": "[{\"term\": \"user role\", \"definition\": \"1. The name for a class of product users. 2. One of the key elements of a\\u00a0user story that defines the recipient of the value delivered by a user story. See also user story.\"}]", "overlay supervisor": "[]", "argument": "[{\"term\": \"prioritized list\", \"definition\": \"A list or sequence of items to be attended to, arranged in order of their relative importance. The items in the product backlog are a prioritized list. See also product backlog.\"}]", "initialize": "[]", "requirements traceability matrix": "[]", "automated verification system": "[]", "deployment": "[{\"term\": \"continuous deployment\", \"definition\": \"A software development discipline where each new feature is deployed to users (customers)\\u00a0immediately after it is\\u00a0built, integrated, and tested. Continuous delivery and continuous deployment are often used synonymously. However, some\\u00a0people use continuous deployment as a term that means software changes that are actually put into production (for use by a customer), whereas continuous delivery means changes that are continuously ready to go into product but might not actually be deployed (for business reasons).\\u200b\\u00a0In order to do continuous deployment you must be doing continuous delivery.\\u00a0See also\\u00a0continuous delivery.\"}]", "text page": "[]", "process purpose": "[]", "pause": "[]", "task priority criteria": "[]", "framework": "[{\"term\": \"framework\", \"definition\": \"See Scrum framework.\"}]", "triggering event": "[]", "contract administration": "[]", "software design representation": "[]", "suspicion profile": "[]", "project charter": "[]", "digit numeric character": "[]", "feature teams": "[{\"term\": \"feature team\", \"definition\": \"A cross-functional and cross-component team that can pull end-customer\\u00a0features from the product backlog and complete them. See also cross-functional\\u00a0team. Contrast with component team.\"}]", "risk management": "[{\"term\": \"risk\", \"definition\": \"1. The likelihood that an event will be accompanied by undesirable consequences.\\u00a0Risk is measured by both the probability of the event and the seriousness of\\u00a0the consequences. 2. Any uncertainty that is expected to have a negative outcome for\\u00a0the activity. See also uncertainty.\"}]", "alias": "[]", "interface specification": "[]", "sequential clustering": "[]", "test": "[{\"term\": \"continuous delivery\", \"definition\": \"A software development discipline where software is built in such a way that it can be released to production at any time. Continuous delivery and continuous deployment are often used synonymously. However, some\\u00a0people use continuous deployment as a term that means software changes that are actually put into production (for use by a customer), whereas continuous delivery means changes that are continuously ready to go into product but might not actually be deployed (for business reasons).\\u00a0See also\\u00a0continuous deployment.\"}]", "production library": "[]", "data set definition": "[]", "computer-aided": "[]", "value": "[{\"term\": \"values\", \"definition\": \"1. Those things that we hold dear or precious. 2. The foundation of a shared\\u00a0operating agreement among members of a team. Core Scrum values include honesty,\\u00a0openness, courage, respect, focus, trust, empowerment, and collaboration.\"}]", "contiguous allocation": "[]", "dependent state class": "[]", "operation interface signature": "[]", "formal evaluation process": "[]", "superclass": "[]", "second-generation language": "[]", "ideal day": "[{\"term\": \"ideal day\", \"definition\": \"A unit for estimating the size of product backlog items based on how long\\u00a0an item would take to complete if it were the only work being performed, there were\\u00a0no interruptions, and all resources necessary to complete the work were immediately\\u00a0available. See also ideal hour. Contrast with story point.\"}]", "application system": "[]", "pseudo-op": "[]", "connectivity": "[]", "task behavior specification": "[]", "product specification": "[]", "system architect": "[]", "life cycle cost": "[]", "user terminal": "[]", "development project function point count": "[]", "emotions seismogram": "[{\"term\": \"emotions seismogram\", \"definition\": \"A graphical representation of the emotional ups and downs of team members over the course of a sprint. A technique frequently used during the sprint retrospective activity. See also sprint retrospective. Mistakenly synonmous with emotions seismograph.\"}]", "network chart": "[]", "microcomputer": "[]", "certified scrum trainer": "[{\"term\": \"Certified Scrum Trainer\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance.\\u00a0A difficult-to-obtain certification that enables people to teach Certified Scrum Master\\u00ae and Certified Scrum Product Owner\\u00ae courses. CSTs must demonstrate a deep knowledge and understanding of Scrum concepts, practices, and principles. To apply to be a CST, a candidate must hold an active Certified Scrum Professional\\u00ae designation from Scrum Alliance, have extensive hands-on experience implementing Scrum inside organizations as a ScrumMaster, product owner, or development team member, and have taught Scrum in a co-training partnership with a CST or independently in a non-certified context. Synonymous with CST. See also CSM, CSPO, CSP.\"}]", "functional organization": "[]", "assertion": "[]", "device interface task": "[]", "daily meeting": "[]", "incremental funding": "[{\"term\": \"incremental funding\", \"definition\": \"Funding some of the product development without committing\\u00a0to funding all of it. Using incremental funding, we fund just the first small part\\u00a0of the development effort and revisit the funding decision after we have the critical\\u00a0validated learning we are paying to get from the first part. See also\\u00a0confidence threshold,\\u00a0validated learning.\"}]", "semaphore": "[]", "technical requirements": "[{\"term\": \"technical stories\", \"definition\": \"A \\u201cuser\\u201d story (product backlog item) that delivers no perceived\\u00a0end-user value but does deliver important architecture or infrastructure needed to\\u00a0deliver future user value. See also user story.\"}]", "risk dimension": "[]", "discriminator": "[]", "instance data": "[]", "project scope": "[]", "open subroutine": "[]", "use case model": "[{\"term\": \"Extreme Programming (XP)\", \"definition\": \"1. A software development methodology that is intended to improve software quality and responsiveness to changing customer requirements (source Wikipedia). 2. An agile development approach that is complementary\\u00a0to Scrum. Extreme Programming specifies important technical practices that development\\u00a0teams use to manage the flow of task-level work during sprint execution. See\\u00a0also agile.\"}]", "tunnel notation": "[]", "playback": "[]", "abstraction": "[]", "subroutine": "[]", "service offer": "[]", "operator field": "[]", "final function point count": "[]", "nondelivered source statement": "[]", "software tool": "[]", "team room": "[]", "basic path": "[]", "checkpointing": "[]", "linker": "[]", "data driven testing": "[]", "development plan": "[]", "project function point count": "[]", "electronic mail": "[]", "absolute assembler": "[]", "service primitive": "[]", "call reference": "[]", "metric validation": "[]", "many-sorted algebra": "[]", "signal interface signature": "[]", "deployment plan": "[{\"term\": \"release plan\", \"definition\": \"1. The output of release planning. On a fixed-date release, the release\\u00a0plan will specify the range of features available on the fixed future date. On a fixed scope\\u00a0release, the release plan will specify the range of sprints and costs required to\\u00a0deliver the fixed scope. 2. A plan that communicates, to the level of accuracy that is\\u00a0reasonably possible, when the release will be available, what features will be in the\\u00a0release, and how much will it cost. See also fixed-date release, fixed-scope release.\"}]", "rate-monotonic algorithm": "[]", "software reliability management": "[]", "architectural feature": "[]", "customer uncertainty": "[{\"term\": \"customer uncertainty\", \"definition\": \"Uncertainty surrounding who the customers of a product are.\\u00a0See also uncertainty. Contrast with end uncertainty, means uncertainty.\"}]", "delivered source statement": "[]", "risk state": "[]", "project schedule": "[]", "readability": "[]", "early-failure period": "[]", "concurrency": "[]", "activation": "[]", "stabilization phase": "[]", "schedule management plan": "[]", "single done": "[]", "proposed change": "[]", "test driver": "[]", "item of documentation": "[]", "the operand": "[]", "maintenance personnel": "[{\"term\": \"technical practices\", \"definition\": \"The specific practices or techniques that are used during sprint\\u00a0execution to properly perform the work required to deliver features that have manageable\\u00a0levels of technical debt and meet the Scrum team\\u2019s definition of done.\"}]", "nonkey attribute": "[]", "wag": "[]", "project organization chart": "[]", "Certified Scrum Professional": "[{\"term\": \"Certified Scrum Professional\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance. Candidates must have demonstrated experience, documented training, and proven knowledge in the art of Scrum. To apply to be a CSP, candidates need a minimum of 36 months of successful Agile/Scrum work experience implementing Scrum inside organizations as development team member, product owner, or ScrumMaster\\u2014all within the past five years. Candidates also need to gather and submit 70 Scrum Education Units (SEUs)\\u2014and those have to be earned during the most recent three years. Synonymous with CSP. See also CSM, CSPO, CST.\"}]", "engineering viewpoint": "[]", "Database Connectivity": "[]", "training": "[{\"term\": \"binning\", \"definition\": \"A technique for accurately grouping together items of similar size. Useful when we don't have the precision necessary to discriminate among similarly sized items, so instead we group together all items that fall within a given small interval and label all such items with a value (often the central value) that is representative of the interval.\"}]", "reentrant": "[]", "configuration context": "[]", "three amigos": "[]", "place": "[{\"term\": \"queue\", \"definition\": \"A holding place for items (an inventory) as they wait for the next action in a\\u00a0work stream. See also inventory, work in process.\"}]", "call": "[]", "simple buffering": "[]", "waterfall model": "[]", "fourth generation language": "[]", "design document": "[]", "real type": "[]", "fact build": "[]", "diagram title": "[]", "exception": "[]", "bootstrap": "[]", "numeric character": "[]", "risk assumption": "[]", "risk mitigation": "[]", "chief product owner": "[{\"term\": \"chief product owner\", \"definition\": \"The overall product owner within a product owner team on a\\u00a0large development effort. See also product owner.\"}]", "Government off the Shelf": "[]", "real storage": "[]", "effective instruction": "[]", "data": "[{\"term\": \"persona\", \"definition\": \"1. A user archetype, synthesized from the ethnographic data of real users,\\u00a0that helps guide decisions about product features, navigation, interactions, and visual\\u00a0design. 2. A fictitious person that is the prototypical instance of a particular user role.\\u00a0See also user story.\"}]", "serial construct": "[]", "derived measure": "[]", "dimension mapping table": "[]", "page breakage": "[]", "turnkey system": "[]", "transient error": "[]", "scaffolding": "[]", "sustainable pace": "[{\"term\": \"sustainable pace\", \"definition\": \"The appropriately aggressive pace at which a team works so that it\\u00a0produces a good flow of business value over an extended period of time without getting\\u00a0burned out.\"}]", "Object Management Group": "[]", "information item type": "[]", "detailed function point count": "[]", "measurand": "[]", "loop-control variable": "[]", "quiescing": "[]", "intellectual property": "[]", "asynchronous message communication": "[]", "task structuring": "[]", "organization chart": "[]", "information viewpoint": "[]", "system": "[{\"term\": \"Kanban\", \"definition\": \"An agile approach overlaid on an existing process that advocates visualizing\\u00a0how work flows through a system, limiting the work in process, and measuring and\\u00a0optimizing the flow of work. See also agile, work in process.\"}]", "project phase": "[]", "lean ux": "[{\"term\": \"lean ux\", \"definition\": \"A practice that integrates design thinking, core agile principles, and lean startup principles\\u00a0that is used by a cross-functional team of designers, developers, and product managers to bring the true nature of the work to light\\u00a0faster, with less emphasis on deliverables and greater focus on the\\u00a0actual experience\\u00a0being designed. Lean UX is based on the following core principles:\"}]", "extendability": "[]", "multiple readers and writers": "[]", "repo master": "[]", "daily standup": "[{\"term\": \"daily stand-up\", \"definition\": \"A common approach to performing a daily scrum whereby the participants\\u00a0stand for the entirety of the activity. Standing up promotes brevity and helps\\u00a0ensure that the activity does not exceed its timebox. See daily scrum.\"}]", "vendor": "[]", "rapid application development rad": "[]", "dependability": "[]", "breaking the build": "[]", "paging": "[]", "degree of influence": "[]", "optional subgroup": "[]", "earned value management": "[]", "interrupt mask": "[]", "parse": "[]", "central processing unit": "[]", "think time": "[]", "Project Management Body of Knowledge": "[]", "composite type": "[]", "diagram reference": "[]", "lifecycle application": "[]", "operation interface": "[]", "timeliness rating value": "[]", "optional nonidentifying relationship": "[]", "quality measure element": "[]", "batch": "[{\"term\": \"batch size\", \"definition\": \"The cardinality of a set of items to be processed at some future step. See\\u00a0also work in process.\"}]", "program structure chart": "[]", "lead": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "technical management": "[]", "design element": "[{\"term\": \"T-shaped skills\", \"definition\": \"A metaphor used to describe a person with deep vertical skills in a\\u00a0specialized area (such as UX design) as well as broad but not necessarily very deep\\u00a0skills in other relevant areas (such as testing and documentation). Team members\\u00a0with T-shaped skills better enable swarming behavior. See also swarming.\"}]", "feature creep": "[]", "Ant with Enterprise Extensions": "[]", "adapter": "[]", "provision": "[]", "emulator": "[]", "program synthesis": "[]", "relative chain frequency": "[]", "deliverables": "[{\"term\": \"artifact\", \"definition\": \"A tangible by-product produced during product development. The product\\u00a0backlog, sprint backlog, and potentially shippable product increment are examples of\\u00a0Scrum artifacts. See also practice.\"}]", "function point analysis": "[]", "help system": "[]", "application-oriented language": "[]", "configuration control board": "[]", "binding object": "[]", "Ada": "[]", "internal stakeholders": "[{\"term\": \"internal stakeholders\", \"definition\": \"Stakeholders who are internal to the organization that is developing\\u00a0the product, for example, senior executives, managers, and internal users. See\\u00a0also stakeholders. Contrast with external stakeholders.\"}]", "schedule analysis": "[{\"term\": \"release planning\", \"definition\": \"Longer-term planning that answers questions like \\u201cWhen will we\\u00a0be done?\\u201d or \\u201cWhich features can I get by the end of the year?\\u201d or \\u201cHow much will\\u00a0this cost?\\u201d Release planning must balance customer value and overall quality against\\u00a0the constraints of scope, schedule, and budget. See also release plan.\"}]", "transition rule": "[]", "expert system": "[]", "producer": "[]", "knowledge": "[{\"term\": \"tacit knowledge\", \"definition\": \"Unwritten and unspoken knowledge (including insights, intuitions,\\u00a0and hunches) that is hard, but not impossible, to articulate with formal language.\\u00a0The opposite of explicit or formal knowledge. Sometimes referred to as \\u201cknow-how.\\u201d\"}]", "feasibility": "[]", "product baseline": "[]", "sprint backlog": "[{\"term\": \"sprint backlog\", \"definition\": \"1. An artifact produced at a sprint-planning meeting and continuously\\u00a0updated during sprint execution that helps a self-organizing team better plan\\u00a0and manage the work necessary to deliver on the sprint goal. 2. A list of the product\\u00a0backlog items pulled into a sprint and an associated plan for how to achieve them\\u2014frequently expressed in terms of tasks that are estimated in ideal hours. See also ideal\\u00a0hour, sprint planning, task.\"}]", "requirements management": "[{\"term\": \"T-shirt sizing\", \"definition\": \"A form of estimation that is often, although not exclusively, used to size portfolio backlog items. T-shirt sizing is based on the concept of binning. The bins are typically assigned labels corresponding to those commonly used with T-shirt sizes: extra small, small, medium, large, extra large, etc. Frequently a cost range is associated with each size (e.g., an extra small project will cost between $10k and $25k) to provide organization-specific meaning to each T-shirt size. See also binning.\\u00a0\"}]", "safety-critical software": "[]", "detailed design": "[]", "checkpoint": "[]", "software development process": "[]", "bind": "[]", "agile software development": "[{\"term\": \"artifact\", \"definition\": \"A tangible by-product produced during product development. The product\\u00a0backlog, sprint backlog, and potentially shippable product increment are examples of\\u00a0Scrum artifacts. See also practice.\"}]", "invariant": "[]", "tree": "[{\"term\": \"sprint mapping\", \"definition\": \"sprint mapping. An activity to tentatively slot or map appropriately detailed, estimated, and priortized product backlog items into specific future sprints. One simple approach is to approximate\\u00a0a set of product\\u00a0backlog items for each of the next several sprints by grouping together into a sprint items whose aggregate size roughly\\u00a0equals the team\\u2019s average velocity. Synonymous with PBI slotting.\"}]", "software asset management": "[]", "artifact": "[{\"term\": \"artifact\", \"definition\": \"A tangible by-product produced during product development. The product\\u00a0backlog, sprint backlog, and potentially shippable product increment are examples of\\u00a0Scrum artifacts. See also practice.\"}]", "dynamic resource allocation": "[]", "double-operand instruction": "[]", "developer": "[{\"term\": \"ideal day\", \"definition\": \"A unit for estimating the size of product backlog items based on how long\\u00a0an item would take to complete if it were the only work being performed, there were\\u00a0no interruptions, and all resources necessary to complete the work were immediately\\u00a0available. See also ideal hour. Contrast with story point.\"}]", "Requirements Management Rich Text Format": "[]", "task completion": "[]", "project scope statement": "[]", "user story": "[{\"term\": \"user story\", \"definition\": \"A convenient format for expressing the desired business value for many\\u00a0types of product backlog items. User stories are crafted in a way that makes them\\u00a0understandable for both business people and technical people. They are structurally\\u00a0simple and typically expressed in a format such as \\u201cAs a <user role> I want to achieve\\u00a0<goal> so that I get <benefit>.\\u201d They provide a great placeholder for a conversation.\\u00a0Additionally, they can be written at various levels of granularity and are easy to progressively\\u00a0refine. See also epic, progressive refinement, theme, user role.\"}]", "bottom-up estimating": "[]", "Certified Scrum Trainer": "[{\"term\": \"Certified Scrum Trainer\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance.\\u00a0A difficult-to-obtain certification that enables people to teach Certified Scrum Master\\u00ae and Certified Scrum Product Owner\\u00ae courses. CSTs must demonstrate a deep knowledge and understanding of Scrum concepts, practices, and principles. To apply to be a CST, a candidate must hold an active Certified Scrum Professional\\u00ae designation from Scrum Alliance, have extensive hands-on experience implementing Scrum inside organizations as a ScrumMaster, product owner, or development team member, and have taught Scrum in a co-training partnership with a CST or independently in a non-certified context. Synonymous with CST. See also CSM, CSPO, CSP.\"}]", "partial": "[{\"term\": \"potentially shippable product increment\", \"definition\": \"Results that are completed to a high degree\\u00a0of confidence and represent work of good quality that is potentially shippable to end\\u00a0customers at the end of a sprint. Being potentially shippable does not mean the results\\u00a0will actually be delivered to customers. Shipping is a business decision; potentially\\u00a0shippable is a state of confidence.\"}]", "interface requirement": "[]", "product sashimi": "[]", "prescription": "[]", "design-to-cost": "[]", "unknown unknowns": "[{\"term\": \"unknown unknowns\", \"definition\": \"The things that we don\\u2019t yet know that we don\\u2019t know.\"}]", "authoring language": "[]", "assessment scope": "[{\"term\": \"fixed-scope release\", \"definition\": \"A release that must have a specific set of features. The date on\\u00a0which the features are delivered and/or the costs are flexible. Contrast with fixed-date\\u00a0release.\"}]", "milestone retrospective": "[]", "modular programming": "[]", "status code": "[]", "secondary window": "[]", "user story points": "[]", "error model": "[]", "firmware": "[]", "contravariance": "[]", "scrum of scrums": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "attribute name": "[]", "origin": "[]", "static schema": "[]", "root-cause analysis": "[]", "invocation": "[]", "first-generation language": "[]", "computational object template": "[]", "computer language": "[]", "baseline design": "[]", "supervisor state": "[]", "video display terminal": "[]", "root cause analysis": "[]", "principal": "[{\"term\": \"refactoring\", \"definition\": \"A technique for restructuring an existing body of code by improving/simplifying its internal structure (design) without changing its external behavior.\\u00a0Refactoring is one of the principal techniques for managing technical debt. See also\\u00a0technical debt, technical practices.\"}]", "user acceptance tests": "[]", "serial": "[]", "functional configuration identification": "[]", "management process": "[]", "engineering change": "[]", "release engineer": "[]", "calling box": "[]", "fast tracking": "[]", "activity-on-node": "[]", "computer": "[{\"term\": \"chickens\", \"definition\": \"A metaphor used by some Scrum teams to indicate that people are invested\\u00a0in the goal of the Scrum team, but at a level of involvement (not accountable) rather\\u00a0than commitment. Best used to refer to people outside of the Scrum team. Derived\\u00a0from an old joke about a chicken and a pig: \\u201cIn a ham-and-eggs breakfast, the chicken\\u00a0is involved, but the pig is committed.\\\" Contrast with pigs.\"}]", "sprint goal": "[{\"term\": \"sprint goal\", \"definition\": \"A high-level summary of the goal the product owner would like to\\u00a0accomplish during the sprint. Frequently elaborated through a specific set of product\\u00a0backlog items.\"}]", "meta-meta-attribute": "[]", "problem state": "[]", "maintenance program": "[]", "editor": "[]", "scenario": "[]", "subject matter expert": "[]", "design characteristic": "[]", "information retrieval": "[]", "end user": "[{\"term\": \"technical stories\", \"definition\": \"A \\u201cuser\\u201d story (product backlog item) that delivers no perceived\\u00a0end-user value but does deliver important architecture or infrastructure needed to\\u00a0deliver future user value. See also user story.\"}]", "operand": "[]", "persistence transparency": "[]", "fetch": "[]", "include": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "supplementary run": "[]", "track build item": "[]", "common data": "[]", "requirements flow-down": "[]", "core dump": "[]", "seller": "[]", "process": "[{\"term\": \"plan-driven process\", \"definition\": \"A style of development that attempts to plan for and anticipate\\u00a0up front all of the features a user might want in the end product and to determine\\u00a0how best to build those features. The work plan is based on execution of a sequential\\u00a0set of work-specific phases. Synonymous with anticipatory process, predictive process,\\u00a0prescriptive process, sequential process, traditional development process, waterfall\\u00a0process.\"}]", "meta-entity": "[]", "fail": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "relationship": "[]", "abstract design": "[]", "backout": "[]", "optional attribute": "[]", "grade": "[]", "managed web site": "[]", "criticality": "[]", "tree-structured chart": "[]", "programmer": "[]", "risk": "[{\"term\": \"risk\", \"definition\": \"1. The likelihood that an event will be accompanied by undesirable consequences.\\u00a0Risk is measured by both the probability of the event and the seriousness of\\u00a0the consequences. 2. Any uncertainty that is expected to have a negative outcome for\\u00a0the activity. See also uncertainty.\"}]", "extreme programming": "[{\"term\": \"Extreme Programming (XP)\", \"definition\": \"1. A software development methodology that is intended to improve software quality and responsiveness to changing customer requirements (source Wikipedia). 2. An agile development approach that is complementary\\u00a0to Scrum. Extreme Programming specifies important technical practices that development\\u00a0teams use to manage the flow of task-level work during sprint execution. See\\u00a0also agile.\"}]", "synchronize": "[]", "servant leader": "[{\"term\": \"servant leader\", \"definition\": \"1. A person who achieves results for her organization by giving priority\\u00a0attention to the needs of her colleagues and those she serves. 2. A philosophy and\\u00a0practice of leadership based on listening, empathy, healing, awareness, persuasion,\\u00a0conceptualization, foresight, stewardship, commitment, and community building.\\u00a0See also ScrumMaster.\"}]", "hierarchically consecutive": "[]", "busy time": "[]", "practice": "[{\"term\": \"practice\", \"definition\": \"The way in which a principle is supported or realized. For example, the\\u00a0principle of demonstrating progress is supported by the sprint review Scrum practice.\\u00a0See activity, artifact, role, rule. See also principle, values.\"}]", "list": "[{\"term\": \"prioritized list\", \"definition\": \"A list or sequence of items to be attended to, arranged in order of their relative importance. The items in the product backlog are a prioritized list. See also product backlog.\"}]", "user experience ux": "[]", "cardinality constraint": "[]", "algorithmic language": "[]", "production": "[{\"term\": \"genchi genbutsu\", \"definition\": \"A Japanese phrase (\\u73fe\\u5730\\u73fe\\u7269) that is frequently translated as:\\u00a0\\\"go and see for yourself.\\\" Genchi Genbutsu is a\\u00a0key principle of the Toyota Production System. According to Jeff Liker, author of The Toyota Way, it suggests that you\\u00a0cannot be sure you really understand any part of a business problem unless you go\\u00a0to the genba (the 'real place' - where work is done)\\u00a0and see for yourself firsthand. It is unacceptable to take anything for granted or to rely on the reports of others. See also genba.\"}]", "subject tool": "[]", "interaction group": "[]", "empirical process control": "[{\"term\": \"empirical process control\", \"definition\": \"A style of work that leverages the principles of inspection,\\u00a0adaptation, and transparency. Contrast with defined process.\"}]", "branchpoint": "[]", "subprogram": "[]", "instruction time": "[]", "benchmark": "[]", "cross-reference list": "[]", "content assist": "[]", "Open Services for Lifecycle Collaboration": "[]", "interface task": "[]", "late start date": "[]", "master state": "[]", "class path": "[]", "functional manager": "[]", "design language": "[{\"term\": \"prescriptive process\", \"definition\": \"See plan-driven process.\"}]", "test design": "[]", "acquire project team": "[]", "predecessor activity": "[]", "input routine": "[]", "estimate to complete": "[]", "business rule": "[]", "black-box testing": "[]", "arrows connecting inputs to processing steps and processing steps to outputs": "[]", "formal specification": "[]", "lean software development": "[]", "attribute": "[{\"term\": \"emergence\", \"definition\": \"1. Individual, localized behavior that aggregates into global behavior that is disconnected from its origins. 2. An attribute of complex adaptive systems. 3. When applied to software development, recognizing that it is not possible to a priori determine the correct set of features, designs, or plans. Instead, over time as more information is learned, important information will emerge from the experience gained on prior work. See also\\u00a0complex adaptive system.\"}]", "squiggle": "[]", "cost-plus-fee": "[]", "cost-plus-fixed-fee contract": "[{\"term\": \"fixed-price contract\", \"definition\": \"A contract between a contractor (e.g., a service provider) and a client that provides for a firm price that is not subject to adjustment based on actual costs incurred by the contractor. This contract type transfers from the client to the contractor all of the cost risk. For the contractor to provide a fixed price, the client would have to specify in great detail up front what the client would like the contractor to do. Doing so would violate a core agile principle \\u2013 specifying up front very detailed information when both parties have the least amount of information is most often not practical. So, as a rule, organizations that have adopted agile should avoid fixed-price contracts.\"}]", "user guide": "[]", "cluster manager": "[]", "hazard identification": "[]", "generality": "[]", "planned finish date": "[]", "simultaneous recursion": "[]", "order language": "[]", "microcode assembler": "[]", "binding": "[{\"term\": \"commitment\", \"definition\": \"The act of binding oneself to a course of action. Scrum encourages\\u00a0commitment. Commitment means that during both good times and bad, each team\\u00a0member is dedicated to meeting the team\\u2019s collective goal. Contrast with forecast.\"}]", "relevant stakeholder": "[]", "multiprocessing": "[]", "captial expenditure": "[{\"term\": \"cost accounting\", \"definition\": \"1. Determining the costs of products, processes, projects to report the correct amounts on the\\u00a0financial statements. 2. A specific example would be determining\\u00a0if a cost should be treated as a capital expediture or an operational expense. See also captial expenditure, operational expense.\"}]", "crashing": "[]", "help text": "[]", "strategic filter": "[{\"term\": \"strategic filter\", \"definition\": \"The decision criteria used by an organization to evaluate whether a\\u00a0proposed product meets the strategic criteria to move forward for additional consideration.\\u00a0Contrast with economic filter.\"}]", "time-critical task": "[]", "work authorization": "[]", "measurement function": "[{\"term\": \"innovation accounting\", \"definition\": \"Innovation accounting is a measurement/accounting system that uses actionable metrics\\u00a0to evaluate how fast we are learning as a critical measure of progress toward converging\\u00a0on a business-valuable result (Ries 2011).\"}]", "software design verification": "[{\"term\": \"design pattern\", \"definition\": \"A general repeatable or reusable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations. (derived from Wikipedia)\"}]", "tutorial": "[{\"term\": \"silent grouping\", \"definition\": \"A facilitation technique for getting people to group related items\\u00a0without talking, relying only on the individual placement and movement of items\\u00a0(typically cards or sticky notes) as a means of communicating and coordinating\\u00a0among the participants. A technique frequently used during the sprint retrospective\\u00a0activity. See also sprint retrospective.\"}]", "modification request": "[]", "mean time between failures": "[]", "work package": "[]", "external attribute": "[]", "inherited error": "[]", "configuration index": "[]", "hierarchical input-process-output": "[]", "restart": "[]", "procedural cohesion": "[]", "environment": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "continuous forms": "[]", "job step": "[]", "selective choice construct": "[]", "failure": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "integration test": "[]", "transition variables": "[]", "scope creep": "[]", "pattern": "[{\"term\": \"design pattern\", \"definition\": \"A general repeatable or reusable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations. (derived from Wikipedia)\"}]", "risk acceptance": "[]", "reset": "[]", "scope": "[{\"term\": \"fixed-scope release\", \"definition\": \"A release that must have a specific set of features. The date on\\u00a0which the features are delivered and/or the costs are flexible. Contrast with fixed-date\\u00a0release.\"}]", "download": "[]", "not printable": "[]", "network planning": "[]", "program counter": "[]", "sync": "[]", "organizational policy": "[]", "exclusive requirement": "[]", "influence diagram": "[]", "inherited attribute": "[]", "niko-niko calendar": "[]", "synchronization engine": "[]", "colocation": "[{\"term\": \"co-located team\", \"definition\": \"Members of the same development team that are located at the same physical location where face-to-face collaboration among the team members is possible and practiced. Contract with distributed team. See also remote team member.\"}]", "plan risk responses": "[]", "module data": "[]", "functional domain": "[]", "compiler generator": "[]", "re-entrant": "[]", "specification relationships to one another": "[]", "story": "[{\"term\": \"technical stories\", \"definition\": \"A \\u201cuser\\u201d story (product backlog item) that delivers no perceived\\u00a0end-user value but does deliver important architecture or infrastructure needed to\\u00a0deliver future user value. See also user story.\"}]", "stream": "[{\"term\": \"value stream mapping\", \"definition\": \"A\\u00a0lean-management method for visually analyzing the current state to deeply understand how work gets done and designing an improved future state for a long-lived sequence of steps used to\\u00a0deliver tangible value to a customer. Most value streams are highly cross-functional, typically flowing through many functional departments or work teams within the organization (e.g., from product ideation in the business group, through development in the IT or dev group, with activities performed by the legal group and compliance group).\"}]", "predictive metric": "[]", "measurement process": "[]", "mutually exclusive clustering": "[]", "done-done-done": "[{\"term\": \"done-done\", \"definition\": \"A term often used by teams to mean the work performed during the sprint is \\u201creally\\u201d done. Done to the point where the customer would think the work is done (potentially deliverable). Teams that use \\\"done-done\\\" often use the term done to mean \\u201cwe did as much work as we were prepared to do!\\u201d Well-functioning agile teams don\\u2019t need two concepts (done and done-done). For these teams, done really means done-done. See also definition of done.\"}]", "result": "[{\"term\": \"potentially shippable product increment\", \"definition\": \"Results that are completed to a high degree\\u00a0of confidence and represent work of good quality that is potentially shippable to end\\u00a0customers at the end of a sprint. Being potentially shippable does not mean the results\\u00a0will actually be delivered to customers. Shipping is a business decision; potentially\\u00a0shippable is a state of confidence.\"}]", "test data": "[]", "activity list": "[]", "address part": "[{\"term\": \"output measure\", \"definition\": \"Describes what was produced (e.g., number of widgets created, or number of hamburgers served) or the services you delivered (e.g., number of clients). Output measures do not address the value or impact of work to either internal or external stakeholders. An example output measure is velocity. See blog post \\\"Output vs. Outcome\\u2014Measuring Business Success with Agile.\\\" Contrast with outcome measure.\"}]", "rating": "[{\"term\": \"sprint demo\", \"definition\": \"1. An activity of a sprint review where the completed (done) product\\u00a0backlog items are demonstrated with the goal of promoting an information-rich discussion\\u00a0between the Scrum team and other sprint review participants. 2. A term that is\\u00a0frequently used synonymously to refer to the entire sprint review. For further clarification between a sprint demo and sprint review, please read Ken Rubin's blog entitled:\\u00a0It\\u2019s a Sprint Review Not a Sprint Demo!\\u00a0See also sprint review.\"}]", "language standard": "[]", "dimension data": "[]", "System for Cross-domain Identity Management": "[]", "internal arrow": "[]", "correctness": "[]", "characteristic": "[{\"term\": \"just in time (JIT)\", \"definition\": \"A characteristic of a process whereby the assets or activities of a\\u00a0work stream become available or occur just as they are needed.\"}]", "relative estimation": "[]", "software transition": "[]", "outcome measure": "[{\"term\": \"outcome measure\", \"definition\": \"Illustrates the meaningful results or the value that is created. Outcome measures\\u00a0quantify the true performance and assess the success of the processes put in place and thus are a better way to gauge the business success. An example outcome measure is net promoter score (NPS). See blog post \\\"Output vs. Outcome\\u2014Measuring Business Success with Agile.\\\" Contrast with output measure.\"}]", "named constant": "[]", "configuration": "[{\"term\": \"regression testing\", \"definition\": \"A type of\\u00a0software testing\\u00a0that verifies that previously developed and tested software still performs correctly even after the software itself was changed or after other software in the same package or configuration has been changed. Basically, testing to determine that previously working software is still working in the presence\\u00a0of recently made changes (e.g., new features added, defects repaired, or code refactoring).\"}]", "system stakeholder": "[{\"term\": \"stakeholder\", \"definition\": \"A person, group, or organization that affects or can be affected by an\\u00a0organization\\u2019s actions. See also external stakeholders, internal stakeholders.\"}]", "housekeeping operation": "[]", "pilot project": "[]", "reenterable": "[]", "corporate governance": "[]", "assumptions analysis": "[]", "design analyzer": "[]", "transition": "[]", "object of interest": "[]", "managed network": "[]", "loop control": "[{\"term\": \"inspect and adapt\", \"definition\": \"1. A common phase in Scrum that refers to the inspection and\\u00a0adaptation principles of empirical process control. 2. The principle of inspecting a\\u00a0product or process and making adaptations based on what is learned. 3. A key part of\\u00a0the learning loop. See also adaptation, empirical process control, inspection, learning\\u00a0loop.\"}]", "target capability": "[]", "defect": "[{\"term\": \"product backlog item (PBI)\", \"definition\": \"1. An item such as a feature, defect, or (occasionally)\\u00a0technical work that is valuable from the product owner\\u2019s perspective. 2. An item in\\u00a0the product backlog. See also product backlog.\"}]", "emotions seismograph": "[{\"term\": \"emotions seismogram\", \"definition\": \"A graphical representation of the emotional ups and downs of team members over the course of a sprint. A technique frequently used during the sprint retrospective activity. See also sprint retrospective. Mistakenly synonmous with emotions seismograph.\"}]", "release train engineer rte": "[]", "descendent diagram": "[]", "assessment sponsor": "[]", "control scope": "[]", "affinity testing": "[]", "inspect and adapt": "[{\"term\": \"inspect and adapt\", \"definition\": \"1. A common phase in Scrum that refers to the inspection and\\u00a0adaptation principles of empirical process control. 2. The principle of inspecting a\\u00a0product or process and making adaptations based on what is learned. 3. A key part of\\u00a0the learning loop. See also adaptation, empirical process control, inspection, learning\\u00a0loop.\"}]", "precision": "[{\"term\": \"precision\", \"definition\": \"How exact an estimate is. For example, saying a product will ship on October\\u00a07, 2015, is more precise than saying a product will ship in October 2015. Contrast\\u00a0with accuracy.\"}]", "static breakpoint": "[]", "non-destructive read": "[]", "step-by-step operation": "[]", "information processing system": "[]", "design constraints": "[]", "expert judgment": "[]", "time-now date": "[]", "base measure": "[]", "developer unit": "[]", "resource breakdown structure": "[]", "fibonacci sequence": "[{\"term\": \"fibonacci sequence\", \"definition\": \"A specific sequence of numbers (1, 1, 2, 3, 5, 8, 13, 21, 34\\u2026) in which the next number in the sequence is derived by adding together the previous two numbers in the sequence. A modified version of the Fibonacci Sequence is one common sequences used\\u00a0when performing relative size estimations of product backlog items. Another sequence that some teams use is powers of two (e.g., 1, 2, 4, 8, 16, 32...) See Planning Poker.\"}]", "cross-compiler": "[]", "measure of effectiveness": "[]", "human resource planning": "[]", "resource group": "[]", "t-shirt sizing": "[{\"term\": \"T-shirt sizing\", \"definition\": \"A form of estimation that is often, although not exclusively, used to size portfolio backlog items. T-shirt sizing is based on the concept of binning. The bins are typically assigned labels corresponding to those commonly used with T-shirt sizes: extra small, small, medium, large, extra large, etc. Frequently a cost range is associated with each size (e.g., an extra small project will cost between $10k and $25k) to provide organization-specific meaning to each T-shirt size. See also binning.\\u00a0\"}]", "brainstorming": "[]", "taxonomy": "[{\"term\": \"unavoidable technical debt\", \"definition\": \"A form of technical debt that is usually unpredictable\\u00a0and unpreventable and accrues through no fault of the team building the product.\\u00a0Contrast with naive technical debt, strategic technical debt. See also technical debt.\"}]", "personal stream": "[]", "extensional set": "[]", "Government-off-the-Shelf": "[]", "input": "[{\"term\": \"sprint review\", \"definition\": \"An inspect-and-adapt activity that occurs after sprint execution where\\u00a0the Scrum team shows to all interested parties what was accomplished during the\\u00a0sprint. The sprint review gives everyone with input in the product development effort\\u00a0an opportunity to inspect what has been built so far and adapt what will be built\\u00a0next. See also inspect and adapt, sprint demo.\"}]", "generic program unit": "[]", "monitor": "[]", "notice of revision": "[]", "list processing language": "[]", "functional testing": "[]", "schedule variance": "[]", "skunkworks": "[]", "identification": "[]", "address field": "[]", "setup time": "[]", "potentially shippable product increment": "[{\"term\": \"potentially shippable product increment\", \"definition\": \"Results that are completed to a high degree\\u00a0of confidence and represent work of good quality that is potentially shippable to end\\u00a0customers at the end of a sprint. Being potentially shippable does not mean the results\\u00a0will actually be delivered to customers. Shipping is a business decision; potentially\\u00a0shippable is a state of confidence.\"}]", "call list": "[]", "acceptance": "[{\"term\": \"acceptance criteria\", \"definition\": \"1. The external quality characteristics specified by the product owner from a business or stakeholder perspective. Acceptance criteria define desired behavior and are used to determine whether a product backlog item has been successfully developed. 2. The exit criteria that a component or a system must satisfy in order to be accepted by a user, customer, or other authorized entity (IEEE 610).\"}]", "lightweight process": "[]", "lean agile leaders": "[]", "leading decision": "[]", "format": "[{\"term\": \"user story\", \"definition\": \"A convenient format for expressing the desired business value for many\\u00a0types of product backlog items. User stories are crafted in a way that makes them\\u00a0understandable for both business people and technical people. They are structurally\\u00a0simple and typically expressed in a format such as \\u201cAs a <user role> I want to achieve\\u00a0<goal> so that I get <benefit>.\\u201d They provide a great placeholder for a conversation.\\u00a0Additionally, they can be written at various levels of granularity and are easy to progressively\\u00a0refine. See also epic, progressive refinement, theme, user role.\"}]", "project notebook": "[{\"term\": \"project initiation\", \"definition\": \"See project chartering.\"}]", "n-address instruction": "[]", "computer program component": "[]", "identify stakeholders": "[]", "associative class": "[]", "block": "[]", "simple domain": "[{\"term\": \"simple domain\", \"definition\": \"1. A situation in which everyone can see cause and effect. Often the\\u00a0right answer is obvious and undisputed. 2. One of the domains in the Cynefin framework.\\u00a0See also Cynefin. Contrast with chaotic domain, complex domain, complicated\\u00a0domain, disorder domain.\"}]", "software safety": "[]", "customer requirement": "[]", "box detail reference": "[]", "regression testing": "[{\"term\": \"regression testing\", \"definition\": \"A type of\\u00a0software testing\\u00a0that verifies that previously developed and tested software still performs correctly even after the software itself was changed or after other software in the same package or configuration has been changed. Basically, testing to determine that previously working software is still working in the presence\\u00a0of recently made changes (e.g., new features added, defects repaired, or code refactoring).\"}]", "kano model analysis": "[{\"term\": \"kano model analysis\", \"definition\": \"A customer satisfaction model developed by Japanese research\\u00a0Noriaki Kano in the early 1980s. Kano analysis is a\\u00a0set of ideas and techniques that help determine\\u00a0perceived user satisfaction with product features (e.g., product backlog items). Kano analysis uses a questionnaire were customers are asked both a functional (\\\"How would you feel if the feature is included?\\\") and dysfunctional (\\\"How would you feel if the feature were not included?\\\") form of a question about individual\\u00a0features. Based on how users answer these questions, Kano analysis classifies a feature as either mandatory (has to be in the product), linear (customer satisfaction will be linear with increases in quantity or quality of the feature), or exciter/delighter (customer satisfaction will be very high since customers didn't even know they wanted this feature until they saw it, and now they believe they can't live without it). Kano model analysis is one technique that can be used to determine the level of investment (if any) to make in each product backlog item and therefore is a technique that can be used to help prioritize product backlog items.\"}]", "submit": "[{\"term\": \"Certified Scrum Professional\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance. Candidates must have demonstrated experience, documented training, and proven knowledge in the art of Scrum. To apply to be a CSP, candidates need a minimum of 36 months of successful Agile/Scrum work experience implementing Scrum inside organizations as development team member, product owner, or ScrumMaster\\u2014all within the past five years. Candidates also need to gather and submit 70 Scrum Education Units (SEUs)\\u2014and those have to be earned during the most recent three years. Synonymous with CSP. See also CSM, CSPO, CST.\"}]", "formal qualification review": "[]", "partial correctness": "[]", "extend": "[]", "regulation": "[]", "child diagram": "[]", "generated address": "[]", "use case diagram": "[]", "terminal symbol": "[]", "and function version": "[]", "zero-address instruction": "[]", "sprint": "[{\"term\": \"sprint\", \"definition\": \"A short-duration, timeboxed iteration. Typically a timebox between one\\u00a0week and a calendar month during which the Scrum team is focused on producing\\u00a0a potentially shippable product increment that meets the Scrum team\\u2019s agreed-upon\\u00a0definition of done. See also definition of done, iteration, potentially shippable product\\u00a0increment.\"}]", "functional design": "[{\"term\": \"test-driven development (TDD)\", \"definition\": \"1. An evolutionary approach to development based\\u00a0on writing a failing automated test before the functional code that makes the test\\u00a0pass. Once the code is written to pass the test, the cycle is then repeated, including\\u00a0refactoring the existing code to ensure a coherent cross-functional design. The goal\\u00a0of test-driven development is specification and not validation\\u2014to think through a design before code is written, to create clean code that always works. 2. An example of\\u00a0test-first development. See also refactoring, technical practices, test-first development.\"}]", "collapse": "[]", "request token": "[]", "sprint mapping": "[{\"term\": \"sprint mapping\", \"definition\": \"sprint mapping. An activity to tentatively slot or map appropriately detailed, estimated, and priortized product backlog items into specific future sprints. One simple approach is to approximate\\u00a0a set of product\\u00a0backlog items for each of the next several sprints by grouping together into a sprint items whose aggregate size roughly\\u00a0equals the team\\u2019s average velocity. Synonymous with PBI slotting.\"}]", "process outcome": "[]", "boundary arrow": "[]", "aggregation": "[{\"term\": \"program increment\", \"definition\": \"Largest plan-do-check-adjust (PDCA) learning cycle in the Scaled Agile Framework (SAFe).\\u00a0A program increment (aka PI)\\u00a0is\\u00a0a cadence-based interval for building and validating a full system increment, demonstrating value, and getting fast feedback. Each program increment synchronizes the work of\\u00a0multiple teams working across multiple iterations (sprints) to\\u00a0facilitate planning, limit WIP, provide for aggregation of newsworthy value for feedback, assure consistent program-level retrospectives.\\u00a0(adapted from the\\u00a0ScaledAgile website).\"}]", "trailer": "[{\"term\": \"Certified Scrum Trainer\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance.\\u00a0A difficult-to-obtain certification that enables people to teach Certified Scrum Master\\u00ae and Certified Scrum Product Owner\\u00ae courses. CSTs must demonstrate a deep knowledge and understanding of Scrum concepts, practices, and principles. To apply to be a CST, a candidate must hold an active Certified Scrum Professional\\u00ae designation from Scrum Alliance, have extensive hands-on experience implementing Scrum inside organizations as a ScrumMaster, product owner, or development team member, and have taught Scrum in a co-training partnership with a CST or independently in a non-certified context. Synonymous with CST. See also CSM, CSPO, CSP.\"}]", "minimum releasable features": "[{\"term\": \"minimum releasable features (MRFs)\", \"definition\": \"1. The minimum set of features that must be\\u00a0present in a release to make it viable\\u2014useful enough to end customers such that they\\u00a0want it and would be willing to pay for it. 2. Features composed from a collection of\\u00a0minimum marketable features. Synonymous with must-have features. See also minimum\\u00a0marketable features.\"}]", "loaded origin": "[]", "incremental productivity": "[]", "implied addressing": "[]", "sample instance diagram": "[]", "estimated function point count": "[]", "machine independent": "[]", "subproject": "[]", "alternate path": "[]", "topdown": "[]", "variable figurative constant": "[]", "triple constraint": "[]", "ceremony": "[{\"term\": \"ceremony\", \"definition\": \"A ritualistic or symbolic activity that is performed on well-defined occasions.\\u00a0Some people refer to the core Scrum activities of sprint planning, daily scrum,\\u00a0sprint review, and sprint retrospective as ceremonies. See also activity, unnecessary\\u00a0formality.\"}]", "system hazard": "[]", "stepwise refinement": "[]", "permanence": "[]", "base functional component": "[]", "categorization scheme": "[]", "recoverability": "[]", "budget at completion": "[]", "initial function point count": "[]", "backup programmer": "[]", "leaf node": "[]", "execution result": "[]", "Grosch's law": "[]", "quality factor sample": "[]", "diversity": "[]", "initial program loader": "[]", "forward pass": "[{\"term\": \"test-driven development (TDD)\", \"definition\": \"1. An evolutionary approach to development based\\u00a0on writing a failing automated test before the functional code that makes the test\\u00a0pass. Once the code is written to pass the test, the cycle is then repeated, including\\u00a0refactoring the existing code to ensure a coherent cross-functional design. The goal\\u00a0of test-driven development is specification and not validation\\u2014to think through a design before code is written, to create clean code that always works. 2. An example of\\u00a0test-first development. See also refactoring, technical practices, test-first development.\"}]", "Nassi-Shneiderman chart": "[]", "fixed-scope release": "[{\"term\": \"fixed-scope release\", \"definition\": \"A release that must have a specific set of features. The date on\\u00a0which the features are delivered and/or the costs are flexible. Contrast with fixed-date\\u00a0release.\"}]", "starting address": "[]", "virtual address": "[]", "control variable": "[]", "version control": "[]", "input place": "[]", "standup-daily meeting": "[]", "low-level design": "[]", "capability dimension": "[]", "software quality measure": "[]", "object program": "[]", "host machine": "[]", "run time": "[]", "process standard": "[]", "complexity matrix": "[{\"term\": \"story point\", \"definition\": \"A measure of the relative size of product backlog items that takes into\\u00a0account factors such as complexity and physical size. Typically determined by engaging\\u00a0in Planning Poker. See also ideal day, Planning Poker, relative size measure.\"}]", "test documentation": "[]", "indigenous error": "[]", "project quality management": "[]", "model layers": "[]", "program portfolio management": "[]", "end uncertainty": "[{\"term\": \"end uncertainty\", \"definition\": \"Uncertainty surrounding what will be built (the product). See also\\u00a0uncertainty. Contrast with customer uncertainty, means uncertainty.\"}]", "screen flow": "[]", "agile manifesto": "[{\"term\": \"agile\", \"definition\": \"1. A specific set of values and principles, as expressed in the Agile Manifesto\\u00a0(Beck et al. 2001). 2. An umbrella term used for a group of related approaches to software\\u00a0development based on iterative and incremental development. Scrum is an agile\\u00a0approach to development. See also Extreme Programming, Kanban, Scrum.\"}]", "data attribute": "[]", "upstream": "[]", "assessment indicator": "[]", "quantity": "[{\"term\": \"estimation\", \"definition\": \"A rough calculation of the value, number, quantity, or extent of something.\\u00a0In Scrum, we estimate the size of portfolio backlog items, product backlog\\u00a0items, and sprint backlog tasks. See also forecast.\"}]", "self-relative address": "[]", "start-to-start": "[]", "content link": "[]", "extended entry table": "[]", "execution": "[{\"term\": \"sprint execution\", \"definition\": \"The period of time during which the task-level work is performed by the development team to complete the features committed to during sprint planning. See also sprint planning.\"}]", "test log": "[]", "call tree": "[]", "use case specification": "[]", "distribute information": "[]", "microoperation": "[]", "scalar-valued class": "[]", "close project or phase": "[]", "inventory": "[{\"term\": \"inventory\", \"definition\": \"See work in process.\"}]", "intermediate software product": "[]", "computer resource": "[]", "storyboard": "[]", "cardinality": "[{\"term\": \"batch size\", \"definition\": \"The cardinality of a set of items to be processed at some future step. See\\u00a0also work in process.\"}]", "quality in use": "[]", "resource-limited schedule": "[]", "measurable concept": "[]", "invalid": "[]", "downward compatible": "[]", "system integration": "[]", "fatal error": "[]", "Groschs law": "[]", "associative entity": "[]", "component": "[{\"term\": \"component team\", \"definition\": \"1. A team that focuses on the creation of one or more components of\\u00a0a larger product that a customer would purchase. Component teams create assets or\\u00a0components that are then reused by other teams to assemble customer-valuable solutions. 2. Team that is cross-functional (multi-disciplinary), single component focused.\\u00a0Contrast with feature team.\"}]", "Certified ScrumMaster": "[{\"term\": \"Certified Scrum Trainer\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance.\\u00a0A difficult-to-obtain certification that enables people to teach Certified Scrum Master\\u00ae and Certified Scrum Product Owner\\u00ae courses. CSTs must demonstrate a deep knowledge and understanding of Scrum concepts, practices, and principles. To apply to be a CST, a candidate must hold an active Certified Scrum Professional\\u00ae designation from Scrum Alliance, have extensive hands-on experience implementing Scrum inside organizations as a ScrumMaster, product owner, or development team member, and have taught Scrum in a co-training partnership with a CST or independently in a non-certified context. Synonymous with CST. See also CSM, CSPO, CSP.\"}]", "occupational title standard": "[]", "total quality management": "[]", "total float": "[]", "demonstrative product": "[]", "message": "[]", "complete procedure": "[]", "service provider": "[{\"term\": \"fixed-price contract\", \"definition\": \"A contract between a contractor (e.g., a service provider) and a client that provides for a firm price that is not subject to adjustment based on actual costs incurred by the contractor. This contract type transfers from the client to the contractor all of the cost risk. For the contractor to provide a fixed price, the client would have to specify in great detail up front what the client would like the contractor to do. Doing so would violate a core agile principle \\u2013 specifying up front very detailed information when both parties have the least amount of information is most often not practical. So, as a rule, organizations that have adopted agile should avoid fixed-price contracts.\"}]", "local variable": "[]", "scalar-valued property": "[]", "utilization": "[]", "virtual memory": "[]", "evaluation": "[]", "enhancement": "[]", "object language": "[]", "project time management": "[]", "project file": "[]", "working storage": "[]", "hybrid computer": "[]", "project management system": "[]", "delimiter": "[]", "work breakdown structure component": "[]", "trademark": "[{\"term\": \"Visual AGILExicon\\u00ae\", \"definition\": \"1. Pronounced \\u201cvisual agile lexicon\\u201d, a\\u00a0language for describing and communicating core agile and Scrum concepts in a graphically rich and visually\\u00a0appealing manner. The Visual AGILExicon\\u00ae is the foundation of over 200 pictures in the best-selling book Essential Scrum: A Practical Guide to the Most Popular Agile Process. 2.\\u00a0A regsitered trademark of Innolution, LLC and Kenneth S. Rubin.\\u00a0\"}]", "requirement": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "one-plus-one address instruction": "[]", "menu": "[{\"term\": \"continuous delivery\", \"definition\": \"A software development discipline where software is built in such a way that it can be released to production at any time. Continuous delivery and continuous deployment are often used synonymously. However, some\\u00a0people use continuous deployment as a term that means software changes that are actually put into production (for use by a customer), whereas continuous delivery means changes that are continuously ready to go into product but might not actually be deployed (for business reasons).\\u00a0See also\\u00a0continuous deployment.\"}]", "classification": "[]", "throughput rating value": "[]", "health": "[{\"term\": \"portfolio planning\", \"definition\": \"An activity for determining which products (or projects) to work\\u00a0on, in which order, and for how long. Sometimes referred to as portfolio management. Want to see a picture?\"}]"}, "3": {"usage mode": "[]", "identifier": "[]", "cynefin": "[{\"term\": \"Cynefin\", \"definition\": \"A sense-making framework that helps us understand the situation in which\\u00a0we have to operate and decide on a situation-appropriate approach (Snowden and\\u00a0Boone 2007).\"}]", "problem": "[{\"term\": \"fast feedback\", \"definition\": \"A principle that states that feedback today is much more valuable than\\u00a0the same feedback tomorrow, because today\\u2019s feedback can be used to correct a problem\\u00a0before it compounds into a much larger problem, and provides the ability to\\u00a0truncate economically undesirable paths sooner (to fail faster). See also fail fast.\"}]", "repeatability": "[]", "backward recovery": "[]", "temporal clustering": "[]", "alpha testing": "[]", "opportunity study": "[]", "e-mail": "[]", "carrier": "[]", "transform-centered design": "[]", "global variable": "[]", "parametric estimating": "[]", "innovation waste": "[{\"term\": \"innovation waste\", \"definition\": \"The lost opportunity to create an innovative solution. Frequently\\u00a0occurs when a prescribed solution is provided with a product backlog item.\"}]", "residual risk": "[]", "reuse sponsor": "[]", "information item": "[]", "weighted shortest job first": "[{\"term\": \"weighted shortest job first (WSJF)\", \"definition\": \"WSJF is an economically optimal algorithm for scheduling\\u00a0work in an environment where both the cost of delay and the duration vary\\u00a0among the work items. See also cost of delay.\"}]", "cluster template": "[]", "gadget": "[]", "file type referenced": "[]", "violation": "[]", "independent verification and validation": "[]", "software package": "[]", "channel capacity": "[]", "voice of the customer": "[]", "user state": "[]", "semantic agreement": "[]", "macro generating program": "[]", "intelligent terminal": "[]", "testing task iteration": "[]", "product backlog refinement": "[{\"term\": \"product backlog refinement\", \"definition\": \"Product backlog refinement refers to\\u00a0the activities of writing and refining, estimating, and\\u00a0prioritizing product backlog items. Synonymous with\\u00a0product backlog grooming.\"}]", "fault isolation": "[]", "nondestructive read": "[]", "transactional function": "[]", "computer-aided design": "[]", "data processing system": "[]", "Gantt chart": "[]", "microcode": "[]", "design to cost": "[]", "macro library": "[]", "white box": "[]", "value range constraint": "[]", "build engine": "[]", "usability testing": "[]", "just in time": "[{\"term\": \"just in time (JIT)\", \"definition\": \"A characteristic of a process whereby the assets or activities of a\\u00a0work stream become available or occur just as they are needed.\"}]", "accuracy of measurement": "[]", "access routine": "[]", "internal quality": "[]", "function point count": "[]", "methodology element": "[]", "collection property": "[]", "transfer file": "[]", "local customization": "[]", "application area level": "[]", "portfolio management": "[{\"term\": \"portfolio planning\", \"definition\": \"An activity for determining which products (or projects) to work\\u00a0on, in which order, and for how long. Sometimes referred to as portfolio management. Want to see a picture?\"}]", "qualification requirement": "[]", "software release management": "[]", "system follow-up": "[]", "tailoring": "[]", "triggers": "[]", "computer-based software system": "[]", "analysis model": "[]", "transaction file": "[]", "design methodology": "[]", "box": "[{\"term\": \"timebox\", \"definition\": \"A fixed-length period of time during which an activity is performed. In\\u00a0Scrum, sprints are timeboxed iterations where a team works at a sustainable pace to\\u00a0complete a chosen, WIP-limited set of work. See also sprint, timeboxing\"}]", "abstract data type": "[]", "product vision": "[{\"term\": \"product vision\", \"definition\": \"A brief statement of the desired future state that would be achieved by\\u00a0developing and deploying a product. A good vision should be simple to state and provide\\u00a0a coherent direction to the people who are asked to realize it. See also envisioning.\"}]", "relocate": "[]", "transparency": "[{\"term\": \"transparency\", \"definition\": \"One of the three pillars of empirical process control; open access to the\\u00a0unbiased information required for inspection and adaptation. See also adaptation,\\u00a0empirical process control, inspection.\"}]", "integer type": "[]", "graph": "[{\"term\": \"burnup chart\", \"definition\": \"A graph that shows the progress of work toward a goal line associated\\u00a0with a value on the vertical axis. As work is completed over time (the horizontal axis),\\u00a0the progress line moves up (burns up) to be nearer to the goal line. We can show projected\\u00a0outcomes on burnup charts by calculating a trend line to see when work might\\u00a0be completed. Contrast with burndown chart.\"}]", "application boundary": "[]", "design constraint": "[]", "statistical process control": "[]", "relationship instance": "[]", "dependency build": "[]", "entrance": "[]", "termination construct": "[]", "integrated team": "[]", "code generator": "[]", "active interconnection": "[]", "F-profile": "[]", "system architecture": "[]", "strong typing": "[]", "successor activity": "[{\"term\": \"activity\", \"definition\": \"1. A Scrum practice that involves taking action or performing a process, for\\u00a0example, sprint-planning activity, daily scrum activity, sprint review activity, and\\u00a0sprint retrospective activity. 2. In a general sense, the work performed by the Scrum\\u00a0team members such as writing code, performing tests, creating estimates, and so on.\\u00a0See also practice.\"}]", "value map": "[]", "footer": "[]", "interoperability testing": "[]", "assessment input": "[]", "statement of work": "[]", "implementation requirement": "[]", "software test incident": "[]", "indicative function point count": "[]", "Extreme Programming": "[{\"term\": \"Extreme Programming (XP)\", \"definition\": \"1. A software development methodology that is intended to improve software quality and responsiveness to changing customer requirements (source Wikipedia). 2. An agile development approach that is complementary\\u00a0to Scrum. Extreme Programming specifies important technical practices that development\\u00a0teams use to manage the flow of task-level work during sprint execution. See\\u00a0also agile.\"}]", "provisional assessor": "[]", "metric value": "[]", "port-to-port time": "[]", "single-step execution": "[]", "monitoring": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "risk management process": "[]", "scrum sprint": "[{\"term\": \"sprint execution\", \"definition\": \"The period of time during which the task-level work is performed by the development team to complete the features committed to during sprint planning. See also sprint planning.\"}]", "modular": "[]", "selective construct": "[]", "quality factor value": "[]", "policy": "[{\"term\": \"CSPO\", \"definition\": \"See Certified Scrum Product Owner.\"}]", "user-story-writing workshop": "[{\"term\": \"user-story-writing workshop\", \"definition\": \"A workshop lasting from a few hours to a few days\\u00a0where a diverse team of participants collectively brainstorms desired business value\\u00a0and creates user story placeholders for what the product or service is supposed to do.\\u00a0See also user story.\"}]", "counting rule": "[]", "service": "[{\"term\": \"work in process (WIP)\", \"definition\": \"Work that has entered the development process but is not yet\\u00a0finished and available to a customer or user. Refers to all assets or work products of\\u00a0a product or service that are currently being worked on or waiting in a queue to be\\u00a0worked on.\"}]", "life cycle": "[{\"term\": \"lifecycle profits\", \"definition\": \"1. The total profit potential for a product over its lifetime. 2. In the\\u00a0case of portfolio planning, the total profit potential of the entire portfolio rather than\\u00a0a single product.\"}]", "box number": "[]", "data bank": "[]", "product owner proxy": "[{\"term\": \"product owner proxy\", \"definition\": \"A person enlisted by the product owner to act on his behalf in particular situations. See also product owner.\"}]", "collect requirements": "[]", "garbage collection": "[]", "certification property": "[]", "subsystem": "[]", "software design": "[{\"term\": \"design pattern\", \"definition\": \"A general repeatable or reusable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations. (derived from Wikipedia)\"}]", "program status word": "[]", "traceability matrix": "[]", "qualification": "[]", "programming in pairs": "[]", "software configuration management": "[]", "page": "[]", "effective address": "[]", "viewpoint": "[]", "data flow graph": "[]", "kaizen": "[{\"term\": \"last responsible moment (LRM)\", \"definition\": \"A strategy of not making a premature decision but\\u00a0instead delaying commitment and keeping important and irreversible decisions open\\u00a0until the cost of not making a decision becomes greater than the cost of making a\\u00a0decision.\"}]", "incomplete cluster": "[]", "assembly language": "[]", "monadic selective construct": "[]", "known technical debt": "[{\"term\": \"known technical debt\", \"definition\": \"A status category for technical debt that represents the debt\\u00a0that is known to the development team and has been made visible for future consideration.\\u00a0Contrast with happened-upon technical debt, targeted technical debt. See also\\u00a0technical debt.\"}]", "location facility": "[]", "multiple-address instruction": "[]", "failure rate": "[]", "sprintable story": "[{\"term\": \"sprintable story\", \"definition\": \"See implementable story.\"}]", "project area configuration": "[]", "operational scenario": "[]", "timing diagram": "[]", "quality factor": "[]", "wizard": "[]", "common ancestor constraint": "[]", "sort": "[]", "reversible execution": "[]", "layout chart": "[]", "nonfunctional requirement": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "pass": "[{\"term\": \"test-driven development (TDD)\", \"definition\": \"1. An evolutionary approach to development based\\u00a0on writing a failing automated test before the functional code that makes the test\\u00a0pass. Once the code is written to pass the test, the cycle is then repeated, including\\u00a0refactoring the existing code to ensure a coherent cross-functional design. The goal\\u00a0of test-driven development is specification and not validation\\u2014to think through a design before code is written, to create clean code that always works. 2. An example of\\u00a0test-first development. See also refactoring, technical practices, test-first development.\"}]", "mixed mode": "[]", "nanocode": "[]", "class-level responsibility": "[]", "program flowchart": "[]", "limited entry table": "[]", "security authority": "[]", "micro code": "[]", "interrupt service routine": "[]", "plan risk management": "[{\"term\": \"risk\", \"definition\": \"1. The likelihood that an event will be accompanied by undesirable consequences.\\u00a0Risk is measured by both the probability of the event and the seriousness of\\u00a0the consequences. 2. Any uncertainty that is expected to have a negative outcome for\\u00a0the activity. See also uncertainty.\"}]", "X federation": "[]", "container interface": "[]", "breakpoint": "[]", "deactivation": "[]", "business-it alignment": "[]", "trailing decision": "[]", "modularization": "[]", "manage stakeholder expectations": "[]", "T-shaped skills": "[{\"term\": \"T-shaped skills\", \"definition\": \"A metaphor used to describe a person with deep vertical skills in a\\u00a0specialized area (such as UX design) as well as broad but not necessarily very deep\\u00a0skills in other relevant areas (such as testing and documentation). Team members\\u00a0with T-shaped skills better enable swarming behavior. See also swarming.\"}]", "programming system": "[]", "privileged instruction": "[]", "rating interval": "[]", "cost performance index": "[]", "definitive master version": "[]", "classification process": "[]", "error message": "[]", "devop": "[]", "minimum tasks": "[]", "agile methods": "[]", "evaluation records": "[]", "interactive language": "[]", "OAuth": "[]", "local change": "[]", "single-level encoding": "[]", "source language": "[]", "system-of-interest": "[]", "maintenance rate": "[]", "straightline coding": "[]", "control breakpoint": "[]", "instruction counter": "[{\"term\": \"WIP\", \"definition\": \"See work in process.\"}]", "schedule": "[{\"term\": \"release planning\", \"definition\": \"Longer-term planning that answers questions like \\u201cWhen will we\\u00a0be done?\\u201d or \\u201cWhich features can I get by the end of the year?\\u201d or \\u201cHow much will\\u00a0this cost?\\u201d Release planning must balance customer value and overall quality against\\u00a0the constraints of scope, schedule, and budget. See also release plan.\"}]", "reading reference": "[]", "meta-attribute": "[]", "channel": "[]", "procurement management plan": "[]", "parallel classes": "[]", "change dump": "[]", "design fault": "[{\"term\": \"unavoidable technical debt\", \"definition\": \"A form of technical debt that is usually unpredictable\\u00a0and unpreventable and accrues through no fault of the team building the product.\\u00a0Contrast with naive technical debt, strategic technical debt. See also technical debt.\"}]", "magic number": "[]", "dashboard": "[]", "process assessment": "[]", "the three cs": "[]", "document": "[]", "protection exception": "[]", "backward pass": "[]", "multiple-hit decision table": "[]", "transformation model": "[]", "condition": "[{\"term\": \"conditions of satisfaction\", \"definition\": \"The conditions under which a product owner would be\\u00a0satisfied that a product backlog item is done. Conditions of satisfaction are acceptance\\u00a0criteria that clarify the desired behavior. See also acceptance criteria.\"}]", "assembler": "[]", "test item transmittal report": "[]", "collection class": "[]", "Chapin chart": "[]", "cluster checkpoint": "[]", "complete table": "[]", "calculator": "[]", "instance": "[{\"term\": \"persona\", \"definition\": \"1. A user archetype, synthesized from the ethnographic data of real users,\\u00a0that helps guide decisions about product features, navigation, interactions, and visual\\u00a0design. 2. A fictitious person that is the prototypical instance of a particular user role.\\u00a0See also user story.\"}]", "functional size": "[{\"term\": \"fibonacci sequence\", \"definition\": \"A specific sequence of numbers (1, 1, 2, 3, 5, 8, 13, 21, 34\\u2026) in which the next number in the sequence is derived by adding together the previous two numbers in the sequence. A modified version of the Fibonacci Sequence is one common sequences used\\u00a0when performing relative size estimations of product backlog items. Another sequence that some teams use is powers of two (e.g., 1, 2, 4, 8, 16, 32...) See Planning Poker.\"}]", "physical configuration audit": "[]", "copyright": "[]", "endeavor element": "[]", "utilization bound theorem": "[]", "shadow class": "[]", "basic engineering object": "[]", "planning poker": "[{\"term\": \"Planning Poker\", \"definition\": \"A consensus-based technique for the relative sizing of product backlog\\u00a0items. Read the blog posting \\\"Relative Size Estimating\\u2014It\\u2019s Just an Exercise in Binning!\\\" for an example.\"}]", "information": "[{\"term\": \"transparency\", \"definition\": \"One of the three pillars of empirical process control; open access to the\\u00a0unbiased information required for inspection and adaptation. See also adaptation,\\u00a0empirical process control, inspection.\"}]", "product backlog": "[{\"term\": \"product backlog\", \"definition\": \"A prioritized inventory of yet-to-be-worked-on product backlog\\u00a0items. See also prioritized list,\\u00a0product backlog item.\"}]", "solicitation package": "[]", "overhead time": "[]", "meta-model": "[]", "menu-driven": "[]", "description standard": "[]", "virtual": "[{\"term\": \"silent grouping\", \"definition\": \"A facilitation technique for getting people to group related items\\u00a0without talking, relying only on the individual placement and movement of items\\u00a0(typically cards or sticky notes) as a means of communicating and coordinating\\u00a0among the participants. A technique frequently used during the sprint retrospective\\u00a0activity. See also sprint retrospective.\"}]", "statistically managed process": "[]", "output arc": "[]", "asset": "[{\"term\": \"capital expenditure (CapEx)\", \"definition\": \"1. Funds used by a company to acquire or upgrade\\u00a0physical assets\\u00a0such as property, industrial buildings or equipment. It is often used to undertake new projects or investments by the firm.\\u00a0This type of outlay is also made by companies to maintain or increase the\\u00a0scope\\u00a0of their operations (investorpedia). 2. Capitalizing an expense means you don't offset your revenue against the expense in the\\u00a0year you purchased or built it. Instead you list the purchase as an asset on your balance sheet and then each year (through depreciation) you offset revenue on your income statement against that year\\u2019s depreciated amount. Contrast with operational expense.\"}]", "program mutation": "[]", "built-in class": "[]", "resource management": "[]", "certification process": "[]", "product measures": "[]", "calling sequence": "[]", "taskboard": "[{\"term\": \"task board\", \"definition\": \"An information radiator used during sprint execution to communicate\\u00a0the progress and flow of task-level work within a sprint. See also information radiator,\\u00a0task.\"}]", "mutable class": "[]", "project calendar": "[]", "software feature": "[]", "service desk": "[]", "activity identifier": "[]", "S-curve": "[]", "notation standard": "[]", "customer test": "[]", "repository workspace": "[]", "work effort": "[]", "suspend": "[]", "supervisory program": "[]", "declarative language": "[]", "if-then-else": "[]", "language mapping": "[]", "application administration function": "[]", "modifiable": "[]", "algorithm": "[{\"term\": \"weighted shortest job first (WSJF)\", \"definition\": \"WSJF is an economically optimal algorithm for scheduling\\u00a0work in an environment where both the cost of delay and the duration vary\\u00a0among the work items. See also cost of delay.\"}]", "issue": "[{\"term\": \"impediment\", \"definition\": \"A hindrance or obstruction to doing something. Frequently used to\\u00a0describe some issue or blocker that is preventing a team or organization from performing\\u00a0Scrum in an effective way.\"}]", "static analysis": "[]", "assignment": "[]", "catastrophic failure": "[]", "documentation plan": "[]", "quality management": "[]", "return value": "[]", "division of standards": "[]", "system documentation": "[]", "page reference": "[]", "absolute address": "[]", "design pattern": "[{\"term\": \"design pattern\", \"definition\": \"A general repeatable or reusable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations. (derived from Wikipedia)\"}]", "Java Database Connectivity": "[]", "human resource plan": "[]", "control data": "[]", "commit window": "[]", "critical range": "[]", "end-user": "[{\"term\": \"technical stories\", \"definition\": \"A \\u201cuser\\u201d story (product backlog item) that delivers no perceived\\u00a0end-user value but does deliver important architecture or infrastructure needed to\\u00a0deliver future user value. See also user story.\"}]", "compression": "[]", "list function": "[]", "algorithmic list processing language": "[]", "information item content": "[]", "multilevel address": "[]", "pipeline": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "sequence activities": "[]", "walk-through": "[]", "source code": "[]", "perform quality assurance": "[]", "purpose statement": "[]", "deviation": "[]", "iteration burndown chart": "[]", "version description document": "[]", "sprint execution": "[{\"term\": \"sprint execution\", \"definition\": \"The period of time during which the task-level work is performed by the development team to complete the features committed to during sprint planning. See also sprint planning.\"}]", "control Information": "[]", "total correctness": "[]", "information radiator": "[{\"term\": \"information radiator\", \"definition\": \"A visual display that presents up-to-date, sufficiently detailed,\\u00a0and important information to passersby in an easy, self-interpretable format.\"}]", "one-plus-one address address instruction": "[]", "workspace": "[]", "program epics": "[]", "computing center": "[]", "epic": "[{\"term\": \"epic\", \"definition\": \"A large user story, perhaps a few too many months in size, that can span an entire\\u00a0release or multiple releases. Epics are useful as placeholders for large requirements.\\u00a0Epics are progressively refined into a set of smaller user stories at the appropriate\\u00a0time. See also feature, progressive refinement, theme, user story.\"}]", "static analysis demonstration": "[]", "Government-Off-The-Shelf": "[]", "software project life cycle model": "[]", "risk transfer": "[]", "detailed design phase": "[]", "command language": "[]", "owner": "[{\"term\": \"product owner\", \"definition\": \"The empowered central point of product leadership. One of the three\\u00a0roles on a Scrum team; the single voice of the stakeholder community to the Scrum\\u00a0team. The product owner defines what to do and in what order to do it. See also\\u00a0Scrum team, ScrumMaster, development team.\"}]", "office automation": "[]", "marginal economics": "[{\"term\": \"marginal economics\", \"definition\": \"Determining if spending the next chunk of money is justified by the return that investment would generate. When applying margin economics, we consider\\u00a0all work that has been performed on the product up\\u00a0to the decision point as a \\u201csunk cost\\u201d\\u00a0and therefore don't consider the sunk cost when determining whether to spend the next chunk of money. See portfolio planning.\"}]", "process description": "[]", "dimension build": "[]", "thrashing": "[]", "portlet": "[]", "computer system": "[]", "subordinate web site": "[]", "generation language": "[]", "manufacture": "[]", "mean time to repair": "[]", "team member": "[{\"term\": \"remote team member\", \"definition\": \"A member of a team who is located physically remote from a company office. If a team has one or more remote team members, then that team is a distributed team. See also co-located team, distributed team.\"}]", "information need": "[]", "configuration provider": "[]", "meta-scrum": "[]", "emulated user": "[]", "control-flow trace": "[]", "resource calendar": "[]", "scope baseline": "[]", "allocated baseline": "[]", "budgets": "[]", "invariant schema": "[]", "foreground": "[]", "imperative construct": "[]", "adaptation parameter": "[]", "data analysis": "[]", "information hiding": "[]", "agile release train": "[{\"term\": \"release train\", \"definition\": \"1. An approach to aligning the vision, planning, and interdependencies of\\u00a0many teams by providing cross-team synchronization based on a common cadence.\\u00a0A release train focuses on fast, flexible flow at the level of a larger product. 2. In the Scaled Agile Framework (SAFe), an Agile Release Train is a long-lived, self-organizing collection of agile teams that plans, commits, and executes together. Agile release trains are organized around the enterprise\\u2019s significant value streams (source, Scaled Agile Framework).\\u00a0See also\\u00a0scrum of scrums.\"}]", "associative entity type": "[]", "test estimation": "[]", "termination submit": "[]", "process action team": "[{\"term\": \"plan-driven process\", \"definition\": \"A style of development that attempts to plan for and anticipate\\u00a0up front all of the features a user might want in the end product and to determine\\u00a0how best to build those features. The work plan is based on execution of a sequential\\u00a0set of work-specific phases. Synonymous with anticipatory process, predictive process,\\u00a0prescriptive process, sequential process, traditional development process, waterfall\\u00a0process.\"}]", "program library": "[]", "running time": "[]", "interconnection perspective": "[]", "chief programmer team": "[]", "software diversity": "[]", "state transition diagram": "[]", "priority ceiling protocol": "[]", "server-side": "[]", "accuracy": "[{\"term\": \"accuracy\", \"definition\": \"How close an estimate is to the actual value\\u2014the proximity of the measure\\u00a0to its true value. For example, estimating that the product will ship in October 2015\\u00a0is accurate if the product ships any day during October 2015. Contrast with precision.\"}]", "chaotic domain": "[{\"term\": \"chaotic domain\", \"definition\": \"1. A situation that requires a rapid response. We are in a crisis and\\u00a0need to act immediately to prevent further harm and reestablish at least some order.\\u00a02. One of the domains in the Cynefin framework. See also Cynefin. Contrast with\\u00a0complex domain, complicated domain, disorder domain, simple domain.\"}]", "mixed type": "[]", "performance requirement": "[]", "functional product": "[]", "adoption process": "[]", "interrupt latency": "[]", "zFile": "[]", "performing organization": "[]", "group": "[{\"term\": \"silent grouping\", \"definition\": \"A facilitation technique for getting people to group related items\\u00a0without talking, relying only on the individual placement and movement of items\\u00a0(typically cards or sticky notes) as a means of communicating and coordinating\\u00a0among the participants. A technique frequently used during the sprint retrospective\\u00a0activity. See also sprint retrospective.\"}]", "Government Off The Shelf": "[]", "metric": "[]", "control task": "[]", "curriculum standard": "[]", "field of application": "[]", "operable": "[]", "outgoing change set": "[]", "life cycle processes": "[]", "computer-aided software engineering": "[]", "exporter": "[]", "variance": "[{\"term\": \"defined process\", \"definition\": \"A process with a well-defined set of steps. Given the same inputs, a\\u00a0defined process should produce the same output every time (within a defined variance\\u00a0range). Contrast with empirical process control.\"}]", "compile-and-go": "[]", "applicability to a functional domain": "[]", "arrow": "[]", "arrow role": "[]", "Monte Carlo simulation": "[]", "computer generation": "[]", "personas": "[{\"term\": \"lean ux\", \"definition\": \"A practice that integrates design thinking, core agile principles, and lean startup principles\\u00a0that is used by a cross-functional team of designers, developers, and product managers to bring the true nature of the work to light\\u00a0faster, with less emphasis on deliverables and greater focus on the\\u00a0actual experience\\u00a0being designed. Lean UX is based on the following core principles:\"}]", "effective full license": "[]", "mirror site": "[]", "exit criteria": "[{\"term\": \"acceptance criteria\", \"definition\": \"1. The external quality characteristics specified by the product owner from a business or stakeholder perspective. Acceptance criteria define desired behavior and are used to determine whether a product backlog item has been successfully developed. 2. The exit criteria that a component or a system must satisfy in order to be accepted by a user, customer, or other authorized entity (IEEE 610).\"}]", "executive program": "[]", "application manager": "[]", "security accreditation": "[]", "output argument": "[]", "Identity Management": "[]", "natural key": "[]", "robotics": "[]", "design phase": "[]", "timebox": "[{\"term\": \"timeboxing\", \"definition\": \"A time management technique that helps organize the performance of\\u00a0work and manage scope. See also timebox.\"}]", "access facility": "[]", "unwind": "[]", "reusable product": "[]", "linkage": "[]", "prioritized list": "[{\"term\": \"prioritized list\", \"definition\": \"A list or sequence of items to be attended to, arranged in order of their relative importance. The items in the product backlog are a prioritized list. See also product backlog.\"}]", "active redundancy": "[]", "non-terminal symbol": "[]", "process metric": "[]", "content store": "[]", "computer security": "[]", "quality control": "[]", "memory compaction": "[]", "product engineering": "[]", "initiating processes": "[]", "digraph": "[]", "paired programming": "[]", "theme": "[{\"term\": \"theme\", \"definition\": \"A collection of related user stories. A theme provides a convenient way to\\u00a0indicate that a set of stories have something in common, such as being in the same\\u00a0functional area. See also epic, user story.\"}]", "fragile": "[{\"term\": \"fragile\", \"definition\": \"1. A term used to define things that are harmed by disorder or randomness. 2. The opposite of antifragile. 3. When you have more to lose than gain in the presence of uncertainty (negative asymmetric payoff). 4. Vulnerability to the volatility of the\\u00a0things that affect it. (Nassim Taleb).\\u00a0Contrast with antifragile, robust.\"}]", "data repository": "[]", "dynamic storage allocation": "[]", "enterprise viewpoint": "[]", "quality metric": "[]", "chickens": "[{\"term\": \"chickens\", \"definition\": \"A metaphor used by some Scrum teams to indicate that people are invested\\u00a0in the goal of the Scrum team, but at a level of involvement (not accountable) rather\\u00a0than commitment. Best used to refer to people outside of the Scrum team. Derived\\u00a0from an old joke about a chicken and a pig: \\u201cIn a ham-and-eggs breakfast, the chicken\\u00a0is involved, but the pig is committed.\\\" Contrast with pigs.\"}]", "risk exposure": "[]", "inverse engineering": "[]", "selective trace": "[]", "machine-independent": "[]", "diagram feature": "[]", "modified-off-the-shelf": "[]", "tunneled arrow": "[]", "logical trace": "[]", "rule": "[{\"term\": \"rule\", \"definition\": \"A common practice or generally reliable method of action in a particular situation.\\u00a0A rule may be broken when the pragmatics of a situation dictate that a different\\u00a0course of action should be pursued. The Scrum framework includes rules. See also\\u00a0essential Scrum, Scrum framework.\"}]", "contingency reserve": "[]", "escaped": "[{\"term\": \"DEEP\", \"definition\": \"An acronym coined by Roman Pichler and Mike Cohn for remembering a set\\u00a0of criteria used to evaluate the quality of a product backlog. The criteria are Detailed\\u00a0appropriately, Emergent, Estimated, and Prioritized. See also product backlog.\"}]", "antipattern": "[]", "precedence diagramming method": "[]", "entry": "[{\"term\": \"user-story-writing workshop\", \"definition\": \"A workshop lasting from a few hours to a few days\\u00a0where a diverse team of participants collectively brainstorms desired business value\\u00a0and creates user story placeholders for what the product or service is supposed to do.\\u00a0See also user story.\"}]", "buffer": "[]", "concept phase": "[]", "design review": "[]", "software requirement": "[]", "domain definition": "[{\"term\": \"simple domain\", \"definition\": \"1. A situation in which everyone can see cause and effect. Often the\\u00a0right answer is obvious and undisputed. 2. One of the domains in the Cynefin framework.\\u00a0See also Cynefin. Contrast with chaotic domain, complex domain, complicated\\u00a0domain, disorder domain.\"}]", "project risk profile": "[]", "requested change": "[]", "random failure": "[]", "design strategy": "[]", "visual display terminal": "[]", "operation exception": "[]", "migration": "[]", "remote batch entry": "[]", "sign-on": "[]", "standby redundancy": "[]", "four-plus-one address instruction": "[]", "software testing": "[{\"term\": \"regression testing\", \"definition\": \"A type of\\u00a0software testing\\u00a0that verifies that previously developed and tested software still performs correctly even after the software itself was changed or after other software in the same package or configuration has been changed. Basically, testing to determine that previously working software is still working in the presence\\u00a0of recently made changes (e.g., new features added, defects repaired, or code refactoring).\"}]", "burnup chart": "[{\"term\": \"burnup chart\", \"definition\": \"A graph that shows the progress of work toward a goal line associated\\u00a0with a value on the vertical axis. As work is completed over time (the horizontal axis),\\u00a0the progress line moves up (burns up) to be nearer to the goal line. We can show projected\\u00a0outcomes on burnup charts by calculating a trend line to see when work might\\u00a0be completed. Contrast with burndown chart.\"}]", "business intelligence": "[]", "presentable": "[]", "factoring": "[{\"term\": \"refactoring\", \"definition\": \"A technique for restructuring an existing body of code by improving/simplifying its internal structure (design) without changing its external behavior.\\u00a0Refactoring is one of the principal techniques for managing technical debt. See also\\u00a0technical debt, technical practices.\"}]", "language binding": "[{\"term\": \"tacit knowledge\", \"definition\": \"Unwritten and unspoken knowledge (including insights, intuitions,\\u00a0and hunches) that is hard, but not impossible, to articulate with formal language.\\u00a0The opposite of explicit or formal knowledge. Sometimes referred to as \\u201cknow-how.\\u201d\"}]", "performance analysis": "[]", "data information": "[]", "managed process": "[]", "summary activity": "[{\"term\": \"activity\", \"definition\": \"1. A Scrum practice that involves taking action or performing a process, for\\u00a0example, sprint-planning activity, daily scrum activity, sprint review activity, and\\u00a0sprint retrospective activity. 2. In a general sense, the work performed by the Scrum\\u00a0team members such as writing code, performing tests, creating estimates, and so on.\\u00a0See also practice.\"}]", "function": "[{\"term\": \"artifact\", \"definition\": \"A tangible by-product produced during product development. The product\\u00a0backlog, sprint backlog, and potentially shippable product increment are examples of\\u00a0Scrum artifacts. See also practice.\"}]", "resolve": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "lessons learned": "[]", "software life cycle": "[]", "no-op": "[]", "preliminary design review": "[]", "burn down chart": "[{\"term\": \"burndown chart\", \"definition\": \"A graph that shows on the vertical axis the quantity of work (in\\u00a0either hours or product backlog item units) remaining over time, which is shown on\\u00a0the horizontal axis. Because less and less work should remain over time, the general\\u00a0trend in the graph is to burn down to a point where no work remains. We can show\\u00a0projected outcomes on burndown charts by calculating a trend line to see when work\\u00a0might be completed. Contrast with burnup chart.\"}]", "technical standard": "[]", "measurement user": "[]", "subclass responsibility": "[]", "static binding": "[]", "reused source statement": "[]", "run": "[{\"term\": \"minimum viable product (MVP)\", \"definition\": \"1. A product that has just those features that allow\\u00a0the product to be deployed, and no more. 2. The simplest experiment you can run to validate the current most-important customer hypothesis. Or as the Lean Startup community says, the simplest thing you can do, with the least effort, to collect the maximum amount of validated learning about the customer. Synonomous with MVP.\\u00a0\"}]", "proof": "[{\"term\": \"exploration\", \"definition\": \"The act of acquiring or buying knowledge by performing some activity\\u00a0such as building a prototype, creating a proof of concept, performing a study, or conducting\\u00a0an experiment. Contrast with exploitation.\"}]", "operator's manual": "[]", "automate": "[]", "jump": "[]", "predictive process": "[{\"term\": \"predictive process\", \"definition\": \"See plan-driven process.\"}]", "innovation and planning": "[]", "reference dimension": "[]", "method standard": "[]", "testing description": "[]", "physical metadata layer": "[]", "beneficiary": "[]", "principle of least astonishment": "[{\"term\": \"principle of least astonishment\", \"definition\": \"Acting or developing work products in a way that is\\u00a0least likely to startle those around you. For example,\\u00a0if you develop a user interface and a customer using the product says \\\"Well, I would never have guessed that doing that was the correct thing to do!\\\" then you likely have failed the principle of least astonishment.\"}]", "consistent": "[{\"term\": \"cadence\", \"definition\": \"A regular, predictable rhythm or heartbeat. Sprints of consistent duration establish a cadence for a development effort. See also synchronization.\"}]", "bit": "[]", "relocatable": "[]", "meta-": "[]", "figurative constant": "[]", "arrow meaning": "[]", "scalar": "[]", "information content": "[]", "plan communications": "[]", "configuration item form": "[]", "formal requirements language": "[]", "disassembler": "[]", "offline": "[]", "grooming": "[{\"term\": \"grooming\", \"definition\": \"See product backlog grooming.\"}]", "structured walkthrough": "[]", "document control": "[]", "critical value": "[]", "agreement": "[{\"term\": \"values\", \"definition\": \"1. Those things that we hold dear or precious. 2. The foundation of a shared\\u00a0operating agreement among members of a team. Core Scrum values include honesty,\\u00a0openness, courage, respect, focus, trust, empowerment, and collaboration.\"}]", "signature": "[{\"term\": \"plan-driven process\", \"definition\": \"A style of development that attempts to plan for and anticipate\\u00a0up front all of the features a user might want in the end product and to determine\\u00a0how best to build those features. The work plan is based on execution of a sequential\\u00a0set of work-specific phases. Synonymous with anticipatory process, predictive process,\\u00a0prescriptive process, sequential process, traditional development process, waterfall\\u00a0process.\"}]", "project health": "[]", "overriding property": "[]", "annotate": "[]", "real-time": "[]", "bubble chart": "[]", "formal programming languages and mathematical languages": "[]", "immediate effective instruction": "[]", "certification artifact": "[]", "mean execution time": "[]", "product analysis": "[{\"term\": \"all-at-once product development\", \"definition\": \"Doing all types of work (for example, analysis,\\u00a0design, coding, integrating, and testing) opportunistically within a single iteration.\"}]", "ancestral box": "[]", "database design specification": "[]", "material": "[]", "text editor": "[]", "timing analyzer": "[]", "independent": "[{\"term\": \"INVEST\", \"definition\": \"An acronym coined by Bill Wake for remembering a set of criteria used to\\u00a0evaluate the quality of user stories. The criteria are Independent, Negotiable, Valuable,\\u00a0Estimatable, Sized correctly (small), and Testable. See also user story.\"}]", "complexity points": "[]", "conditional branch": "[]", "computer crime": "[]", "powertype": "[]", "test readiness review": "[]", "trade-off analysis": "[]", "defect removal": "[]", "work performance information": "[]", "differential dump": "[]", "function name": "[]", "generation": "[]", "agile": "[{\"term\": \"agile\", \"definition\": \"1. A specific set of values and principles, as expressed in the Agile Manifesto\\u00a0(Beck et al. 2001). 2. An umbrella term used for a group of related approaches to software\\u00a0development based on iterative and incremental development. Scrum is an agile\\u00a0approach to development. See also Extreme Programming, Kanban, Scrum.\"}]", "protected": "[]", "code review": "[{\"term\": \"component team\", \"definition\": \"1. A team that focuses on the creation of one or more components of\\u00a0a larger product that a customer would purchase. Component teams create assets or\\u00a0components that are then reused by other teams to assemble customer-valuable solutions. 2. Team that is cross-functional (multi-disciplinary), single component focused.\\u00a0Contrast with feature team.\"}]", "transactional function type": "[]", "timeboxing": "[{\"term\": \"timeboxing\", \"definition\": \"A time management technique that helps organize the performance of\\u00a0work and manage scope. See also timebox.\"}]", "system testing": "[]", "dump": "[]", "event trace": "[]", "stable branch": "[]", "dimension mapping category": "[]", "action entry": "[]", "language processor": "[]", "event synchronization": "[]", "kernel": "[]", "project planning": "[]", "cast": "[{\"term\": \"product backlog item (PBI)\", \"definition\": \"1. An item such as a feature, defect, or (occasionally)\\u00a0technical work that is valuable from the product owner\\u2019s perspective. 2. An item in\\u00a0the product backlog. See also product backlog.\"}]", "risk management plan": "[]", "decision": "[{\"term\": \"last responsible moment (LRM)\", \"definition\": \"A strategy of not making a premature decision but\\u00a0instead delaying commitment and keeping important and irreversible decisions open\\u00a0until the cost of not making a decision becomes greater than the cost of making a\\u00a0decision.\"}]", "test environment": "[{\"term\": \"test-first development\", \"definition\": \"A technical practice where the tests are written before the\\u00a0development is performed. An example is test-driven development. See also technical\\u00a0practices, test-driven development.\"}]", "schedule based planning": "[]", "documentation development staff": "[]", "program listing": "[]", "maintainability": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "output product": "[{\"term\": \"in-process product\", \"definition\": \"A product that is currently under development, already live in\\u00a0production, or currently being sold. See also portfolio planning.\"}]", "fifth-generation language": "[]", "overhead operation": "[]", "state diagram": "[]", "job": "[{\"term\": \"weighted shortest job first (WSJF)\", \"definition\": \"WSJF is an economically optimal algorithm for scheduling\\u00a0work in an environment where both the cost of delay and the duration vary\\u00a0among the work items. See also cost of delay.\"}]", "addressing exception": "[]", "detailed design specification": "[{\"term\": \"test-driven development (TDD)\", \"definition\": \"1. An evolutionary approach to development based\\u00a0on writing a failing automated test before the functional code that makes the test\\u00a0pass. Once the code is written to pass the test, the cycle is then repeated, including\\u00a0refactoring the existing code to ensure a coherent cross-functional design. The goal\\u00a0of test-driven development is specification and not validation\\u2014to think through a design before code is written, to create clean code that always works. 2. An example of\\u00a0test-first development. See also refactoring, technical practices, test-first development.\"}]", "actual duration": "[]", "documentation": "[{\"term\": \"batch size\", \"definition\": \"The cardinality of a set of items to be processed at some future step. See\\u00a0also work in process.\"}]", "level of performance": "[]", "rating level": "[]", "test suite execution record": "[]", "data medium": "[]", "time and material contract": "[]", "operational data store": "[]", "cohesion": "[]", "operation code": "[]", "corporate executive level": "[]", "data structure-centered design": "[]", "product management": "[{\"term\": \"lean ux\", \"definition\": \"A practice that integrates design thinking, core agile principles, and lean startup principles\\u00a0that is used by a cross-functional team of designers, developers, and product managers to bring the true nature of the work to light\\u00a0faster, with less emphasis on deliverables and greater focus on the\\u00a0actual experience\\u00a0being designed. Lean UX is based on the following core principles:\"}]", "immediate control": "[]", "process asset library": "[]", "performance reports": "[]", "behavior driven development": "[]", "microprocessor": "[]", "definition is advanced as a proposed standard": "[]", "optional task": "[]", "foreign key": "[]", "hierarchy chart": "[]", "Administer Procurements": "[]", "control language": "[]", "interface role": "[]", "technical stories": "[{\"term\": \"technical stories\", \"definition\": \"A \\u201cuser\\u201d story (product backlog item) that delivers no perceived\\u00a0end-user value but does deliver important architecture or infrastructure needed to\\u00a0deliver future user value. See also user story.\"}]", "symbolic execution": "[]", "technical complexity adjustment": "[]", "microchip": "[]", "reserved word": "[]", "relative size measure": "[{\"term\": \"relative size measure\", \"definition\": \"A means of expressing the overall size of an item where the\\u00a0absolute value is not considered, but the relative size of an item compared to other\\u00a0items is considered. For example, an item of size 2 is half the size of an item of size 4,\\u00a0but we have no idea how big an item of size 2 or 4 is in some absolute sense. See also\\u00a0ideal day, story point.\"}]", "development team": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "entity": "[{\"term\": \"acceptance test\", \"definition\": \"1. The testing carried out to verify that the acceptance criteria have been met. 2. A test that defines the business value each product backlog item must deliver. It may verify functional requirements or nonfunctional requirements such as performance or reliability. It is used to help guide development (Crispin and Gregory 2009). 3. Formal testing with respect to user needs, requirements, and business processes conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user, customers, or other authorized entity to determine whether or not to accept the system (IEEE 610).\"}]", "source address": "[]", "technical complexity adjustment factors": "[]", "input arrow": "[]", "correctness proof": "[]", "network": "[]", "closed term": "[]", "metamodel": "[]", "system development": "[]", "computer aided software engineering": "[]", "precedence relationship": "[]", "approved modification": "[]", "human-machine interface": "[]", "value engineering": "[]", "perfective maintenance": "[]", "automation": "[{\"term\": \"test automation\", \"definition\": \"The use of special\\u00a0software\\u00a0(separate from the software being tested) to control the execution of tests and the comparison of actual outcomes with predicted outcomes (Wikipedia). Test automation is critical for supporting many other technical practices such as code refactoring, continuous integration, and continuous delivery.\"}]", "contract": "[{\"term\": \"fixed-price contract\", \"definition\": \"A contract between a contractor (e.g., a service provider) and a client that provides for a firm price that is not subject to adjustment based on actual costs incurred by the contractor. This contract type transfers from the client to the contractor all of the cost risk. For the contractor to provide a fixed price, the client would have to specify in great detail up front what the client would like the contractor to do. Doing so would violate a core agile principle \\u2013 specifying up front very detailed information when both parties have the least amount of information is most often not practical. So, as a rule, organizations that have adopted agile should avoid fixed-price contracts.\"}]", "retrospective trace": "[]", "microprogrammed computer": "[]", "path analysis": "[]", "decompile": "[]", "macro-generating program": "[]", "security domain": "[]", "roll out": "[]", "trend analysis": "[]", "dynamic restructuring": "[]", "system flowchart": "[]", "risk management system": "[]", "meta-meta-relationship": "[]", "data flow trace": "[]", "nontechnical requirement": "[]", "communications planning": "[]", "software project": "[]", "generator": "[]", "system library": "[]", "lifecycle": "[{\"term\": \"lifecycle profits\", \"definition\": \"1. The total profit potential for a product over its lifetime. 2. In the\\u00a0case of portfolio planning, the total profit potential of the entire portfolio rather than\\u00a0a single product.\"}]", "command driven": "[]", "search path": "[]", "arrow label": "[]", "intermittent fault": "[]", "program maintenance manual": "[]", "detailed design review": "[]", "transaction cost": "[{\"term\": \"transaction cost\", \"definition\": \"The fixed (overhead cost) and variable costs of executing (doing the work required to realize) the items in a batch of work. One of the two costs in determing the economic batch size in a U-curve optimization. In manufacturing, transaction cost is the cost of sending a batch to the next process.\\u00a0Contrast with holding cost. See also U-curve optimization.\"}]", "risk factor": "[]", "hardware": "[]", "failure mode and effect analysis": "[]", "bill of materials": "[]", "architect": "[]", "artificial intelligence": "[]", "system profile": "[]", "reusable software product": "[]", "simplicity": "[{\"term\": \"product vision\", \"definition\": \"A brief statement of the desired future state that would be achieved by\\u00a0developing and deploying a product. A good vision should be simple to state and provide\\u00a0a coherent direction to the people who are asked to realize it. See also envisioning.\"}]", "parallel run operation": "[]", "control flow trace": "[]", "relational data": "[]", "story point": "[{\"term\": \"story point\", \"definition\": \"A measure of the relative size of product backlog items that takes into\\u00a0account factors such as complexity and physical size. Typically determined by engaging\\u00a0in Planning Poker. See also ideal day, Planning Poker, relative size measure.\"}]", "antifragility": "[{\"term\": \"antifragility\", \"definition\": \"Having the property of being antifragile. See also antifragile.\"}]", "project management knowledge area": "[]", "module testing": "[]", "logical cohesion": "[]", "process improvement project": "[]", "evaluation tool": "[]", "validated learning": "[{\"term\": \"validated learning\", \"definition\": \"A term proposed by Eric Ries to describe the progress made\\u00a0when important assumptions have been confirmed or refuted by subjecting each\\u00a0assumption to one or more customer validation tests. Contrast with assumption.\"}]", "data mart": "[]", "roll back": "[]", "completed change set": "[]", "synthetic address": "[]", "data flow": "[]", "estimate costs": "[]", "net": "[{\"term\": \"outcome measure\", \"definition\": \"Illustrates the meaningful results or the value that is created. Outcome measures\\u00a0quantify the true performance and assess the success of the processes put in place and thus are a better way to gauge the business success. An example outcome measure is net promoter score (NPS). See blog post \\\"Output vs. Outcome\\u2014Measuring Business Success with Agile.\\\" Contrast with output measure.\"}]", "iteration": "[{\"term\": \"iteration\", \"definition\": \"A self-contained development cycle focused on performing all of the work\\u00a0necessary to produce a valuable outcome. See also all-at-once development, sprint.\"}]", "access": "[{\"term\": \"transparency\", \"definition\": \"One of the three pillars of empirical process control; open access to the\\u00a0unbiased information required for inspection and adaptation. See also adaptation,\\u00a0empirical process control, inspection.\"}]", "enhancement request": "[]", "milestone": "[{\"term\": \"cost of delay\", \"definition\": \"The financial cost associated with delaying work or delaying achievement\\u00a0of a milestone. Cost of delay emphasizes the concept that time has a real financial\\u00a0cost, and to make economically sensible trade-offs it is important to know that\\u00a0cost.\"}]", "simple token": "[]", "requirements document": "[]", "portfolio backlog": "[{\"term\": \"portfolio backlog\", \"definition\": \"A backlog composed of products, programs, projects, or high-level epics. See also portfolio planning.\"}]", "change record": "[]", "unambiguous": "[]", "top-down": "[{\"term\": \"self-organization\", \"definition\": \"1. A bottom-up emergent property of a complex adaptive system\\u00a0whereby the organization of the system emerges over time as a response to its environment.\\u00a02. A property of a development team that organizes itself over time, without\\u00a0an external dominating force applying traditional top-down, command-and-control\\u00a0management. 3. Reflects the management philosophy whereby operational decisions\\u00a0are delegated as much as possible to those who have the most detailed knowledge of\\u00a0the consequences and practicalities associated with those decisions. See also complex\\u00a0adaptive system, emergence.\"}]", "linked data": "[{\"term\": \"persona\", \"definition\": \"1. A user archetype, synthesized from the ethnographic data of real users,\\u00a0that helps guide decisions about product features, navigation, interactions, and visual\\u00a0design. 2. A fictitious person that is the prototypical instance of a particular user role.\\u00a0See also user story.\"}]", "internal logical file": "[]", "executing processes": "[]", "recommendation": "[]", "hammock activity": "[]", "won't-have features": "[{\"term\": \"won\\u2019t-have features\", \"definition\": \"The set of features that are specifically declared to not be in the\\u00a0upcoming release. Contrast with must-have features, nice-to-have features.\"}]", "lifecycle tool": "[]", "unit test framework": "[]", "simple design": "[]", "design view": "[]", "upward compression": "[]", "story grooming": "[]", "ordered list": "[{\"term\": \"ordered list\", \"definition\": \"See prioritized list.\"}]", "schedule baseline": "[]", "knowledge base": "[]", "rescue point": "[]", "generalization structure": "[]", "iteration plan": "[]", "derived property": "[]", "code of accounts": "[]", "nonprogrammable terminal": "[]", "interval scale": "[]", "object adapter": "[]", "quality evaluation": "[]", "high-level Petri Net graph": "[]", "feature branch": "[]", "variant": "[]", "fault-tolerant": "[{\"term\": \"unavoidable technical debt\", \"definition\": \"A form of technical debt that is usually unpredictable\\u00a0and unpreventable and accrues through no fault of the team building the product.\\u00a0Contrast with naive technical debt, strategic technical debt. See also technical debt.\"}]", "test driven development": "[{\"term\": \"test-driven development (TDD)\", \"definition\": \"1. An evolutionary approach to development based\\u00a0on writing a failing automated test before the functional code that makes the test\\u00a0pass. Once the code is written to pass the test, the cycle is then repeated, including\\u00a0refactoring the existing code to ensure a coherent cross-functional design. The goal\\u00a0of test-driven development is specification and not validation\\u2014to think through a design before code is written, to create clean code that always works. 2. An example of\\u00a0test-first development. See also refactoring, technical practices, test-first development.\"}]", "job function": "[]", "enterprise architect": "[]", "solution domain": "[]", "historical information": "[]", "direct and manage project execution": "[]", "structured design": "[]", "design standard": "[]", "design requirement": "[]", "testware": "[]", "migration transparency": "[]", "argument sort": "[]", "derived type": "[]", "end item": "[]", "iterative development": "[{\"term\": \"iterative development\", \"definition\": \"A planned rework strategy where multiple passes over the\\u00a0work are used to converge on a good solution. See also incremental development, iteration,\\u00a0iterative and incremental process.\"}]", "importer": "[]", "multiaddress instruction": "[]", "programmable terminal": "[]", "parameterized collection class": "[]", "navigation": "[{\"term\": \"persona\", \"definition\": \"1. A user archetype, synthesized from the ethnographic data of real users,\\u00a0that helps guide decisions about product features, navigation, interactions, and visual\\u00a0design. 2. A fictitious person that is the prototypical instance of a particular user role.\\u00a0See also user story.\"}]", "program construct": "[]", "customer": "[{\"term\": \"customer uncertainty\", \"definition\": \"Uncertainty surrounding who the customers of a product are.\\u00a0See also uncertainty. Contrast with end uncertainty, means uncertainty.\"}]", "crisis management": "[]", "Lifecycle Query Engine": "[]", "scrum": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "unit test": "[]", "server friend": "[]", "requirements specification": "[]", "unadjusted function point count": "[]", "development cycle": "[{\"term\": \"iteration\", \"definition\": \"A self-contained development cycle focused on performing all of the work\\u00a0necessary to produce a valuable outcome. See also all-at-once development, sprint.\"}]", "endeavor": "[{\"term\": \"project\", \"definition\": \"1. A temporary endeavor undertaken to create a unique product, service, or\\u00a0result (PMI). 2. An effort that completes when its objectives have been obtained.\\u00a0Compared with a life of a product, a project is shorter in duration. Frequently multiple\\u00a0projects are performed over the full cradle-to-grave lifecycle of a product. Contrast\\u00a0with product.\"}]", "special cause": "[]", "Rule and Constraint Language": "[]", "kano analysis": "[{\"term\": \"kano model analysis\", \"definition\": \"A customer satisfaction model developed by Japanese research\\u00a0Noriaki Kano in the early 1980s. Kano analysis is a\\u00a0set of ideas and techniques that help determine\\u00a0perceived user satisfaction with product features (e.g., product backlog items). Kano analysis uses a questionnaire were customers are asked both a functional (\\\"How would you feel if the feature is included?\\\") and dysfunctional (\\\"How would you feel if the feature were not included?\\\") form of a question about individual\\u00a0features. Based on how users answer these questions, Kano analysis classifies a feature as either mandatory (has to be in the product), linear (customer satisfaction will be linear with increases in quantity or quality of the feature), or exciter/delighter (customer satisfaction will be very high since customers didn't even know they wanted this feature until they saw it, and now they believe they can't live without it). Kano model analysis is one technique that can be used to determine the level of investment (if any) to make in each product backlog item and therefore is a technique that can be used to help prioritize product backlog items.\"}]", "security policy": "[]", "observation period": "[]", "metadata": "[]", "variation point": "[]", "formalization": "[]", "conceptual system design": "[]", "architectural description": "[]", "formal review": "[]", "abstract class": "[]", "internal software quality": "[]", "maintenance": "[{\"term\": \"technical practices\", \"definition\": \"The specific practices or techniques that are used during sprint\\u00a0execution to properly perform the work required to deliver features that have manageable\\u00a0levels of technical debt and meet the Scrum team\\u2019s definition of done.\"}]", "change authority": "[]", "resource": "[{\"term\": \"sprint mapping\", \"definition\": \"sprint mapping. An activity to tentatively slot or map appropriately detailed, estimated, and priortized product backlog items into specific future sprints. One simple approach is to approximate\\u00a0a set of product\\u00a0backlog items for each of the next several sprints by grouping together into a sprint items whose aggregate size roughly\\u00a0equals the team\\u2019s average velocity. Synonymous with PBI slotting.\"}]", "instruction format": "[]", "multiaddress four-two-address address instruction": "[]", "human behaviour": "[]", "code tuning": "[]", "decomposition diagram": "[]", "value list constraint": "[]", "configuration item development record": "[]", "antifragile": "[{\"term\": \"antifragile\", \"definition\": \"1. A term coined by Nassim Taleb to represent things that benefit from disorder. 2. The opposite of fragile. 3. When you have more to gain than lose in the presence of uncertainty (positive asymmetric payoff). 4. According to Taleb, antifragile things have a convex response to a stressor or source of harm (for some range of variation), leading to a positive sensitivity to increase in volatility (or variability, stress, dispersion of outcomes, or uncertainty). Contrast with fragile, robust.\"}]", "test procedure": "[]", "external interface file": "[]", "referential integrity": "[]", "method engineer": "[]", "acceptance testing": "[]", "object module": "[]", "call trace": "[]", "delivery rate": "[]", "quality": "[{\"term\": \"INVEST\", \"definition\": \"An acronym coined by Bill Wake for remembering a set of criteria used to\\u00a0evaluate the quality of user stories. The criteria are Independent, Negotiable, Valuable,\\u00a0Estimatable, Sized correctly (small), and Testable. See also user story.\"}]", "data movement": "[]", "two-plus-one address instruction": "[]", "precondition": "[]", "project release plan": "[]", "categorization": "[]", "impact analysis": "[]", "mixed entry table": "[]", "instruction set": "[]", "report standard": "[]", "navigational aids": "[]", "unit of measurement": "[]", "target language": "[]", "query": "[]", "effort": "[{\"term\": \"product development effort\", \"definition\": \"The full scope of work performed to create or enhance a\\u00a0product or service. Contrast with project.\"}]", "parallel development": "[]", "complete": "[{\"term\": \"sprint execution\", \"definition\": \"The period of time during which the task-level work is performed by the development team to complete the features committed to during sprint planning. See also sprint planning.\"}]", "attribute indicator": "[]", "role": "[{\"term\": \"role\", \"definition\": \"A cohesive set of responsibilities that may be fulfilled by one or more people.\\u00a0The three Scrum roles are product owner, ScrumMaster, and development team. See\\u00a0also practice, principle.\"}]", "project attribute": "[]", "multiple inclusive selective construct": "[]", "test procedure specification": "[]", "synchronous message communication with reply": "[]", "project management team": "[{\"term\": \"T-shirt sizing\", \"definition\": \"A form of estimation that is often, although not exclusively, used to size portfolio backlog items. T-shirt sizing is based on the concept of binning. The bins are typically assigned labels corresponding to those commonly used with T-shirt sizes: extra small, small, medium, large, extra large, etc. Frequently a cost range is associated with each size (e.g., an extra small project will cost between $10k and $25k) to provide organization-specific meaning to each T-shirt size. See also binning.\\u00a0\"}]", "activity code": "[]", "software project life cycle": "[]", "abort": "[]", "computer software configuration": "[]", "unpack": "[]", "archival pages": "[]", "counting scope": "[]", "busy": "[]", "decision table": "[]", "computing system": "[]", "test criteria": "[{\"term\": \"acceptance-test-driven development (ATDD)\", \"definition\": \"A technique in which the participants collaboratively discuss acceptance criteria, using examples, and then distill them into a set of concrete acceptance tests before development begins. Synonymous with specification by example.\"}]", "deliver primitive": "[]", "stand-up": "[{\"term\": \"daily stand-up\", \"definition\": \"A common approach to performing a daily scrum whereby the participants\\u00a0stand for the entirety of the activity. Standing up promotes brevity and helps\\u00a0ensure that the activity does not exceed its timebox. See daily scrum.\"}]", "economic filter": "[{\"term\": \"economic filter\", \"definition\": \"The decision criteria used by an organization to evaluate the economics\\u00a0of a proposed product in order to decide whether or not to fund it. Contrast\\u00a0with strategic filter.\"}]", "conversion": "[]", "reconcile": "[]", "arc annotation": "[]", "entity-relationship relationships among them": "[]", "macrogenerator": "[]", "assembler code": "[]", "signal interface": "[]", "net graph": "[]", "control limits": "[]", "system definitions node": "[]", "attribute data type": "[]", "operation field": "[]", "static model": "[]", "software header": "[]", "local configuration": "[]", "remote job entry": "[]", "configuration status accounting": "[]", "return": "[{\"term\": \"marginal economics\", \"definition\": \"Determining if spending the next chunk of money is justified by the return that investment would generate. When applying margin economics, we consider\\u00a0all work that has been performed on the product up\\u00a0to the decision point as a \\u201csunk cost\\u201d\\u00a0and therefore don't consider the sunk cost when determining whether to spend the next chunk of money. See portfolio planning.\"}]", "real-time scheduling theory": "[{\"term\": \"cost of delay\", \"definition\": \"The financial cost associated with delaying work or delaying achievement\\u00a0of a milestone. Cost of delay emphasizes the concept that time has a real financial\\u00a0cost, and to make economically sensible trade-offs it is important to know that\\u00a0cost.\"}]", "functional decomposition": "[]", "decompiler": "[]", "data collection": "[]", "one-ahead addressing": "[]", "online documentation system": "[]", "enterprise environmental factors": "[]", "three-plus-one address instruction": "[]", "planning package": "[]", "workflow": "[{\"term\": \"story mapping\", \"definition\": \"1. A technique that takes a user-centric perspective for generating a\\u00a0set of user stories. Each high-level user activity is decomposed into a workflow that\\u00a0can be further decomposed into a set of detailed tasks. 2. A two-dimensional representation\\u00a0of a traditional one-dimensional product backlog list. See also product\\u00a0backlog, user story.\"}]", "equivalent faults": "[]", "user interface task": "[]", "pathological coupling": "[]", "coerce": "[]", "sprint review": "[{\"term\": \"sprint review\", \"definition\": \"An inspect-and-adapt activity that occurs after sprint execution where\\u00a0the Scrum team shows to all interested parties what was accomplished during the\\u00a0sprint. The sprint review gives everyone with input in the product development effort\\u00a0an opportunity to inspect what has been built so far and adapt what will be built\\u00a0next. See also inspect and adapt, sprint demo.\"}]", "level": "[{\"term\": \"confidence threshold\", \"definition\": \"1. The definition of done for envisioning (product-level planning).\\u00a02. The set of information that decision makers need in order to have sufficient\\u00a0confidence to make a go/no-go funding decision for more detailed development.\"}]", "system maintenance": "[]", "build pipeline": "[]", "hierarchical modeling": "[]", "change project function point count": "[]", "address": "[{\"term\": \"output measure\", \"definition\": \"Describes what was produced (e.g., number of widgets created, or number of hamburgers served) or the services you delivered (e.g., number of clients). Output measures do not address the value or impact of work to either internal or external stakeholders. An example output measure is velocity. See blog post \\\"Output vs. Outcome\\u2014Measuring Business Success with Agile.\\\" Contrast with outcome measure.\"}]", "implementable story": "[{\"term\": \"implementable story\", \"definition\": \"A user story that is sized small enough to fit nicely within a\\u00a0sprint. Synonymous with sprintable story.\"}]", "appraisal participants": "[]", "design": "[{\"term\": \"lean ux\", \"definition\": \"A practice that integrates design thinking, core agile principles, and lean startup principles\\u00a0that is used by a cross-functional team of designers, developers, and product managers to bring the true nature of the work to light\\u00a0faster, with less emphasis on deliverables and greater focus on the\\u00a0actual experience\\u00a0being designed. Lean UX is based on the following core principles:\"}]", "integrity level scheme": "[]", "component integration test": "[]", "element type": "[]", "evaluation sponsor": "[]", "external inquiry": "[]", "risk tolerance": "[]", "compiler directive source statement": "[]", "Certified Scrum Product Owner": "[{\"term\": \"Certified Scrum Product Owner\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance. This certification is intended for people who will fulfill the product owner role on a Scrum team. To earn CSPO certification, a candidate must attend an in-person, two-day CSPO training course taught by a Certified Scrum Trainer (CST). Synonymous with CSPO. See also CSM, CSP, CST.\"}]", "information technology": "[]", "header": "[]", "web": "[{\"term\": \"dot voting\", \"definition\": \"A technique that allows participants to vote their preferences among a set\\u00a0of items by placing a colored dot on items that they believe are higher priority than\\u00a0other items. Items with more dots are higher priority than items with fewer dots. This\\u00a0technique is frequently used during the sprint retrospective activity. See also sprint\\u00a0retrospective.\"}]", "chip": "[]", "accessibility": "[]", "nucleus": "[]", "product roadmap": "[{\"term\": \"product roadmap\", \"definition\": \"A description of the incremental nature of how a product will\\u00a0be built and delivered over time, along with the important factors that drive each\\u00a0individual release. Useful when developing a product that will have more than one\\u00a0release. See also envisioning.\"}]", "model": "[{\"term\": \"kano model analysis\", \"definition\": \"A customer satisfaction model developed by Japanese research\\u00a0Noriaki Kano in the early 1980s. Kano analysis is a\\u00a0set of ideas and techniques that help determine\\u00a0perceived user satisfaction with product features (e.g., product backlog items). Kano analysis uses a questionnaire were customers are asked both a functional (\\\"How would you feel if the feature is included?\\\") and dysfunctional (\\\"How would you feel if the feature were not included?\\\") form of a question about individual\\u00a0features. Based on how users answer these questions, Kano analysis classifies a feature as either mandatory (has to be in the product), linear (customer satisfaction will be linear with increases in quantity or quality of the feature), or exciter/delighter (customer satisfaction will be very high since customers didn't even know they wanted this feature until they saw it, and now they believe they can't live without it). Kano model analysis is one technique that can be used to determine the level of investment (if any) to make in each product backlog item and therefore is a technique that can be used to help prioritize product backlog items.\"}]", "Scrum": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "planning processes": "[]", "private type": "[]", "complicated domain": "[{\"term\": \"complicated domain\", \"definition\": \"1. A situation in which there might be multiple right answers\\u00a0but expert diagnosis is required to figure them out. 2. One of the domains in the\\u00a0Cynefin framework. See also Cynefin. Contrast with chaotic domain, complex domain,\\u00a0disorder domain, simple domain.\"}]", "war room": "[]", "analyst": "[]", "data store": "[]", "application area": "[]", "error seeding": "[]", "system interface task": "[]", "view": "[{\"term\": \"silent grouping\", \"definition\": \"A facilitation technique for getting people to group related items\\u00a0without talking, relying only on the individual placement and movement of items\\u00a0(typically cards or sticky notes) as a means of communicating and coordinating\\u00a0among the participants. A technique frequently used during the sprint retrospective\\u00a0activity. See also sprint retrospective.\"}]", "portal": "[]", "asynchronous task": "[]", "estimation": "[{\"term\": \"ideal day\", \"definition\": \"A unit for estimating the size of product backlog items based on how long\\u00a0an item would take to complete if it were the only work being performed, there were\\u00a0no interruptions, and all resources necessary to complete the work were immediately\\u00a0available. See also ideal hour. Contrast with story point.\"}]", "verification method": "[]", "project": "[{\"term\": \"project\", \"definition\": \"1. A temporary endeavor undertaken to create a unique product, service, or\\u00a0result (PMI). 2. An effort that completes when its objectives have been obtained.\\u00a0Compared with a life of a product, a project is shorter in duration. Frequently multiple\\u00a0projects are performed over the full cradle-to-grave lifecycle of a product. Contrast\\u00a0with product.\"}]", "evaluation group": "[]", "aperiodic task": "[]", "local compaction": "[]", "generic practice": "[]", "alphanumeric": "[]", "architectural epics": "[]", "address space": "[]", "front matter": "[]", "fail-fast": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "support staff-hour": "[]", "assessment": "[{\"term\": \"inspection\", \"definition\": \"One of the three pillars of empirical process control, involving thoughtful\\u00a0examination and processing of feedback to make adaptation decisions regarding\\u00a0the process or product. See also adaptation, empirical process control, transparency.\"}]", "rule-based language": "[]", "requirements engineering": "[]", "manufacturer": "[]", "software support": "[]", "risk handling": "[]", "test design specification": "[]", "test effort": "[]", "node index": "[]", "non-time-critical computationally intensive task": "[]", "listing": "[]", "well-formed requirement": "[]", "hardware configuration item": "[]", "resource leveling": "[]", "output assertion": "[]", "perform integrated change control": "[]", "defect density": "[]", "team pi objectives": "[]", "mark-up": "[]", "pass criteria": "[{\"term\": \"test-driven development (TDD)\", \"definition\": \"1. An evolutionary approach to development based\\u00a0on writing a failing automated test before the functional code that makes the test\\u00a0pass. Once the code is written to pass the test, the cycle is then repeated, including\\u00a0refactoring the existing code to ensure a coherent cross-functional design. The goal\\u00a0of test-driven development is specification and not validation\\u2014to think through a design before code is written, to create clean code that always works. 2. An example of\\u00a0test-first development. See also refactoring, technical practices, test-first development.\"}]", "trade-off": "[]", "encoding": "[]", "startup": "[{\"term\": \"startup\", \"definition\": \"A human institution designed to\\u00a0create new products or services under\\u00a0conditions of extreme uncertainty (Ries 2011).\"}]", "project risk management": "[{\"term\": \"risk\", \"definition\": \"1. The likelihood that an event will be accompanied by undesirable consequences.\\u00a0Risk is measured by both the probability of the event and the seriousness of\\u00a0the consequences. 2. Any uncertainty that is expected to have a negative outcome for\\u00a0the activity. See also uncertainty.\"}]", "technology used for evaluation": "[]", "programmable breakpoint": "[]", "product description": "[]", "pseudo-instruction": "[]", "meta-relationship": "[]", "project area": "[]", "storage": "[]", "immediate instruction": "[]", "logical record": "[]", "background": "[]", "generalization taxonomy": "[]", "input arc": "[]", "data inventory": "[]", "architecting": "[]", "capsule manager": "[]", "certified scrum product owner": "[{\"term\": \"Certified Scrum Product Owner\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance. This certification is intended for people who will fulfill the product owner role on a Scrum team. To earn CSPO certification, a candidate must attend an in-person, two-day CSPO training course taught by a Certified Scrum Trainer (CST). Synonymous with CSPO. See also CSM, CSP, CST.\"}]", "mock-up": "[]", "evaluation activity": "[]", "risk threshold": "[]", "log in": "[]", "risk action request": "[]", "unbundle": "[]", "machine-dependent": "[]", "instruction cycle": "[]", "means uncertainty": "[{\"term\": \"means uncertainty\", \"definition\": \"Uncertainty surrounding how something will be built. See also\\u00a0uncertainty. Contrast with customer uncertainty, end uncertainty.\"}]", "physical requirement": "[]", "three-point estimate": "[]", "promotion": "[]", "security": "[{\"term\": \"technical practices\", \"definition\": \"The specific practices or techniques that are used during sprint\\u00a0execution to properly perform the work required to deliver features that have manageable\\u00a0levels of technical debt and meet the Scrum team\\u2019s definition of done.\"}]", "using smartsheet as your agile project management tool": "[{\"term\": \"artifact\", \"definition\": \"A tangible by-product produced during product development. The product\\u00a0backlog, sprint backlog, and potentially shippable product increment are examples of\\u00a0Scrum artifacts. See also practice.\"}]", "use case": "[]", "down": "[{\"term\": \"burndown chart\", \"definition\": \"A graph that shows on the vertical axis the quantity of work (in\\u00a0either hours or product backlog item units) remaining over time, which is shown on\\u00a0the horizontal axis. Because less and less work should remain over time, the general\\u00a0trend in the graph is to burn down to a point where no work remains. We can show\\u00a0projected outcomes on burndown charts by calculating a trend line to see when work\\u00a0might be completed. Contrast with burnup chart.\"}]", "design specification": "[]", "cause": "[{\"term\": \"mura\", \"definition\": \"A Japanese term (\\u6591) meaning \\\"unevenness; irregularity; lack of uniformity; nonuniformity; inequality.\\\" Mura is a key removal-of-waste concept (along with Muda and Muri) in lean manufacturing that focuses on the reducing the waste of unevenness. \\u00a0By failing to smooth demand we put unfair pressure\\u00a0on our processes and people and cause the creation of inventory and other wastes. See also muda, muri\"}]", "requirements specification language": "[{\"term\": \"specification by example\", \"definition\": \"See acceptance-test-driven development.\"}]", "work breakdown structure": "[]", "modified source statement": "[]", "five levels of agile planning": "[]", "calendar unit": "[]", "cloning": "[]", "testability": "[]", "software development notebook": "[{\"term\": \"Extreme Programming (XP)\", \"definition\": \"1. A software development methodology that is intended to improve software quality and responsiveness to changing customer requirements (source Wikipedia). 2. An agile development approach that is complementary\\u00a0to Scrum. Extreme Programming specifies important technical practices that development\\u00a0teams use to manage the flow of task-level work during sprint execution. See\\u00a0also agile.\"}]", "single-piece flow": "[{\"term\": \"single-piece flow\", \"definition\": \"A state where items are produced one at a time and flow (are\\u00a0pulled) through the development process as a single unit.\"}]", "program structure diagram": "[]", "learning loop": "[{\"term\": \"learning loop\", \"definition\": \"A feedback loop focused on increasing learning. Generally follows\\u00a0these steps: make an assumption (or set a goal), build something (perform some\\u00a0activities), get feedback on what was built, and then use that feedback to inspect what\\u00a0was done relative to what was assumed.\"}]", "notebook computer": "[]", "program specification": "[]", "last responsible moment": "[{\"term\": \"last responsible moment (LRM)\", \"definition\": \"A strategy of not making a premature decision but\\u00a0instead delaying commitment and keeping important and irreversible decisions open\\u00a0until the cost of not making a decision becomes greater than the cost of making a\\u00a0decision.\"}]", "application generator": "[]", "data input sheet": "[]", "information processing requirements": "[]", "target of process": "[]", "purchaser": "[]", "portfolio": "[{\"term\": \"portfolio backlog\", \"definition\": \"A backlog composed of products, programs, projects, or high-level epics. See also portfolio planning.\"}]", "class-level attribute": "[]", "replay": "[]", "loop assertion": "[]", "dynamic": "[]", "acquisition": "[{\"term\": \"prototype\", \"definition\": \"A preliminary, or intentionally incomplete or scaled-down version of a system or product (or an important piece or\\u00a0component of the system or product). A prototype is created for knowledge acquisition purposes.\\u00a0The result of a prototyping activity. See also prototyping.\"}]", "accident": "[]", "value chain": "[{\"term\": \"value chain\", \"definition\": \"1. The collection of groups or departments within an enterprise that work collaboratively to deliver on the value proposition of the enterprise. 2. A\\u00a0set of activities that a firm operating in a specific industry performs in order to deliver a valuable product\\u00a0or\\u00a0service\\u00a0for the\\u00a0market (Wikipedia).\\u00a0\"}]", "multiple exclusive selective construct": "[]", "build definition": "[]", "glass-box testing": "[]", "data protection": "[]", "root compiler": "[]", "period": "[{\"term\": \"event timeline\", \"definition\": \"A visual, chronologically ordered depiction of the meaningful events\\u00a0that occurred over a period of time. A common technique used during sprint retrospectives.\\u00a0See also sprint retrospective.\"}]", "computer program": "[]", "dynamic schema": "[]", "fixed-price-incentive-fee contract": "[]", "interface repository": "[]", "computer software configuration item": "[]", "footnote": "[]", "continuous deployment": "[{\"term\": \"continuous deployment\", \"definition\": \"A software development discipline where each new feature is deployed to users (customers)\\u00a0immediately after it is\\u00a0built, integrated, and tested. Continuous delivery and continuous deployment are often used synonymously. However, some\\u00a0people use continuous deployment as a term that means software changes that are actually put into production (for use by a customer), whereas continuous delivery means changes that are continuously ready to go into product but might not actually be deployed (for business reasons).\\u200b\\u00a0In order to do continuous deployment you must be doing continuous delivery.\\u00a0See also\\u00a0continuous delivery.\"}]", "structured programming": "[]", "outsourcing": "[]", "global compaction": "[]", "test incident report": "[]", "run stream": "[{\"term\": \"queue\", \"definition\": \"A holding place for items (an inventory) as they wait for the next action in a\\u00a0work stream. See also inventory, work in process.\"}]", "software monitor": "[]", "develop project management plan": "[{\"term\": \"portfolio planning\", \"definition\": \"An activity for determining which products (or projects) to work\\u00a0on, in which order, and for how long. Sometimes referred to as portfolio management. Want to see a picture?\"}]", "data exception": "[]", "program instruction": "[]", "installed function point count": "[]", "implementation": "[{\"term\": \"release plan\", \"definition\": \"1. The output of release planning. On a fixed-date release, the release\\u00a0plan will specify the range of features available on the fixed future date. On a fixed scope\\u00a0release, the release plan will specify the range of sprints and costs required to\\u00a0deliver the fixed scope. 2. A plan that communicates, to the level of accuracy that is\\u00a0reasonably possible, when the release will be available, what features will be in the\\u00a0release, and how much will it cost. See also fixed-date release, fixed-scope release.\"}]", "waterfall process": "[{\"term\": \"waterfall process\", \"definition\": \"See plan-driven process.\"}]", "computational viewpoint": "[]", "project management": "[{\"term\": \"T-shirt sizing\", \"definition\": \"A form of estimation that is often, although not exclusively, used to size portfolio backlog items. T-shirt sizing is based on the concept of binning. The bins are typically assigned labels corresponding to those commonly used with T-shirt sizes: extra small, small, medium, large, extra large, etc. Frequently a cost range is associated with each size (e.g., an extra small project will cost between $10k and $25k) to provide organization-specific meaning to each T-shirt size. See also binning.\\u00a0\"}]", "key": "[{\"term\": \"muda\", \"definition\": \"A Japanese term (\\u7121\\u99c4) meaning \\\"futility; uselessness; wastefulness.\\\" Muda is a key removal-of-waste concept (along with Mura and Muri) in lean manufacturing that focuses on the removal of non-value adding steps.\\u00a0\"}]", "Representational State Transfer": "[]", "hostile backout": "[]", "pseudocode": "[]", "cyclic search": "[]", "transition mode": "[]", "user group": "[]", "electronic copy": "[]", "holding cost": "[{\"term\": \"holding cost\", \"definition\": \"The cost for delaying feedback and value by holding a batch of work items (by not immediately performing the work).\\u00a0In manufacturing, holding cost is the cost of not sending a batch to the next process.\\u00a0Contrast with\\u00a0transaction\\u00a0cost. See also\\u00a0U-curve optimization.\"}]", "process capability level": "[]", "software development cycle": "[]", "latency": "[]", "critical activity": "[]", "system development cycle": "[]", "context-aware search": "[]", "identifier-dependent entity": "[]", "capability indicator": "[]", "architecture": "[{\"term\": \"technical stories\", \"definition\": \"A \\u201cuser\\u201d story (product backlog item) that delivers no perceived\\u00a0end-user value but does deliver important architecture or infrastructure needed to\\u00a0deliver future user value. See also user story.\"}]", "assessment process": "[]", "critical path methodology": "[]", "effectiveness assessment": "[]", "acceptance test driven development": "[{\"term\": \"acceptance-test-driven development (ATDD)\", \"definition\": \"A technique in which the participants collaboratively discuss acceptance criteria, using examples, and then distill them into a set of concrete acceptance tests before development begins. Synonymous with specification by example.\"}]", "check in": "[]", "given-when-then": "[{\"term\": \"acceptance-test-driven development (ATDD)\", \"definition\": \"A technique in which the participants collaboratively discuss acceptance criteria, using examples, and then distill them into a set of concrete acceptance tests before development begins. Synonymous with specification by example.\"}]", "memory map": "[]", "resource allocation": "[]", "probability": "[{\"term\": \"risk\", \"definition\": \"1. The likelihood that an event will be accompanied by undesirable consequences.\\u00a0Risk is measured by both the probability of the event and the seriousness of\\u00a0the consequences. 2. Any uncertainty that is expected to have a negative outcome for\\u00a0the activity. See also uncertainty.\"}]", "storage breakpoint": "[]", "derived requirement": "[]", "software requirements phase": "[]", "operational concept description": "[]", "conditions of satisfaction": "[{\"term\": \"conditions of satisfaction\", \"definition\": \"The conditions under which a product owner would be\\u00a0satisfied that a product backlog item is done. Conditions of satisfaction are acceptance\\u00a0criteria that clarify the desired behavior. See also acceptance criteria.\"}]", "turnkey": "[]", "output primitive": "[]", "passive object": "[]", "swap": "[]"}, "0": {"mean execution time rating value": "[]", "path expression": "[]", "manage project team": "[]", "risk breakdown structure": "[]", "path testing": "[]", "corporate board or equivalent body": "[]", "condition code": "[]", "heavyweight process": "[]", "evaluator": "[]", "hard copy": "[]", "process improvement sponsor": "[]", "up time": "[]", "record": "[]", "single-step operation": "[]", "acceptance criteria": "[{\"term\": \"acceptance criteria\", \"definition\": \"1. The external quality characteristics specified by the product owner from a business or stakeholder perspective. Acceptance criteria define desired behavior and are used to determine whether a product backlog item has been successfully developed. 2. The exit criteria that a component or a system must satisfy in order to be accepted by a user, customer, or other authorized entity (IEEE 610).\"}]", "critical piece first": "[]", "problem domain": "[]", "assessor": "[]", "internationalization": "[]", "subnetwork": "[]", "robust": "[{\"term\": \"robust\", \"definition\": \"1. Something that is resilient and resists shocks and therefore remains the same in the presence of disorder. 2. When something neither benefits from nor is harmed by disorder. Contrast with antifragile, fragile.\"}]", "microword": "[]", "preventive action": "[]", "child entity": "[]", "finish date": "[]", "test unit": "[]", "jenkins": "[]", "plan quality": "[]", "consumer software package": "[]", "one-level address": "[]", "execution trace": "[]", "timeliness function": "[]", "competent assessor": "[]", "user": "[{\"term\": \"user story\", \"definition\": \"A convenient format for expressing the desired business value for many\\u00a0types of product backlog items. User stories are crafted in a way that makes them\\u00a0understandable for both business people and technical people. They are structurally\\u00a0simple and typically expressed in a format such as \\u201cAs a <user role> I want to achieve\\u00a0<goal> so that I get <benefit>.\\u201d They provide a great placeholder for a conversation.\\u00a0Additionally, they can be written at various levels of granularity and are easy to progressively\\u00a0refine. See also epic, progressive refinement, theme, user role.\"}]", "development life cycle": "[]", "sponsor": "[]", "added source statements": "[]", "action stub": "[]", "real-world object": "[]", "visual agilexicon": "[{\"term\": \"Visual AGILExicon\\u00ae\", \"definition\": \"1. Pronounced \\u201cvisual agile lexicon\\u201d, a\\u00a0language for describing and communicating core agile and Scrum concepts in a graphically rich and visually\\u00a0appealing manner. The Visual AGILExicon\\u00ae is the foundation of over 200 pictures in the best-selling book Essential Scrum: A Practical Guide to the Most Popular Agile Process. 2.\\u00a0A regsitered trademark of Innolution, LLC and Kenneth S. Rubin.\\u00a0\"}]", "activity group": "[]", "model glossary": "[]", "data flowchart": "[]", "supporting process": "[]", "term evaluation": "[]", "staged representation": "[]", "owned attribute": "[]", "relative address": "[]", "design description": "[]", "development project": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "compiler code": "[]", "three questions": "[{\"term\": \"technical debt\", \"definition\": \"1. A term used to describe the obligation that a software organization\\u00a0incurs when it chooses a design or construction approach that is expedient in\\u00a0the short term but that increases complexity and is more costly in the long term. 2. A\\u00a0metaphor that facilitates the communication between business and technical people\\u00a0regarding implementation artifact inadequacies. See also naive technical debt, strategic\\u00a0technical debt, unavoidable technical debt.\"}]", "software quality characteristic": "[{\"term\": \"all-before-any\", \"definition\": \"A characteristic of a sequential development process, where the work\\u00a0product from a previous step in a process is transferred to the next step using a batch\\u00a0size of 100%. See also batch size.\"}]", "output measure": "[{\"term\": \"output measure\", \"definition\": \"Describes what was produced (e.g., number of widgets created, or number of hamburgers served) or the services you delivered (e.g., number of clients). Output measures do not address the value or impact of work to either internal or external stakeholders. An example output measure is velocity. See blog post \\\"Output vs. Outcome\\u2014Measuring Business Success with Agile.\\\" Contrast with outcome measure.\"}]", "programming language": "[]", "page swapping": "[]", "computer word": "[]", "software design audit": "[]", "caution": "[]", "behavior": "[{\"term\": \"extrinsic motivation\", \"definition\": \"Engaging in a behavior to earn a reward or avoid punishment. The motivation to engage in the behavior arises from outside of the individual. Contrast with intrinsic motivation.\"}]", "control schedule": "[{\"term\": \"release planning\", \"definition\": \"Longer-term planning that answers questions like \\u201cWhen will we\\u00a0be done?\\u201d or \\u201cWhich features can I get by the end of the year?\\u201d or \\u201cHow much will\\u00a0this cost?\\u201d Release planning must balance customer value and overall quality against\\u00a0the constraints of scope, schedule, and budget. See also release plan.\"}]", "diagram feature reference": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "architectural design": "[]", "local area network": "[]", "product backlog item": "[{\"term\": \"product backlog item (PBI)\", \"definition\": \"1. An item such as a feature, defect, or (occasionally)\\u00a0technical work that is valuable from the product owner\\u2019s perspective. 2. An item in\\u00a0the product backlog. See also product backlog.\"}]", "backlog": "[{\"term\": \"product backlog item (PBI)\", \"definition\": \"1. An item such as a feature, defect, or (occasionally)\\u00a0technical work that is valuable from the product owner\\u2019s perspective. 2. An item in\\u00a0the product backlog. See also product backlog.\"}]", "scalar property": "[]", "box diagram": "[]", "automated build": "[]", "program network chart": "[]", "boy scout rule": "[{\"term\": \"Boy Scout rule\", \"definition\": \"1. Always leave the campground cleaner than you found it. If you\\u00a0find a mess on the ground, clean it up regardless of who might have made the mess.\\u00a02. Every time you are in an area of the code doing work, always leave the code a little\\u00a0cleaner, not a little messier, than you found it. See also technical debt.\"}]", "up": "[{\"term\": \"burnup chart\", \"definition\": \"A graph that shows the progress of work toward a goal line associated\\u00a0with a value on the vertical axis. As work is completed over time (the horizontal axis),\\u00a0the progress line moves up (burns up) to be nearer to the goal line. We can show projected\\u00a0outcomes on burnup charts by calculating a trend line to see when work might\\u00a0be completed. Contrast with burndown chart.\"}]", "log": "[{\"term\": \"impediment\", \"definition\": \"A hindrance or obstruction to doing something. Frequently used to\\u00a0describe some issue or blocker that is preventing a team or organization from performing\\u00a0Scrum in an effective way.\"}]", "internal task-structuring criteria": "[]", "consistency": "[]", "hierarchy": "[]", "agent": "[]", "character type": "[]", "existence dependency": "[]", "database": "[{\"term\": \"spike\", \"definition\": \"1. A term that originated with\\u00a0Extreme Programming (XP) that is\\u00a0used to refer to work whose primary purpose is explore potential solutions or otherwise gather information. A way to acquire knowledge when the situation at hand has uncertainty as to the proper or good way to proceed forward. 2. In agile development, a spike can be represented as a product backlog item who primary output is the knowledge obtained by performing the spike work. \\u00a03. Some people use the term spike to refer to an end-to-end architectural prototype. The visual metaphor is: Imagine you had a physical spike in one hand and a hammer in the other hand. Take the hammer and hit the spike so that it vertically pierces all layers of the architecture (e.g., GUI, middle tier, database).\"}]", "data-sensitive fault": "[]", "frequent releases": "[]", "mutation testing": "[]", "process performance": "[]", "architectural style": "[]", "link type": "[]", "assemble": "[{\"term\": \"component team\", \"definition\": \"1. A team that focuses on the creation of one or more components of\\u00a0a larger product that a customer would purchase. Component teams create assets or\\u00a0components that are then reused by other teams to assemble customer-valuable solutions. 2. Team that is cross-functional (multi-disciplinary), single component focused.\\u00a0Contrast with feature team.\"}]", "software development file": "[]", "user requirements": "[]", "programming": "[{\"term\": \"agile\", \"definition\": \"1. A specific set of values and principles, as expressed in the Agile Manifesto\\u00a0(Beck et al. 2001). 2. An umbrella term used for a group of related approaches to software\\u00a0development based on iterative and incremental development. Scrum is an agile\\u00a0approach to development. See also Extreme Programming, Kanban, Scrum.\"}]", "task complete definition": "[]", "lowclass": "[]", "maintenance enhancement": "[]", "rational unified process": "[]", "change control procedure": "[]", "main procedure": "[]", "risk category": "[]", "feature based planning": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "contingency allowanceH": "[]", "storage allocation": "[]", "source control management": "[]", "waiver": "[]", "sprint demo": "[{\"term\": \"sprint demo\", \"definition\": \"1. An activity of a sprint review where the completed (done) product\\u00a0backlog items are demonstrated with the goal of promoting an information-rich discussion\\u00a0between the Scrum team and other sprint review participants. 2. A term that is\\u00a0frequently used synonymously to refer to the entire sprint review. For further clarification between a sprint demo and sprint review, please read Ken Rubin's blog entitled:\\u00a0It\\u2019s a Sprint Review Not a Sprint Demo!\\u00a0See also sprint review.\"}]", "machine language": "[]", "devops": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "global attribute": "[{\"term\": \"emergence\", \"definition\": \"1. Individual, localized behavior that aggregates into global behavior that is disconnected from its origins. 2. An attribute of complex adaptive systems. 3. When applied to software development, recognizing that it is not possible to a priori determine the correct set of features, designs, or plans. Instead, over time as more information is learned, important information will emerge from the experience gained on prior work. See also\\u00a0complex adaptive system.\"}]", "statement": "[{\"term\": \"product vision\", \"definition\": \"A brief statement of the desired future state that would be achieved by\\u00a0developing and deploying a product. A good vision should be simple to state and provide\\u00a0a coherent direction to the people who are asked to realize it. See also envisioning.\"}]", "mode": "[]", "earned value technique": "[]", "domain engineer": "[]", "bottleneck": "[{\"term\": \"strategic filter\", \"definition\": \"The decision criteria used by an organization to evaluate whether a\\u00a0proposed product meets the strategic criteria to move forward for additional consideration.\\u00a0Contrast with economic filter.\"}]", "adjusted size": "[]", "indicator value": "[]", "precompiler": "[]", "data provider": "[]", "hazard": "[]", "reference user requirement collection": "[]", "unstratified language": "[]", "screen dump": "[]", "commit message": "[]", "critical design review": "[]", "friend": "[]", "reference user requirements": "[]", "symbol table": "[]", "outgoing synchronization": "[]", "top box": "[]", "pseudo operation": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "performance indicator": "[]", "throughput reference value": "[]", "developmental baseline": "[]", "dot notation": "[]", "risk monitoring and control": "[]", "validated metric": "[]", "change set": "[]", "storage capacity": "[]", "multi-valued": "[]", "formal parameter": "[]", "analogous estimating": "[]", "subclass cluster": "[]", "scorecard": "[]", "convertibility": "[]", "software quality in use": "[]", "project manager": "[{\"term\": \"product owner\", \"definition\": \"The empowered central point of product leadership. One of the three\\u00a0roles on a Scrum team; the single voice of the stakeholder community to the Scrum\\u00a0team. The product owner defines what to do and in what order to do it. See also\\u00a0Scrum team, ScrumMaster, development team.\"}]", "computer instruction": "[]", "system software": "[]", "lessons learned knowledge base": "[]", "request for proposal": "[]", "report server": "[]", "interrupt request": "[]", "design inspection": "[]", "project level": "[]", "collection-valued": "[]", "program design": "[]", "system support": "[]", "base address": "[]", "required outputs": "[]", "review": "[{\"term\": \"sprint review\", \"definition\": \"An inspect-and-adapt activity that occurs after sprint execution where\\u00a0the Scrum team shows to all interested parties what was accomplished during the\\u00a0sprint. The sprint review gives everyone with input in the product development effort\\u00a0an opportunity to inspect what has been built so far and adapt what will be built\\u00a0next. See also inspect and adapt, sprint demo.\"}]", "done-done": "[{\"term\": \"done-done\", \"definition\": \"A term often used by teams to mean the work performed during the sprint is \\u201creally\\u201d done. Done to the point where the customer would think the work is done (potentially deliverable). Teams that use \\\"done-done\\\" often use the term done to mean \\u201cwe did as much work as we were prepared to do!\\u201d Well-functioning agile teams don\\u2019t need two concepts (done and done-done). For these teams, done really means done-done. See also definition of done.\"}]", "test execution": "[]", "verifiable requirements language": "[]", "set-up time": "[]", "event history": "[]", "down busy": "[]", "discrete": "[]", "resource monitor task": "[]", "intrinsic": "[{\"term\": \"extrinsic motivation\", \"definition\": \"Engaging in a behavior to earn a reward or avoid punishment. The motivation to engage in the behavior arises from outside of the individual. Contrast with intrinsic motivation.\"}]", "fail fast": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "generalization": "[]", "application software": "[]", "parser": "[]", "time": "[{\"term\": \"timebox\", \"definition\": \"A fixed-length period of time during which an activity is performed. In\\u00a0Scrum, sprints are timeboxed iterations where a team works at a sustainable pace to\\u00a0complete a chosen, WIP-limited set of work. See also sprint, timeboxing\"}]", "priority interrupt": "[]", "common coupling": "[]", "layer": "[{\"term\": \"component team\", \"definition\": \"1. A team that focuses on the creation of one or more components of\\u00a0a larger product that a customer would purchase. Component teams create assets or\\u00a0components that are then reused by other teams to assemble customer-valuable solutions. 2. Team that is cross-functional (multi-disciplinary), single component focused.\\u00a0Contrast with feature team.\"}]", "diverse redundancy": "[]", "load map": "[]", "residual control": "[]", "system definition reference search": "[]", "platform": "[{\"term\": \"remote team member\", \"definition\": \"A member of a team who is located physically remote from a company office. If a team has one or more remote team members, then that team is a distributed team. See also co-located team, distributed team.\"}]", "project deliverable": "[{\"term\": \"release\", \"definition\": \"1. A combination of features that when packaged together make for a coherent\\u00a0deliverable to customers or users. 2. A version of a product that is promoted for\\u00a0use or deployment. Releases represent the rhythm of business-value delivery and\\u00a0should align with defined business cycles.\"}]", "data abstraction": "[]", "cost plus fee": "[]", "allocated requirement": "[]", "measuring instrument": "[]", "waterfall": "[{\"term\": \"waterfall\", \"definition\": \"A term referring to the graphical depiction of a development process in\\u00a0which the sequential phases of work are shown flowing steadily downwards like a\\u00a0cascading waterfall. See also plan-driven process.\"}]", "parallel construct": "[]", "template": "[{\"term\": \"definition of done\", \"definition\": \"A checklist of the types of work that the team is expected to\\u00a0successfully complete by the end of the sprint, before it can declare its work to be\\u00a0potentially shippable. A bare-minimum definition of done should yield a complete\\u00a0slice of product functionality, one that has been designed, built, integrated, tested,\\u00a0and documented and will deliver validated customer value. Contrast with definition\\u00a0of ready.\"}]", "control flow": "[]", "model page": "[]", "configuration management": "[]", "data function type": "[]", "reference expression": "[]", "personnel": "[]", "dynamic buffering": "[]", "mock object": "[]", "toolkit": "[]", "architectural structure": "[]", "testing": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "procedure": "[{\"term\": \"technique\", \"definition\": \"A defined procedure that is used to perform some or all of an activity or\\u00a0support an approach. See also activity, approach.\"}]", "tightly coupled message communication": "[]", "integrated circuit": "[]", "software integrity level": "[]", "high level": "[{\"term\": \"envisioning\", \"definition\": \"An activity that captures the essence of a potential product and creates\\u00a0a rough plan for the creation of that product. Envisioning begins with the creation\\u00a0of a vision, followed by the creation of a high-level product backlog and frequently a\\u00a0product roadmap. Synonymous with product planning. See also product roadmap.\"}]", "conventions": "[]", "forward recovery": "[]", "work item": "[]", "named constraint": "[]", "anomaly": "[]", "code freeze": "[]", "junction": "[]", "object-oriented language": "[]", "user-identifiable": "[]", "project management office": "[]", "deliverable": "[{\"term\": \"done-done\", \"definition\": \"A term often used by teams to mean the work performed during the sprint is \\u201creally\\u201d done. Done to the point where the customer would think the work is done (potentially deliverable). Teams that use \\\"done-done\\\" often use the term done to mean \\u201cwe did as much work as we were prepared to do!\\u201d Well-functioning agile teams don\\u2019t need two concepts (done and done-done). For these teams, done really means done-done. See also definition of done.\"}]", "opportunity": "[{\"term\": \"sprint retrospective\", \"definition\": \"An inspect-and-adapt activity performed at the end of every\\u00a0sprint. The sprint retrospective is a continuous improvement opportunity for a\\u00a0Scrum team to review its process (approaches to performing Scrum) and to identify\\u00a0opportunities to improve it. See also inspect and adapt.\"}]", "cost constraint": "[]", "standard process": "[]", "adaptive maintenance": "[]", "active area": "[]", "requirements phase": "[{\"term\": \"cost of delay\", \"definition\": \"The financial cost associated with delaying work or delaying achievement\\u00a0of a milestone. Cost of delay emphasizes the concept that time has a real financial\\u00a0cost, and to make economically sensible trade-offs it is important to know that\\u00a0cost.\"}]", "measurement": "[{\"term\": \"relative size measure\", \"definition\": \"A means of expressing the overall size of an item where the\\u00a0absolute value is not considered, but the relative size of an item compared to other\\u00a0items is considered. For example, an item of size 2 is half the size of an item of size 4,\\u00a0but we have no idea how big an item of size 2 or 4 is in some absolute sense. See also\\u00a0ideal day, story point.\"}]", "test approach": "[]", "staff-hour": "[]", "defect arrival rate": "[]", "total": "[{\"term\": \"U-curve optimization\", \"definition\": \"Used to determined the optimal batch size by balancing transaction cost and holding cost. A graph that has illustrates three quantities: transaction cost, holding cost, and total cost. \\u00a0The y-axis is cost, and the x-axis is batch size. By adding together the transaction cost and the holding cost for each batch size\\u00a0we can see the total cost for a given batch size. The goal is to determine the lowest total cost. U-curve optimizations have a \\\"flat bottom\\\" so we don't have be perfect in calculating the optimal size,\\u00a0there is a range of good batch sizes. See also transaction cost, holding cost.\"}]", "syntax": "[]", "distributed processing": "[]", "code breakpoint": "[]", "optional nonidentifying relationship nonidentifying relationship": "[]", "transaction": "[{\"term\": \"transaction cost\", \"definition\": \"The fixed (overhead cost) and variable costs of executing (doing the work required to realize) the items in a batch of work. One of the two costs in determing the economic batch size in a U-curve optimization. In manufacturing, transaction cost is the cost of sending a batch to the next process.\\u00a0Contrast with holding cost. See also U-curve optimization.\"}]", "initialization section": "[]", "product requirement": "[]", "software quality evaluation": "[]", "audit": "[]", "upward compatible": "[]", "work breakdown structure dictionary": "[]", "executive": "[]", "Boolean expression": "[]", "nonfunctional requirements": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "sample instance table": "[]", "representation": "[{\"term\": \"emotions seismogram\", \"definition\": \"A graphical representation of the emotional ups and downs of team members over the course of a sprint. A technique frequently used during the sprint retrospective activity. See also sprint retrospective. Mistakenly synonmous with emotions seismograph.\"}]", "story test": "[{\"term\": \"ideal hour\", \"definition\": \"A unit for estimating the size of the design, build, integrate, and test work,\\u00a0represented as sprint backlog tasks. Often referred to as an effort-hour, person-hour,\\u00a0or man-hour. See also ideal day.\"}]", "cost of delay": "[{\"term\": \"cost of delay\", \"definition\": \"The financial cost associated with delaying work or delaying achievement\\u00a0of a milestone. Cost of delay emphasizes the concept that time has a real financial\\u00a0cost, and to make economically sensible trade-offs it is important to know that\\u00a0cost.\"}]", "memory": "[]", "software development library": "[]", "fact table": "[]", "down time": "[]", "rework": "[{\"term\": \"iterative development\", \"definition\": \"A planned rework strategy where multiple passes over the\\u00a0work are used to converge on a good solution. See also incremental development, iteration,\\u00a0iterative and incremental process.\"}]", "atomic type": "[]", "macroinstruction": "[]", "point inflation": "[{\"term\": \"point inflation\", \"definition\": \"The unfortunate behavior of inflating the value of product backlog\\u00a0size estimates in an attempt to conform to or optimize an unwisely conceived measure\\u00a0(such as achieving a target velocity).\"}]", "optional requirement": "[]", "synchronization": "[{\"term\": \"synchronization\", \"definition\": \"Causing multiple events to happen at the same time. Frequently\\u00a0used to ensure that multiple Scrum teams work together in a coordinated way by\\u00a0starting and ending their sprints on the same days. See also cadence.\"}]", "reference mode": "[]", "all-before-any": "[{\"term\": \"all-before-any\", \"definition\": \"A characteristic of a sequential development process, where the work\\u00a0product from a previous step in a process is transferred to the next step using a batch\\u00a0size of 100%. See also batch size.\"}]", "computer resource allocation": "[]", "functional process": "[]", "standby time": "[]", "implied needs": "[]", "root": "[{\"term\": \"relative size measure\", \"definition\": \"A means of expressing the overall size of an item where the\\u00a0absolute value is not considered, but the relative size of an item compared to other\\u00a0items is considered. For example, an item of size 2 is half the size of an item of size 4,\\u00a0but we have no idea how big an item of size 2 or 4 is in some absolute sense. See also\\u00a0ideal day, story point.\"}]", "risk criteria": "[]", "statement testing": "[]", "decision tree analysis": "[]", "preparation time": "[]", "limits": "[{\"term\": \"work in process (WIP)\", \"definition\": \"Work that has entered the development process but is not yet\\u00a0finished and available to a customer or user. Refers to all assets or work products of\\u00a0a product or service that are currently being worked on or waiting in a queue to be\\u00a0worked on.\"}]", "symbolic trace": "[]", "comment": "[]", "direct address": "[]", "debug": "[]", "measurement librarian": "[]", "transformation analysis": "[]", "as-of date": "[]", "software hazard": "[]", "virtual storage": "[]", "offset": "[{\"term\": \"capital expenditure (CapEx)\", \"definition\": \"1. Funds used by a company to acquire or upgrade\\u00a0physical assets\\u00a0such as property, industrial buildings or equipment. It is often used to undertake new projects or investments by the firm.\\u00a0This type of outlay is also made by companies to maintain or increase the\\u00a0scope\\u00a0of their operations (investorpedia). 2. Capitalizing an expense means you don't offset your revenue against the expense in the\\u00a0year you purchased or built it. Instead you list the purchase as an asset on your balance sheet and then each year (through depreciation) you offset revenue on your income statement against that year\\u2019s depreciated amount. Contrast with operational expense.\"}]", "prompt": "[]", "incomplete process": "[]", "product scope": "[]", "suite": "[{\"term\": \"remote team member\", \"definition\": \"A member of a team who is located physically remote from a company office. If a team has one or more remote team members, then that team is a distributed team. See also co-located team, distributed team.\"}]", "Simple Cloud Identity Management": "[]", "turnaround time": "[]", "black box": "[]", "complexity": "[{\"term\": \"story point\", \"definition\": \"A measure of the relative size of product backlog items that takes into\\u00a0account factors such as complexity and physical size. Typically determined by engaging\\u00a0in Planning Poker. See also ideal day, Planning Poker, relative size measure.\"}]", "organizational unit": "[]", "anticipatory buffering": "[]", "selective dump": "[]", "build-breaker": "[]", "incoming change set": "[]", "descendent box": "[]", "scrummaster": "[{\"term\": \"ScrumMaster\", \"definition\": \"The coach, facilitator, impediment remover, and servant leader of\\u00a0the Scrum team. The ScrumMaster is one of the three roles on a Scrum team. The\\u00a0ScrumMaster provides process leadership and helps the Scrum team and the rest of\\u00a0the organization develop their own high-performance, organization-specific Scrum\\u00a0approach. See also Scrum team, product owner, development team,\\u00a0servant leader.\"}]", "internal event": "[]", "workload": "[]", "component team": "[{\"term\": \"component team\", \"definition\": \"1. A team that focuses on the creation of one or more components of\\u00a0a larger product that a customer would purchase. Component teams create assets or\\u00a0components that are then reused by other teams to assemble customer-valuable solutions. 2. Team that is cross-functional (multi-disciplinary), single component focused.\\u00a0Contrast with feature team.\"}]", "integrity assurance authority": "[]", "user view": "[]", "bug": "[]", "program backlog": "[]", "working space": "[]", "scope management plan": "[]", "digital computer": "[]", "understandability": "[]", "transaction-centered design": "[]", "certified scrum professional": "[{\"term\": \"Certified Scrum Professional\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance. Candidates must have demonstrated experience, documented training, and proven knowledge in the art of Scrum. To apply to be a CSP, candidates need a minimum of 36 months of successful Agile/Scrum work experience implementing Scrum inside organizations as development team member, product owner, or ScrumMaster\\u2014all within the past five years. Candidates also need to gather and submit 70 Scrum Education Units (SEUs)\\u2014and those have to be earned during the most recent three years. Synonymous with CSP. See also CSM, CSPO, CST.\"}]", "context diagram": "[]", "generic entity": "[]", "replication": "[]", "Unified Modeling Language": "[]", "data date": "[{\"term\": \"persona\", \"definition\": \"1. A user archetype, synthesized from the ethnographic data of real users,\\u00a0that helps guide decisions about product features, navigation, interactions, and visual\\u00a0design. 2. A fictitious person that is the prototypical instance of a particular user role.\\u00a0See also user story.\"}]", "library definition": "[]", "direct measure": "[]", "reengineering": "[]", "stakeholder": "[{\"term\": \"stakeholder\", \"definition\": \"A person, group, or organization that affects or can be affected by an\\u00a0organization\\u2019s actions. See also external stakeholders, internal stakeholders.\"}]", "Program Evaluation and Review Technique": "[]", "test case generator": "[]", "collaboration": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "control account": "[]", "non-procedural programming language": "[]", "software repository": "[]", "schedule compression": "[]", "stream interface signature": "[]", "subroutine trace": "[]", "immediate address": "[]", "coordination": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "failsafe": "[]", "compiler compiler": "[]", "cross-referencer": "[]", "economically sensible scrum": "[{\"term\": \"economically sensible Scrum\", \"definition\": \"1. The application of core agile and Scrum principles throughout an organization's value chain to ensure the fast, flexible, and economically sensible flow of work across the organization. 2. The application of the Scrum framework within an economic context grounded in core agile and Scrum principles.\"}]", "points": "[{\"term\": \"story point\", \"definition\": \"A measure of the relative size of product backlog items that takes into\\u00a0account factors such as complexity and physical size. Typically determined by engaging\\u00a0in Planning Poker. See also ideal day, Planning Poker, relative size measure.\"}]", "active text": "[]", "idle": "[{\"term\": \"idle workers\", \"definition\": \"People who have available capacity to do more work because they are\\u00a0not currently 100% utilized. Contrast with idle work.\"}]", "log on": "[]", "software reliability": "[]", "paper documentation": "[]", "estimate": "[{\"term\": \"estimation\", \"definition\": \"A rough calculation of the value, number, quantity, or extent of something.\\u00a0In Scrum, we estimate the size of portfolio backlog items, product backlog\\u00a0items, and sprint backlog tasks. See also forecast.\"}]", "auto-resolve conflict": "[]", "strategic themes": "[]", "feedback": "[{\"term\": \"fast feedback\", \"definition\": \"A principle that states that feedback today is much more valuable than\\u00a0the same feedback tomorrow, because today\\u2019s feedback can be used to correct a problem\\u00a0before it compounds into a much larger problem, and provides the ability to\\u00a0truncate economically undesirable paths sooner (to fail faster). See also fail fast.\"}]", "interconnection": "[]", "mistake": "[]", "boundary": "[]", "stress testing": "[]", "data item": "[]", "on-line": "[{\"term\": \"Certified ScrumMaster\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance. The world\\u2019s first and by far most popular Scrum certification. This certification is intended for people who will fulfill the ScrumMaster role on a Scrum team, and is very often obtained by members of the development team. To earn CSM certification, a candidate must attend an in-person, two-day CSM training course taught by a Certified Scrum Trainer (CST). After successfully completing the class participants are eligible to take the on-line CSM exam, where they must correctly answer 24 of 35 multiple choice questions. Synonymous with CSM.\\u00a0See also CSPO, CSP, CST.\"}]", "development record": "[]", "maintainability plan": "[]", "cluster": "[]", "primitive type": "[]", "scope gallop": "[]", "contingency plan": "[]", "self-directed work team": "[]", "reachable marking": "[]", "document set": "[]", "vendor branch": "[]", "call by value": "[]", "control point": "[]", "instance-level attribute": "[]", "daily stand-up": "[{\"term\": \"daily stand-up\", \"definition\": \"A common approach to performing a daily scrum whereby the participants\\u00a0stand for the entirety of the activity. Standing up promotes brevity and helps\\u00a0ensure that the activity does not exceed its timebox. See daily scrum.\"}]", "log off": "[]", "pseudo code": "[]", "process context": "[]", "nonprocedural language": "[]", "portfolio planning": "[{\"term\": \"portfolio planning\", \"definition\": \"An activity for determining which products (or projects) to work\\u00a0on, in which order, and for how long. Sometimes referred to as portfolio management. Want to see a picture?\"}]", "conversational": "[]", "coincidental communicational cohesion": "[]", "compiler": "[]", "nonidentifying relationship": "[]", "fail soft": "[]", "open distributed processing": "[]", "input-process-output": "[]", "microprogram": "[]", "verb phrase": "[]", "root arrow segment": "[]", "consecutive": "[]", "budget": "[{\"term\": \"release planning\", \"definition\": \"Longer-term planning that answers questions like \\u201cWhen will we\\u00a0be done?\\u201d or \\u201cWhich features can I get by the end of the year?\\u201d or \\u201cHow much will\\u00a0this cost?\\u201d Release planning must balance customer value and overall quality against\\u00a0the constraints of scope, schedule, and budget. See also release plan.\"}]", "nonprocedural programming language": "[]", "driver": "[{\"term\": \"pair programming\", \"definition\": \"1. A technical practice in which two\\u00a0programmers\\u00a0work together at one workstation (one screen, keyboard, and mouse among the pair). One person, the\\u00a0driver, writes\\u00a0code\\u00a0while the other person, the\\u00a0observer\\u00a0or\\u00a0navigator,\\u00a0reviews\\u00a0each line of code as it is typed in. The two programmers switch roles frequently. (based on Wikipedia) 2.\\u00a0One of the original 12\\u00a0extreme programming\\u00a0practices. 3. A technique that allows for very rapid feedback of code as it is being created. See also technical practices.\"}]", "model note number": "[]", "log out": "[]", "ready": "[{\"term\": \"ready\", \"definition\": \"See definition of ready.\"}]", "user interface sketch": "[]", "hardware engineering": "[]", "object reference": "[]", "feature freeze": "[]", "N 2 diagram": "[]", "near-critical activity": "[]", "project management plan": "[]", "system design review": "[]", "verification and validation effort": "[]", "back matter": "[]", "output arrow": "[]", "dynamic allocation": "[]", "item": "[{\"term\": \"product backlog item (PBI)\", \"definition\": \"1. An item such as a feature, defect, or (occasionally)\\u00a0technical work that is valuable from the product owner\\u2019s perspective. 2. An item in\\u00a0the product backlog. See also product backlog.\"}]", "page turning": "[]", "system under test": "[]", "system model": "[]", "child box": "[]", "test suite": "[]", "A-0 context diagram": "[]", "verify scope": "[{\"term\": \"fixed-scope release\", \"definition\": \"A release that must have a specific set of features. The date on\\u00a0which the features are delivered and/or the costs are flexible. Contrast with fixed-date\\u00a0release.\"}]", "activity attributes": "[]", "implementer": "[]", "load": "[{\"term\": \"capacity\", \"definition\": \"1. The quantity of resources available to perform useful work. 2. A concept\\u00a0used to help establish a WIP limit by ensuring that we only start work to match the\\u00a0available capacity to complete work. See also work in process.\"}]", "normalization": "[]", "technology viewpoint": "[]", "progressive elaboration": "[]", "computational interface template": "[]", "downstream": "[]", "sandbox": "[]", "definition of done": "[{\"term\": \"definition of done\", \"definition\": \"A checklist of the types of work that the team is expected to\\u00a0successfully complete by the end of the sprint, before it can declare its work to be\\u00a0potentially shippable. A bare-minimum definition of done should yield a complete\\u00a0slice of product functionality, one that has been designed, built, integrated, tested,\\u00a0and documented and will deliver validated customer value. Contrast with definition\\u00a0of ready.\"}]", "granularity": "[{\"term\": \"user story\", \"definition\": \"A convenient format for expressing the desired business value for many\\u00a0types of product backlog items. User stories are crafted in a way that makes them\\u00a0understandable for both business people and technical people. They are structurally\\u00a0simple and typically expressed in a format such as \\u201cAs a <user role> I want to achieve\\u00a0<goal> so that I get <benefit>.\\u201d They provide a great placeholder for a conversation.\\u00a0Additionally, they can be written at various levels of granularity and are easy to progressively\\u00a0refine. See also epic, progressive refinement, theme, user role.\"}]", "scale": "[{\"term\": \"feature team\", \"definition\": \"A cross-functional and cross-component team that can pull end-customer\\u00a0features from the product backlog and complete them. See also cross-functional\\u00a0team. Contrast with component team.\"}]", "internal attribute": "[]", "delivery": "[{\"term\": \"continuous delivery\", \"definition\": \"A software development discipline where software is built in such a way that it can be released to production at any time. Continuous delivery and continuous deployment are often used synonymously. However, some\\u00a0people use continuous deployment as a term that means software changes that are actually put into production (for use by a customer), whereas continuous delivery means changes that are continuously ready to go into product but might not actually be deployed (for business reasons).\\u00a0See also\\u00a0continuous deployment.\"}]", "enterprise value chain": "[{\"term\": \"enterprise value chain\", \"definition\": \"See value chain.\"}]", "verification sponsor": "[]", "service import": "[]", "computerization": "[]", "crash": "[]", "build measure learn": "[]", "assistive technologies": "[]", "parent diagram": "[]", "machine address": "[]", "interface requirements specification": "[]", "case": "[{\"term\": \"lifecycle profits\", \"definition\": \"1. The total profit potential for a product over its lifetime. 2. In the\\u00a0case of portfolio planning, the total profit potential of the entire portfolio rather than\\u00a0a single product.\"}]", "safety": "[{\"term\": \"safety\", \"definition\": \"1. An important agile value. 2. The condition where one feels reasonably free to speak one's mind and act in a manner that one truly believes to be in the best interest of oneself, team, company, and/or\\u00a0customers. Without safety, transparency is compromised, and without transparency, inspecting and adapting (the foundation of agile) are compromised. \\u00a0See also transparency.\"}]", "process improvement objective": "[]", "epic stories": "[]", "configuration control": "[{\"term\": \"test automation\", \"definition\": \"The use of special\\u00a0software\\u00a0(separate from the software being tested) to control the execution of tests and the comparison of actual outcomes with predicted outcomes (Wikipedia). Test automation is critical for supporting many other technical practices such as code refactoring, continuous integration, and continuous delivery.\"}]", "assessed capability": "[]", "diagram boundary": "[]", "identity-style view": "[{\"term\": \"iterative and incremental process\", \"definition\": \"A style of development that leverages both iterative\\u00a0development and incremental development. See also incremental development,\\u00a0iterative development.\"}]", "aggregate responsibility": "[]", "static error": "[]", "load module": "[]", "spiral model": "[]", "postmortem dump": "[]", "functional requirement": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "robustness": "[]", "burndown chart": "[{\"term\": \"burndown chart\", \"definition\": \"A graph that shows on the vertical axis the quantity of work (in\\u00a0either hours or product backlog item units) remaining over time, which is shown on\\u00a0the horizontal axis. Because less and less work should remain over time, the general\\u00a0trend in the graph is to burn down to a point where no work remains. We can show\\u00a0projected outcomes on burndown charts by calculating a trend line to see when work\\u00a0might be completed. Contrast with burnup chart.\"}]", "incoming link": "[]", "identifier-independent entity": "[]", "four-address instruction": "[]", "engineering": "[{\"term\": \"ideal day\", \"definition\": \"A unit for estimating the size of product backlog items based on how long\\u00a0an item would take to complete if it were the only work being performed, there were\\u00a0no interruptions, and all resources necessary to complete the work were immediately\\u00a0available. See also ideal hour. Contrast with story point.\"}]", "convention": "[]", "load rule": "[]", "constant": "[{\"term\": \"complex adaptive system\", \"definition\": \"A system with many entities interacting with each other in\\u00a0various ways, where these interactions are governed by simple, localized rules operating\\u00a0in a context of constant feedback. Examples include the stock market, the brain,\\u00a0ant colonies, and Scrum teams.\"}]", "incremental development": "[{\"term\": \"incremental development\", \"definition\": \"1. Development based on the principle of building some\\u00a0before building all. 2. A staging strategy in which parts of the product are developed\\u00a0and delivered to users at different times, with the intention to adapt to external feedback.\\u00a0See also iterative and incremental process, iterative development.\"}]", "scrummerfall": "[{\"term\": \"Scrummerfall\", \"definition\": \"See WaterScrum.\"}]", "lockout": "[]", "continuous iteration": "[]", "dynamic analysis": "[]", "underlying license": "[]", "reachability set": "[]", "user's manual": "[]", "location transparency": "[]", "cross-reference tool": "[]", "Intranet": "[]", "firm-fixed-price Contract": "[]", "certified scrummaster": "[{\"term\": \"Certified Scrum Trainer\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance.\\u00a0A difficult-to-obtain certification that enables people to teach Certified Scrum Master\\u00ae and Certified Scrum Product Owner\\u00ae courses. CSTs must demonstrate a deep knowledge and understanding of Scrum concepts, practices, and principles. To apply to be a CST, a candidate must hold an active Certified Scrum Professional\\u00ae designation from Scrum Alliance, have extensive hands-on experience implementing Scrum inside organizations as a ScrumMaster, product owner, or development team member, and have taught Scrum in a co-training partnership with a CST or independently in a non-certified context. Synonymous with CST. See also CSM, CSPO, CSP.\"}]", "time-scaled schedule network diagram": "[]", "resume": "[{\"term\": \"technical practices\", \"definition\": \"The specific practices or techniques that are used during sprint\\u00a0execution to properly perform the work required to deliver features that have manageable\\u00a0levels of technical debt and meet the Scrum team\\u2019s definition of done.\"}]", "mutual exclusion": "[]", "symbolic address": "[]", "prototyping": "[{\"term\": \"prototyping\", \"definition\": \"A technique used to acquire knowledge or buy information to reduce the risk involved in developing a product or service. When faced with enough uncertainty as to what is the proper next step to take when creating a solution, protoyping is a means of exploring and acqurining knowledge to help reduce the uncertainty so forward progress can be made. The output of prototyping is a prototype. See also prototype, evolutionary prototyping, throwaway prototyping.\"}]", "relocation dictionary": "[]", "role-feature-reason": "[]", "systematic reuse": "[]", "objref": "[]", "human systems engineering": "[]", "sprint plan": "[{\"term\": \"release plan\", \"definition\": \"1. The output of release planning. On a fixed-date release, the release\\u00a0plan will specify the range of features available on the fixed future date. On a fixed scope\\u00a0release, the release plan will specify the range of sprints and costs required to\\u00a0deliver the fixed scope. 2. A plan that communicates, to the level of accuracy that is\\u00a0reasonably possible, when the release will be available, what features will be in the\\u00a0release, and how much will it cost. See also fixed-date release, fixed-scope release.\"}]", "block-structured language": "[]", "technical debt": "[{\"term\": \"technical debt\", \"definition\": \"1. A term used to describe the obligation that a software organization\\u00a0incurs when it chooses a design or construction approach that is expedient in\\u00a0the short term but that increases complexity and is more costly in the long term. 2. A\\u00a0metaphor that facilitates the communication between business and technical people\\u00a0regarding implementation artifact inadequacies. See also naive technical debt, strategic\\u00a0technical debt, unavoidable technical debt.\"}]", "dimension table": "[]", "critical path method": "[]", "module strength": "[]", "critical information": "[]", "icon": "[]", "error prediction model": "[]", "installation and checkout phase": "[]", "interrogation": "[]", "enhancement project": "[]", "structural testing": "[]", "daily huddle": "[]", "test description": "[]", "task board": "[{\"term\": \"task board\", \"definition\": \"An information radiator used during sprint execution to communicate\\u00a0the progress and flow of task-level work within a sprint. See also information radiator,\\u00a0task.\"}]", "ontology": "[]", "validity": "[]", "poker planning": "[{\"term\": \"Planning Poker\", \"definition\": \"A consensus-based technique for the relative sizing of product backlog\\u00a0items. Read the blog posting \\\"Relative Size Estimating\\u2014It\\u2019s Just an Exercise in Binning!\\\" for an example.\"}]", "entity instance": "[]", "workload model": "[]", "verifiable": "[]", "protocol object": "[]", "requirements allocation": "[]", "fault": "[{\"term\": \"unavoidable technical debt\", \"definition\": \"A form of technical debt that is usually unpredictable\\u00a0and unpreventable and accrues through no fault of the team building the product.\\u00a0Contrast with naive technical debt, strategic technical debt. See also technical debt.\"}]", "complete cluster": "[]", "minicomputer": "[]", "endnotes": "[]", "output place": "[]", "software design requirement": "[]", "contractor": "[{\"term\": \"fixed-price contract\", \"definition\": \"A contract between a contractor (e.g., a service provider) and a client that provides for a firm price that is not subject to adjustment based on actual costs incurred by the contractor. This contract type transfers from the client to the contractor all of the cost risk. For the contractor to provide a fixed price, the client would have to specify in great detail up front what the client would like the contractor to do. Doing so would violate a core agile principle \\u2013 specifying up front very detailed information when both parties have the least amount of information is most often not practical. So, as a rule, organizations that have adopted agile should avoid fixed-price contracts.\"}]", "assessment record": "[]", "test-first development": "[{\"term\": \"test-first development\", \"definition\": \"A technical practice where the tests are written before the\\u00a0development is performed. An example is test-driven development. See also technical\\u00a0practices, test-driven development.\"}]", "access transparency": "[]", "application attribute": "[]", "preventive maintenance": "[]", "procedural language": "[]", "satisfaction": "[{\"term\": \"conditions of satisfaction\", \"definition\": \"The conditions under which a product owner would be\\u00a0satisfied that a product backlog item is done. Conditions of satisfaction are acceptance\\u00a0criteria that clarify the desired behavior. See also acceptance criteria.\"}]", "event": "[{\"term\": \"event timeline\", \"definition\": \"A visual, chronologically ordered depiction of the meaningful events\\u00a0that occurred over a period of time. A common technique used during sprint retrospectives.\\u00a0See also sprint retrospective.\"}]", "conformance": "[]", "high-order language": "[]", "branching": "[]", "formal testing": "[{\"term\": \"acceptance test\", \"definition\": \"1. The testing carried out to verify that the acceptance criteria have been met. 2. A test that defines the business value each product backlog item must deliver. It may verify functional requirements or nonfunctional requirements such as performance or reliability. It is used to help guide development (Crispin and Gregory 2009). 3. Formal testing with respect to user needs, requirements, and business processes conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user, customers, or other authorized entity to determine whether or not to accept the system (IEEE 610).\"}]", "deliver": "[{\"term\": \"technical stories\", \"definition\": \"A \\u201cuser\\u201d story (product backlog item) that delivers no perceived\\u00a0end-user value but does deliver important architecture or infrastructure needed to\\u00a0deliver future user value. See also user story.\"}]", "reverse execution": "[{\"term\": \"sprint execution\", \"definition\": \"The period of time during which the task-level work is performed by the development team to complete the features committed to during sprint planning. See also sprint planning.\"}]", "Collaborative Lifecycle Management": "[]", "ancestral diagram": "[]", "iteration execution": "[]", "portable computer": "[]", "software user documentation": "[]", "waste": "[{\"term\": \"waste\", \"definition\": \"Any activity that consumes resources and produces no added value to the\\u00a0product or service that a customer receives.\"}]", "physical source statement": "[]", "process architect": "[]", "big-bang testing": "[]", "adjusted function point count": "[]", "work activity": "[]", "process group": "[]", "invest acronym": "[]", "perform quantitative analysis": "[]", "software life cycle model": "[]", "organizational maturity": "[]", "snapshot dump": "[]", "instrument": "[]", "category": "[{\"term\": \"known technical debt\", \"definition\": \"A status category for technical debt that represents the debt\\u00a0that is known to the development team and has been made visible for future consideration.\\u00a0Contrast with happened-upon technical debt, targeted technical debt. See also\\u00a0technical debt.\"}]", "backlog item effort": "[]", "quality model": "[]", "input assertion": "[]", "object-oriented design": "[]", "do-nothing operation": "[{\"term\": \"component team\", \"definition\": \"1. A team that focuses on the creation of one or more components of\\u00a0a larger product that a customer would purchase. Component teams create assets or\\u00a0components that are then reused by other teams to assemble customer-valuable solutions. 2. Team that is cross-functional (multi-disciplinary), single component focused.\\u00a0Contrast with feature team.\"}]", "inductive assertion": "[]", "extension": "[]", "integrity": "[]", "test coverage": "[{\"term\": \"test automation\", \"definition\": \"The use of special\\u00a0software\\u00a0(separate from the software being tested) to control the execution of tests and the comparison of actual outcomes with predicted outcomes (Wikipedia). Test automation is critical for supporting many other technical practices such as code refactoring, continuous integration, and continuous delivery.\"}]", "interleave": "[]", "staffing management plan": "[]", "common environment coupling": "[]", "direct staff-hour": "[]", "value trace": "[]", "data processing center": "[]", "homogeneous redundancy": "[]", "redundancy": "[]", "workstation": "[{\"term\": \"pair programming\", \"definition\": \"1. A technical practice in which two\\u00a0programmers\\u00a0work together at one workstation (one screen, keyboard, and mouse among the pair). One person, the\\u00a0driver, writes\\u00a0code\\u00a0while the other person, the\\u00a0observer\\u00a0or\\u00a0navigator,\\u00a0reviews\\u00a0each line of code as it is typed in. The two programmers switch roles frequently. (based on Wikipedia) 2.\\u00a0One of the original 12\\u00a0extreme programming\\u00a0practices. 3. A technique that allows for very rapid feedback of code as it is being created. See also technical practices.\"}]", "transactional functions": "[]", "call by reference": "[]", "non-primary entity": "[]", "transaction transparency": "[{\"term\": \"transparency\", \"definition\": \"One of the three pillars of empirical process control; open access to the\\u00a0unbiased information required for inspection and adaptation. See also adaptation,\\u00a0empirical process control, inspection.\"}]", "syntactic agreement": "[]", "critical item": "[]", "logical type": "[]", "execute": "[]", "calendar": "[{\"term\": \"sprint\", \"definition\": \"A short-duration, timeboxed iteration. Typically a timebox between one\\u00a0week and a calendar month during which the Scrum team is focused on producing\\u00a0a potentially shippable product increment that meets the Scrum team\\u2019s agreed-upon\\u00a0definition of done. See also definition of done, iteration, potentially shippable product\\u00a0increment.\"}]", "data management": "[]", "systems engineering": "[]", "refactoring": "[{\"term\": \"refactoring\", \"definition\": \"A technique for restructuring an existing body of code by improving/simplifying its internal structure (design) without changing its external behavior.\\u00a0Refactoring is one of the principal techniques for managing technical debt. See also\\u00a0technical debt, technical practices.\"}]", "essential scrum": "[{\"term\": \"essential Scrum\", \"definition\": \"1. The values, principles, and practices of the Scrum framework\\u00a0combined with rules and proven approaches to applying Scrum practices. 2. Also the name title of the Amazon #1 Best Selling book by Kenneth S. Rubin. See also\\u00a0approach, practice, rule, Scrum framework.\"}]", "attributed relationship": "[]", "program pi objectives": "[]", "reusability": "[]", "desk checking": "[]", "functionality testing": "[]", "cycle": "[{\"term\": \"lifecycle profits\", \"definition\": \"1. The total profit potential for a product over its lifetime. 2. In the\\u00a0case of portfolio planning, the total profit potential of the entire portfolio rather than\\u00a0a single product.\"}]", "annotation": "[]", "techniques": "[{\"term\": \"technical practices\", \"definition\": \"The specific practices or techniques that are used during sprint\\u00a0execution to properly perform the work required to deliver features that have manageable\\u00a0levels of technical debt and meet the Scrum team\\u2019s definition of done.\"}]", "content coupling": "[]", "sequential process": "[{\"term\": \"sequential process\", \"definition\": \"See plan-driven process.\"}]", "ideal hour": "[{\"term\": \"ideal hour\", \"definition\": \"A unit for estimating the size of the design, build, integrate, and test work,\\u00a0represented as sprint backlog tasks. Often referred to as an effort-hour, person-hour,\\u00a0or man-hour. See also ideal day.\"}]", "release plan": "[{\"term\": \"release plan\", \"definition\": \"1. The output of release planning. On a fixed-date release, the release\\u00a0plan will specify the range of features available on the fixed future date. On a fixed scope\\u00a0release, the release plan will specify the range of sprints and costs required to\\u00a0deliver the fixed scope. 2. A plan that communicates, to the level of accuracy that is\\u00a0reasonably possible, when the release will be available, what features will be in the\\u00a0release, and how much will it cost. See also fixed-date release, fixed-scope release.\"}]", "product metric": "[]", "entity-relationship diagram": "[]", "investment": "[{\"term\": \"INVEST\", \"definition\": \"An acronym coined by Bill Wake for remembering a set of criteria used to\\u00a0evaluate the quality of user stories. The criteria are Independent, Negotiable, Valuable,\\u00a0Estimatable, Sized correctly (small), and Testable. See also user story.\"}]", "continuous representation": "[]", "pig": "[{\"term\": \"chickens\", \"definition\": \"A metaphor used by some Scrum teams to indicate that people are invested\\u00a0in the goal of the Scrum team, but at a level of involvement (not accountable) rather\\u00a0than commitment. Best used to refer to people outside of the Scrum team. Derived\\u00a0from an old joke about a chicken and a pig: \\u201cIn a ham-and-eggs breakfast, the chicken\\u00a0is involved, but the pig is committed.\\\" Contrast with pigs.\"}]", "product backlog grooming": "[{\"term\": \"product backlog grooming\", \"definition\": \"Product backlog grooming refers to the activities of writing and refining, estimating, and\\u00a0prioritizing product backlog items. Synonymous with product backlog refinement.\"}]", "application lifecycle management": "[]", "one-address instruction": "[]", "control clustering": "[]", "protocol": "[]", "slack": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "spooler": "[]", "schedule model": "[]", "separate documentation": "[]", "object code": "[]", "memory dump": "[]", "pixel": "[]", "product line engineering": "[]", "failure mode": "[]", "monitor and control risks": "[]", "executive state": "[]", "maintained": "[]", "procedure-oriented language": "[]", "corrective action": "[]", "functional analysis": "[{\"term\": \"kano model analysis\", \"definition\": \"A customer satisfaction model developed by Japanese research\\u00a0Noriaki Kano in the early 1980s. Kano analysis is a\\u00a0set of ideas and techniques that help determine\\u00a0perceived user satisfaction with product features (e.g., product backlog items). Kano analysis uses a questionnaire were customers are asked both a functional (\\\"How would you feel if the feature is included?\\\") and dysfunctional (\\\"How would you feel if the feature were not included?\\\") form of a question about individual\\u00a0features. Based on how users answer these questions, Kano analysis classifies a feature as either mandatory (has to be in the product), linear (customer satisfaction will be linear with increases in quantity or quality of the feature), or exciter/delighter (customer satisfaction will be very high since customers didn't even know they wanted this feature until they saw it, and now they believe they can't live without it). Kano model analysis is one technique that can be used to determine the level of investment (if any) to make in each product backlog item and therefore is a technique that can be used to help prioritize product backlog items.\"}]", "customer-value-creation sprint": "[{\"term\": \"customer-value-creation sprint\", \"definition\": \"A sprint that is focused on the production of results that a customer would deem valuable. As a rule, all sprints should produce customer value. However, during the initiation of a new product or project (i.e., during product-level planning / envisioning), there might be work (possibly organized into sprints) that is focused on the acquisition of information that would be helpful to determine whether or not the product should be funded. For example, work to validate an important assumption that is a critical factor in approving/moving forward with the development of the product. Such work, if done in sprints, would not be customer-value-creation sprints since they do produce results that would be valuable to the end-customer.\"}]", "version": "[{\"term\": \"release\", \"definition\": \"1. A combination of features that when packaged together make for a coherent\\u00a0deliverable to customers or users. 2. A version of a product that is promoted for\\u00a0use or deployment. Releases represent the rhythm of business-value delivery and\\u00a0should align with defined business cycles.\"}]", "development": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "visual display unit": "[]", "external output": "[]", "post-implementation review": "[]", "third-generation language": "[]", "quality requirement": "[]", "exit routine": "[]", "organizational process assets": "[]", "subject domain responsibility": "[]", "road map": "[{\"term\": \"product roadmap\", \"definition\": \"A description of the incremental nature of how a product will\\u00a0be built and delivered over time, along with the important factors that drive each\\u00a0individual release. Useful when developing a product that will have more than one\\u00a0release. See also envisioning.\"}]", "kernel entity": "[]", "work task": "[]", "acceptability": "[]", "leaf diagram": "[]", "software requirements analysis": "[{\"term\": \"specification by example\", \"definition\": \"See acceptance-test-driven development.\"}]", "web site": "[]", "responsibility assignment matrix": "[]", "conflict": "[]", "table of contents": "[]", "three-address instruction": "[]", "structure chart": "[]", "sequential": "[{\"term\": \"sequential process\", \"definition\": \"See plan-driven process.\"}]", "software piracy": "[]", "usability laboratory": "[]", "migrated key": "[]", "call by name": "[]", "system description": "[]", "persistence schema": "[]", "iteration velocity": "[]", "post-mortem dump": "[]", "budgeted cost of work performed": "[]", "scheduler": "[]", "project leader": "[]", "level 1 termination routine": "[]", "interactive": "[]", "error prediction": "[]", "system design": "[]", "operational product": "[]", "mechanism loopback": "[]", "documenter": "[]", "client": "[{\"term\": \"fixed-price contract\", \"definition\": \"A contract between a contractor (e.g., a service provider) and a client that provides for a firm price that is not subject to adjustment based on actual costs incurred by the contractor. This contract type transfers from the client to the contractor all of the cost risk. For the contractor to provide a fixed price, the client would have to specify in great detail up front what the client would like the contractor to do. Doing so would violate a core agile principle \\u2013 specifying up front very detailed information when both parties have the least amount of information is most often not practical. So, as a rule, organizations that have adopted agile should avoid fixed-price contracts.\"}]", "client-side": "[]", "actual parameter": "[]", "baseline function point count": "[]", "appraisal team leader": "[]", "random cause": "[]", "topic": "[]", "dynamic skeleton": "[]", "duration": "[{\"term\": \"cadence\", \"definition\": \"A regular, predictable rhythm or heartbeat. Sprints of consistent duration establish a cadence for a development effort. See also synchronization.\"}]", "reserve": "[]", "marketing organization": "[]", "outer cardinality": "[]", "static dump": "[]", "system entity": "[{\"term\": \"acceptance test\", \"definition\": \"1. The testing carried out to verify that the acceptance criteria have been met. 2. A test that defines the business value each product backlog item must deliver. It may verify functional requirements or nonfunctional requirements such as performance or reliability. It is used to help guide development (Crispin and Gregory 2009). 3. Formal testing with respect to user needs, requirements, and business processes conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user, customers, or other authorized entity to determine whether or not to accept the system (IEEE 610).\"}]", "primary key": "[]", "virtual team": "[]", "alignment": "[]", "branch testing": "[]", "interface testing": "[]", "all-at-once development": "[{\"term\": \"iteration\", \"definition\": \"A self-contained development cycle focused on performing all of the work\\u00a0necessary to produce a valuable outcome. See also all-at-once development, sprint.\"}]", "entry point": "[]", "establish and maintain": "[{\"term\": \"cadence\", \"definition\": \"A regular, predictable rhythm or heartbeat. Sprints of consistent duration establish a cadence for a development effort. See also synchronization.\"}]", "identify risks": "[]", "n-level address": "[]", "trace link": "[]", "current extent": "[]", "early finish date": "[]", "multiplicity": "[]", "nanoinstruction": "[]", "musketeer attitude": "[{\"term\": \"Musketeer attitude\", \"definition\": \"1. All for one and one for all. 2. The attitude among members of a\\u00a0team that they are all in the same boat and that they will win or lose together as a team.\"}]", "second generation language": "[]", "level 1 initiation routine": "[]", "functional language": "[]", "Petri net": "[]", "invitation for bid": "[]", "computer resources": "[]", "inner cardinality": "[]", "anticipatory process": "[{\"term\": \"anticipatory process\", \"definition\": \"See plan-driven process.\"}]", "tag slide": "[]", "trade secret": "[]", "bottom-up": "[{\"term\": \"self-organization\", \"definition\": \"1. A bottom-up emergent property of a complex adaptive system\\u00a0whereby the organization of the system emerges over time as a response to its environment.\\u00a02. A property of a development team that organizes itself over time, without\\u00a0an external dominating force applying traditional top-down, command-and-control\\u00a0management. 3. Reflects the management philosophy whereby operational decisions\\u00a0are delegated as much as possible to those who have the most detailed knowledge of\\u00a0the consequences and practicalities associated with those decisions. See also complex\\u00a0adaptive system, emergence.\"}]", "computer performance evaluation": "[]", "interconnection group": "[]", "common storage": "[]", "control program": "[]", "task inversion": "[]", "input primitive": "[]", "quick design session": "[]", "nonintrinsic relationship": "[]", "test specification": "[]", "mandatory nonidentifying relationship": "[]", "sign up for tasks": "[]", "plan procurement": "[]", "release management": "[]", "task submission": "[]", "done": "[{\"term\": \"done-done\", \"definition\": \"A term often used by teams to mean the work performed during the sprint is \\u201creally\\u201d done. Done to the point where the customer would think the work is done (potentially deliverable). Teams that use \\\"done-done\\\" often use the term done to mean \\u201cwe did as much work as we were prepared to do!\\u201d Well-functioning agile teams don\\u2019t need two concepts (done and done-done). For these teams, done really means done-done. See also definition of done.\"}]", "test generator": "[]", "network logic": "[]", "language definition": "[]", "service management": "[]", "coding": "[{\"term\": \"Boy Scout rule\", \"definition\": \"1. Always leave the campground cleaner than you found it. If you\\u00a0find a mess on the ground, clean it up regardless of who might have made the mess.\\u00a02. Every time you are in an area of the code doing work, always leave the code a little\\u00a0cleaner, not a little messier, than you found it. See also technical debt.\"}]", "tacit knowledge": "[{\"term\": \"tacit knowledge\", \"definition\": \"Unwritten and unspoken knowledge (including insights, intuitions,\\u00a0and hunches) that is hard, but not impossible, to articulate with formal language.\\u00a0The opposite of explicit or formal knowledge. Sometimes referred to as \\u201cknow-how.\\u201d\"}]", "adaptation data": "[{\"term\": \"adaptation\", \"definition\": \"One of the three pillars of empirical process control; feedback is used to\\u00a0make an adjustment to the work product being developed or the process by which it is\\u00a0being developed. See also empirical process control, inspection, transparency. Contrast with prediction.\"}]", "requirements elicitation": "[]", "basic interworking facility": "[]", "block allocation": "[]", "reproducibility": "[]", "unconditional jump": "[]", "pseudo instruction": "[]", "model name": "[]", "cost variance": "[]", "prescriptive process": "[{\"term\": \"prescriptive process\", \"definition\": \"See plan-driven process.\"}]", "level 1 control break": "[]", "minimum marketable features": "[{\"term\": \"minimum marketable features (MMFs)\", \"definition\": \"The smallest or minimum set of functionality\\u00a0related to a feature that must be delivered for the customer to perceive value (for it\\u00a0to be marketable). Contrast with minimum releasable features.\"}]", "application": "[{\"term\": \"economically sensible Scrum\", \"definition\": \"1. The application of core agile and Scrum principles throughout an organization's value chain to ensure the fast, flexible, and economically sensible flow of work across the organization. 2. The application of the Scrum framework within an economic context grounded in core agile and Scrum principles.\"}]", "basic flow": "[]", "data breakpoint": "[]", "problem-oriented language": "[]", "partial cluster": "[]", "art metrics": "[]", "operator manual": "[]", "continuous risk management": "[]", "derived attribute": "[]", "schedule development": "[{\"term\": \"release planning\", \"definition\": \"Longer-term planning that answers questions like \\u201cWhen will we\\u00a0be done?\\u201d or \\u201cWhich features can I get by the end of the year?\\u201d or \\u201cHow much will\\u00a0this cost?\\u201d Release planning must balance customer value and overall quality against\\u00a0the constraints of scope, schedule, and budget. See also release plan.\"}]", "test automation": "[{\"term\": \"test automation\", \"definition\": \"The use of special\\u00a0software\\u00a0(separate from the software being tested) to control the execution of tests and the comparison of actual outcomes with predicted outcomes (Wikipedia). Test automation is critical for supporting many other technical practices such as code refactoring, continuous integration, and continuous delivery.\"}]", "component testing": "[{\"term\": \"acceptance criteria\", \"definition\": \"1. The external quality characteristics specified by the product owner from a business or stakeholder perspective. Acceptance criteria define desired behavior and are used to determine whether a product backlog item has been successfully developed. 2. The exit criteria that a component or a system must satisfy in order to be accepted by a user, customer, or other authorized entity (IEEE 610).\"}]", "release goal": "[{\"term\": \"release goal\", \"definition\": \"A clear statement of the purpose and desired outcome of a release. A\\u00a0release goal is created by considering many factors, including the target customers,\\u00a0high-level architectural issues, and significant marketplace events. See also release.\"}]", "level 1 record group": "[]", "mock objects": "[]", "threat": "[]", "user documentation": "[]", "mandatory": "[{\"term\": \"kano model analysis\", \"definition\": \"A customer satisfaction model developed by Japanese research\\u00a0Noriaki Kano in the early 1980s. Kano analysis is a\\u00a0set of ideas and techniques that help determine\\u00a0perceived user satisfaction with product features (e.g., product backlog items). Kano analysis uses a questionnaire were customers are asked both a functional (\\\"How would you feel if the feature is included?\\\") and dysfunctional (\\\"How would you feel if the feature were not included?\\\") form of a question about individual\\u00a0features. Based on how users answer these questions, Kano analysis classifies a feature as either mandatory (has to be in the product), linear (customer satisfaction will be linear with increases in quantity or quality of the feature), or exciter/delighter (customer satisfaction will be very high since customers didn't even know they wanted this feature until they saw it, and now they believe they can't live without it). Kano model analysis is one technique that can be used to determine the level of investment (if any) to make in each product backlog item and therefore is a technique that can be used to help prioritize product backlog items.\"}]", "software product": "[{\"term\": \"product vision\", \"definition\": \"A brief statement of the desired future state that would be achieved by\\u00a0developing and deploying a product. A good vision should be simple to state and provide\\u00a0a coherent direction to the people who are asked to realize it. See also envisioning.\"}]", "materiel": "[]", "collective ownership": "[]", "sample instance": "[]", "context": "[{\"term\": \"sprint demo\", \"definition\": \"1. An activity of a sprint review where the completed (done) product\\u00a0backlog items are demonstrated with the goal of promoting an information-rich discussion\\u00a0between the Scrum team and other sprint review participants. 2. A term that is\\u00a0frequently used synonymously to refer to the entire sprint review. For further clarification between a sprint demo and sprint review, please read Ken Rubin's blog entitled:\\u00a0It\\u2019s a Sprint Review Not a Sprint Demo!\\u00a0See also sprint review.\"}]", "software requirements management": "[]", "wearout-failure period": "[]", "quality assurance": "[]", "sequential cohesion": "[]", "on-screen documentation": "[]", "allocated configuration identification": "[]", "validity summary": "[]", "visibility": "[]", "process area": "[{\"term\": \"in-process product\", \"definition\": \"A product that is currently under development, already live in\\u00a0production, or currently being sold. See also portfolio planning.\"}]", "constraint": "[]", "sizing": "[{\"term\": \"T-shirt sizing\", \"definition\": \"A form of estimation that is often, although not exclusively, used to size portfolio backlog items. T-shirt sizing is based on the concept of binning. The bins are typically assigned labels corresponding to those commonly used with T-shirt sizes: extra small, small, medium, large, extra large, etc. Frequently a cost range is associated with each size (e.g., an extra small project will cost between $10k and $25k) to provide organization-specific meaning to each T-shirt size. See also binning.\\u00a0\"}]", "problem definition": "[]", "collection-valued class": "[]", "risk analysis": "[]", "genchi genbutsu": "[{\"term\": \"genchi genbutsu\", \"definition\": \"A Japanese phrase (\\u73fe\\u5730\\u73fe\\u7269) that is frequently translated as:\\u00a0\\\"go and see for yourself.\\\" Genchi Genbutsu is a\\u00a0key principle of the Toyota Production System. According to Jeff Liker, author of The Toyota Way, it suggests that you\\u00a0cannot be sure you really understand any part of a business problem unless you go\\u00a0to the genba (the 'real place' - where work is done)\\u00a0and see for yourself firsthand. It is unacceptable to take anything for granted or to rely on the reports of others. See also genba.\"}]", "must-have features": "[{\"term\": \"must-have features\", \"definition\": \"The set of features that must be present in the upcoming release\\u00a0for the release to be viable. Synonymous with minimum releasable features. Contrast\\u00a0with nice-to-have features, won\\u2019t-have features.\"}]", "rapid prototyping": "[]", "imperative statement": "[]", "assembly code": "[]", "customer unit": "[]", "functional service": "[]", "stratified language": "[]", "input argument": "[]", "daily scrum": "[{\"term\": \"daily scrum\", \"definition\": \"A synchronization, inspection, and adaptive planning activity that a\\u00a0development team performs each day. This core practice in the Scrum framework is\\u00a0timeboxed to no more than 15 minutes. Synonymous with daily stand-up. See also\\u00a0inspect and adapt.\"}]", "absolute code": "[]", "arc": "[]", "resident control program": "[]", "kanban board": "[]", "adaptation": "[{\"term\": \"adaptation\", \"definition\": \"One of the three pillars of empirical process control; feedback is used to\\u00a0make an adjustment to the work product being developed or the process by which it is\\u00a0being developed. See also empirical process control, inspection, transparency. Contrast with prediction.\"}]", "complex domain": "[{\"term\": \"complex domain\", \"definition\": \"1. A situation in which things are more unpredictable than they\\u00a0are predictable. If there is a right answer, we will know it only with hindsight. 2. One\\u00a0of the domains in the Cynefin framework. See also Cynefin. Contrast with chaotic\\u00a0domain, complicated domain, disorder domain, simple domain.\"}]", "symbolic language": "[]", "higher order language": "[]", "representation property": "[]", "realtime": "[]", "non-developed source statement": "[]", "sensitivity analysis": "[]", "uniqueness constraint": "[]", "activity": "[{\"term\": \"activity\", \"definition\": \"1. A Scrum practice that involves taking action or performing a process, for\\u00a0example, sprint-planning activity, daily scrum activity, sprint review activity, and\\u00a0sprint retrospective activity. 2. In a general sense, the work performed by the Scrum\\u00a0team members such as writing code, performing tests, creating estimates, and so on.\\u00a0See also practice.\"}]", "main program": "[]", "assessment instrument": "[]", "blocking factor": "[]", "ScrumMaster": "[{\"term\": \"ScrumMaster\", \"definition\": \"The coach, facilitator, impediment remover, and servant leader of\\u00a0the Scrum team. The ScrumMaster is one of the three roles on a Scrum team. The\\u00a0ScrumMaster provides process leadership and helps the Scrum team and the rest of\\u00a0the organization develop their own high-performance, organization-specific Scrum\\u00a0approach. See also Scrum team, product owner, development team,\\u00a0servant leader.\"}]", "logic programming language": "[]", "request for tender": "[]", "line of code": "[{\"term\": \"pair programming\", \"definition\": \"1. A technical practice in which two\\u00a0programmers\\u00a0work together at one workstation (one screen, keyboard, and mouse among the pair). One person, the\\u00a0driver, writes\\u00a0code\\u00a0while the other person, the\\u00a0observer\\u00a0or\\u00a0navigator,\\u00a0reviews\\u00a0each line of code as it is typed in. The two programmers switch roles frequently. (based on Wikipedia) 2.\\u00a0One of the original 12\\u00a0extreme programming\\u00a0practices. 3. A technique that allows for very rapid feedback of code as it is being created. See also technical practices.\"}]", "probability and impact matrix": "[]", "test plan": "[]", "project management information system": "[]", "link validity": "[]", "data set prefix": "[]", "contribution": "[]", "base practice": "[]", "logical file": "[]", "vertical microinstruction": "[]", "requirements review": "[]", "existence constraint": "[]", "data-flow trace": "[]", "warning": "[]", "mob programming": "[]", "nice-to-have features": "[{\"term\": \"nice-to-have features\", \"definition\": \"Features that are targeted for the upcoming release but could\\u00a0be excluded if there are insufficient resources to finalize their development. Contrast\\u00a0with must-have features, won\\u2019t-have features.\"}]", "dynamic model": "[]", "state data": "[]", "event-sequencing logic": "[]", "project team directory": "[]", "invest": "[{\"term\": \"INVEST\", \"definition\": \"An acronym coined by Bill Wake for remembering a set of criteria used to\\u00a0evaluate the quality of user stories. The criteria are Independent, Negotiable, Valuable,\\u00a0Estimatable, Sized correctly (small), and Testable. See also user story.\"}]", "program-sensitive fault": "[]", "development specification": "[]", "planning game": "[]", "background processing": "[]", "submit primitive": "[]", "laptop computer": "[]", "batch size": "[{\"term\": \"batch size\", \"definition\": \"The cardinality of a set of items to be processed at some future step. See\\u00a0also work in process.\"}]", "operational testing": "[]", "character set": "[]", "third generation language": "[]", "architectural epic kanban": "[]", "marking": "[]", "device": "[]", "low-level language": "[]", "multiple inheritance": "[]", "assumption": "[{\"term\": \"assumption\", \"definition\": \"A guess, or belief, that is presumed to be true, real, or certain even\\u00a0though there is no validated learning to know that it is true. Contrast with validated\\u00a0learning.\"}]", "analog": "[]", "authoring system": "[]", "postcondition": "[]", "N-ary relationship": "[]", "code churn": "[]", "source program object module": "[]", "clear": "[{\"term\": \"release goal\", \"definition\": \"A clear statement of the purpose and desired outcome of a release. A\\u00a0release goal is created by considering many factors, including the target customers,\\u00a0high-level architectural issues, and significant marketplace events. See also release.\"}]", "throughput": "[]", "predictive metric value": "[]", "single-address instruction": "[]", "hierarchical decomposition": "[]", "desktop publishing": "[]", "problem description": "[]", "estimate activity durations": "[]", "information management": "[{\"term\": \"lean ux\", \"definition\": \"A practice that integrates design thinking, core agile principles, and lean startup principles\\u00a0that is used by a cross-functional team of designers, developers, and product managers to bring the true nature of the work to light\\u00a0faster, with less emphasis on deliverables and greater focus on the\\u00a0actual experience\\u00a0being designed. Lean UX is based on the following core principles:\"}]", "expandability": "[]", "procedural programming language": "[]", "web app": "[]", "earned value": "[]", "incipient failure": "[]", "multi-component system": "[]", "epilog breakpoint": "[]", "single-valued property": "[]", "output": "[{\"term\": \"output measure\", \"definition\": \"Describes what was produced (e.g., number of widgets created, or number of hamburgers served) or the services you delivered (e.g., number of clients). Output measures do not address the value or impact of work to either internal or external stakeholders. An example output measure is velocity. See blog post \\\"Output vs. Outcome\\u2014Measuring Business Success with Agile.\\\" Contrast with outcome measure.\"}]", "view diagram": "[]", "class": "[{\"term\": \"user role\", \"definition\": \"1. The name for a class of product users. 2. One of the key elements of a\\u00a0user story that defines the recipient of the value delivered by a user story. See also user story.\"}]", "record element type": "[]", "product line": "[]", "variability": "[{\"term\": \"variability\", \"definition\": \"The spread or dispersion of a set of data representing non-identical outcomes.\\u00a0In manufacturing, variability is always waste. In product development, some\\u00a0variability is necessary to develop innovative solutions. See also waste.\"}]", "team": "[{\"term\": \"component team\", \"definition\": \"1. A team that focuses on the creation of one or more components of\\u00a0a larger product that a customer would purchase. Component teams create assets or\\u00a0components that are then reused by other teams to assemble customer-valuable solutions. 2. Team that is cross-functional (multi-disciplinary), single component focused.\\u00a0Contrast with feature team.\"}]", "nondeliverable item": "[]", "developed source statement": "[]", "page frame": "[]", "prestore": "[]", "global data": "[]", "object identifier": "[]", "common-environment content coupling": "[]", "network path": "[]", "scheduled start date": "[]", "manufacturing phase": "[]", "network open end": "[]", "primary entity-type": "[]", "top-down design": "[]", "egoless programming": "[]", "milestone schedule": "[]", "inheritance": "[]", "mechanicals": "[]", "performance specification": "[{\"term\": \"sprint goal\", \"definition\": \"A high-level summary of the goal the product owner would like to\\u00a0accomplish during the sprint. Frequently elaborated through a specific set of product\\u00a0backlog items.\"}]", "node tree": "[]", "passive white space": "[]", "context-sensitive help": "[]", "Cynefin": "[{\"term\": \"Cynefin\", \"definition\": \"A sense-making framework that helps us understand the situation in which\\u00a0we have to operate and decide on a situation-appropriate approach (Snowden and\\u00a0Boone 2007).\"}]", "design-to cost": "[]", "assemble-and-go": "[]", "authority": "[{\"term\": \"sprint goal\", \"definition\": \"A high-level summary of the goal the product owner would like to\\u00a0accomplish during the sprint. Frequently elaborated through a specific set of product\\u00a0backlog items.\"}]", "task-clustering criteria": "[]", "test bed": "[]", "call arrow": "[]", "loader": "[]", "single machine microinstruction": "[]", "actual cost of work performed": "[{\"term\": \"marginal economics\", \"definition\": \"Determining if spending the next chunk of money is justified by the return that investment would generate. When applying margin economics, we consider\\u00a0all work that has been performed on the product up\\u00a0to the decision point as a \\u201csunk cost\\u201d\\u00a0and therefore don't consider the sunk cost when determining whether to spend the next chunk of money. See portfolio planning.\"}]", "meta-meta-entity": "[]", "actual cost": "[]", "workaround": "[]", "en dash": "[]", "nomenclature standard": "[]", "associative literal": "[]", "post-development review": "[]", "measure of performance": "[]", "relocatable address": "[]", "reliability": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "functional complexity": "[]", "software-intensive system": "[]", "agile software management": "[]", "retrospective": "[{\"term\": \"sprint retrospective\", \"definition\": \"An inspect-and-adapt activity performed at the end of every\\u00a0sprint. The sprint retrospective is a continuous improvement opportunity for a\\u00a0Scrum team to review its process (approaches to performing Scrum) and to identify\\u00a0opportunities to improve it. See also inspect and adapt.\"}]", "fitness-for-use test": "[]", "build process": "[]", "raw requirement": "[]", "software quality": "[{\"term\": \"Extreme Programming (XP)\", \"definition\": \"1. A software development methodology that is intended to improve software quality and responsiveness to changing customer requirements (source Wikipedia). 2. An agile development approach that is complementary\\u00a0to Scrum. Extreme Programming specifies important technical practices that development\\u00a0teams use to manage the flow of task-level work during sprint execution. See\\u00a0also agile.\"}]", "software unit": "[]", "rolling wave planning": "[]", "real address": "[]", "timer event": "[]", "data definition": "[]", "abnormal end": "[]", "data functions": "[]", "derived participant party": "[]", "system analysis": "[]", "inspection": "[{\"term\": \"inspection\", \"definition\": \"One of the three pillars of empirical process control, involving thoughtful\\u00a0examination and processing of feedback to make adaptation decisions regarding\\u00a0the process or product. See also adaptation, empirical process control, transparency.\"}]", "business owners": "[]", "assist": "[]", "checkout": "[]", "independent entity": "[]", "technique": "[{\"term\": \"technique\", \"definition\": \"A defined procedure that is used to perform some or all of an activity or\\u00a0support an approach. See also activity, approach.\"}]", "white-box testing": "[]", "executable requirements specification": "[]", "decomposition": "[]", "respecialize unspecialize": "[]", "assembly": "[]", "incremental compiler": "[]", "commit privileges": "[]", "direct insert subroutine": "[]", "line manager": "[]", "stakeholder value": "[{\"term\": \"stakeholder value\", \"definition\": \"The value that a solution delivers to stakeholders. Sometimes used\\u00a0interchangeably with customer value. See also stakeholder.\"}]", "signal": "[]", "idle workers": "[{\"term\": \"idle workers\", \"definition\": \"People who have available capacity to do more work because they are\\u00a0not currently 100% utilized. Contrast with idle work.\"}]", "resource definition": "[]", "manual": "[]", "Open Database Connectivity": "[]", "trap": "[]", "iterative and incremental process": "[{\"term\": \"iterative and incremental process\", \"definition\": \"A style of development that leverages both iterative\\u00a0development and incremental development. See also incremental development,\\u00a0iterative development.\"}]", "change control system": "[]", "system definitions": "[]", "implementable standard": "[]", "product authority": "[]", "code": "[{\"term\": \"refactoring\", \"definition\": \"A technique for restructuring an existing body of code by improving/simplifying its internal structure (design) without changing its external behavior.\\u00a0Refactoring is one of the principal techniques for managing technical debt. See also\\u00a0technical debt, technical practices.\"}]", "input-output coupling": "[]", "element": "[]", "op code": "[]", "condition stub": "[]", "product family": "[]", "direct metric value": "[]", "service export": "[]", "label": "[{\"term\": \"binning\", \"definition\": \"A technique for accurately grouping together items of similar size. Useful when we don't have the precision necessary to discriminate among similarly sized items, so instead we group together all items that fall within a given small interval and label all such items with a value (often the central value) that is representative of the interval.\"}]", "party": "[]", "multiset": "[]", "multiprogramming": "[]", "conceptual data model": "[]", "third normal form": "[]", "driven testing": "[]", "fail safe": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "object-oriented structured design": "[]", "recursion": "[{\"term\": \"plan-driven process\", \"definition\": \"A style of development that attempts to plan for and anticipate\\u00a0up front all of the features a user might want in the end product and to determine\\u00a0how best to build those features. The work plan is based on execution of a sequential\\u00a0set of work-specific phases. Synonymous with anticipatory process, predictive process,\\u00a0prescriptive process, sequential process, traditional development process, waterfall\\u00a0process.\"}]", "destructive read": "[]", "set": "[{\"term\": \"batch size\", \"definition\": \"The cardinality of a set of items to be processed at some future step. See\\u00a0also work in process.\"}]", "action of interest": "[]", "code of ethics standard": "[]", "multiset cardinality": "[]", "license": "[]", "interpreter": "[]", "nanostore": "[]", "practices": "[{\"term\": \"practice\", \"definition\": \"The way in which a principle is supported or realized. For example, the\\u00a0principle of demonstrating progress is supported by the sprint review Scrum practice.\\u00a0See activity, artifact, role, rule. See also principle, values.\"}]", "test data generator": "[]", "machine code": "[]", "support software": "[]", "traceable": "[]", "execution efficiency": "[]", "design entity": "[]", "entity type": "[]", "buyer": "[]", "relocator": "[]", "management": "[{\"term\": \"T-shirt sizing\", \"definition\": \"A form of estimation that is often, although not exclusively, used to size portfolio backlog items. T-shirt sizing is based on the concept of binning. The bins are typically assigned labels corresponding to those commonly used with T-shirt sizes: extra small, small, medium, large, extra large, etc. Frequently a cost range is associated with each size (e.g., an extra small project will cost between $10k and $25k) to provide organization-specific meaning to each T-shirt size. See also binning.\\u00a0\"}]", "move": "[{\"term\": \"strategic filter\", \"definition\": \"The decision criteria used by an organization to evaluate whether a\\u00a0proposed product meets the strategic criteria to move forward for additional consideration.\\u00a0Contrast with economic filter.\"}]", "information system needs": "[]", "natural language": "[{\"term\": \"tacit knowledge\", \"definition\": \"Unwritten and unspoken knowledge (including insights, intuitions,\\u00a0and hunches) that is hard, but not impossible, to articulate with formal language.\\u00a0The opposite of explicit or formal knowledge. Sometimes referred to as \\u201cknow-how.\\u201d\"}]", "operating environment": "[]", "definition": "[{\"term\": \"definition of done\", \"definition\": \"A checklist of the types of work that the team is expected to\\u00a0successfully complete by the end of the sprint, before it can declare its work to be\\u00a0potentially shippable. A bare-minimum definition of done should yield a complete\\u00a0slice of product functionality, one that has been designed, built, integrated, tested,\\u00a0and documented and will deliver validated customer value. Contrast with definition\\u00a0of ready.\"}]", "stop": "[]", "disclaimer": "[]", "electronic publishing": "[]", "address format": "[]", "linking loader": "[]", "software quality metric": "[]", "exploitation": "[{\"term\": \"exploitation\", \"definition\": \"Making a decision based on the certainty of the information we currently\\u00a0possess. Contrast with exploration.\"}]", "cardinality of a multiset": "[]", "dependent entity": "[]", "execution time": "[]", "actual time estimation": "[]", "non-delivered source statement": "[]", "language": "[{\"term\": \"tacit knowledge\", \"definition\": \"Unwritten and unspoken knowledge (including insights, intuitions,\\u00a0and hunches) that is hard, but not impossible, to articulate with formal language.\\u00a0The opposite of explicit or formal knowledge. Sometimes referred to as \\u201cknow-how.\\u201d\"}]", "process management": "[{\"term\": \"antifragility\", \"definition\": \"Having the property of being antifragile. See also antifragile.\"}]", "subclass": "[]", "product standard": "[]", "baseline management": "[]", "instruction length": "[]", "system effectiveness": "[]", "measurement analyst": "[]", "spool": "[]", "done list": "[]", "integration testing": "[]", "high level language": "[]", "users' manual": "[]", "usability test": "[]", "repo surgery": "[]", "control statement": "[]", "closed subroutine": "[]", "object type set": "[]", "image processing": "[]", "reliability growth": "[]", "export process": "[]", "intrinsic relationship": "[]", "project chartering": "[{\"term\": \"project chartering\", \"definition\": \"The set of up-front work needed to define a project at a sufficient\\u00a0level of detail that a funding decision can be made. Synonymous with project inception,\\u00a0project initiation.\"}]", "project integration management": "[]", "software product evaluation": "[]", "public": "[]", "to-compete-performance index": "[]", "system element": "[]", "planning board": "[]", "event sequence diagram": "[]", "system table": "[]", "structure clash": "[]", "computerize": "[]"}, "2": {"development testing": "[]", "external stakeholders": "[{\"term\": \"external stakeholders\", \"definition\": \"Stakeholders who are typically external to the organization\\u00a0that is developing a product, for example, customers, partners, and regulators. See\\u00a0also stakeholders. Contrast with internal stakeholders.\"}]", "transaction schema": "[{\"term\": \"transaction cost\", \"definition\": \"The fixed (overhead cost) and variable costs of executing (doing the work required to realize) the items in a batch of work. One of the two costs in determing the economic batch size in a U-curve optimization. In manufacturing, transaction cost is the cost of sending a batch to the next process.\\u00a0Contrast with holding cost. See also U-curve optimization.\"}]", "magic string": "[]", "time slicing": "[]", "interoperability": "[]", "prolog breakpoint": "[]", "competent": "[]", "lean": "[{\"term\": \"muda\", \"definition\": \"A Japanese term (\\u7121\\u99c4) meaning \\\"futility; uselessness; wastefulness.\\\" Muda is a key removal-of-waste concept (along with Mura and Muri) in lean manufacturing that focuses on the removal of non-value adding steps.\\u00a0\"}]", "back linking": "[]", "minimum delay programming": "[]", "pre-condition": "[]", "post-condition": "[]", "dynamic invocation": "[]", "risk leverage factor": "[]", "dynamic binding": "[]", "chain": "[{\"term\": \"enterprise value chain\", \"definition\": \"See value chain.\"}]", "localization": "[]", "project communications management": "[]", "product owner": "[{\"term\": \"product owner\", \"definition\": \"The empowered central point of product leadership. One of the three\\u00a0roles on a Scrum team; the single voice of the stakeholder community to the Scrum\\u00a0team. The product owner defines what to do and in what order to do it. See also\\u00a0Scrum team, ScrumMaster, development team.\"}]", "performance testing": "[]", "generalization network": "[]", "domain": "[{\"term\": \"chaotic domain\", \"definition\": \"1. A situation that requires a rapid response. We are in a crisis and\\u00a0need to act immediately to prevent further harm and reestablish at least some order.\\u00a02. One of the domains in the Cynefin framework. See also Cynefin. Contrast with\\u00a0complex domain, complicated domain, disorder domain, simple domain.\"}]", "big visible charts": "[]", "conversion functionality": "[]", "metrics sample": "[]", "temporal cohesion": "[]", "processing": "[{\"term\": \"anticipatory process\", \"definition\": \"See plan-driven process.\"}]", "indicator": "[]", "sprint retrospective": "[{\"term\": \"sprint retrospective\", \"definition\": \"An inspect-and-adapt activity performed at the end of every\\u00a0sprint. The sprint retrospective is a continuous improvement opportunity for a\\u00a0Scrum team to review its process (approaches to performing Scrum) and to identify\\u00a0opportunities to improve it. See also inspect and adapt.\"}]", "previously developed software": "[]", "compaction": "[]", "acceptance-test-driven development": "[{\"term\": \"acceptance-test-driven development (ATDD)\", \"definition\": \"A technique in which the participants collaboratively discuss acceptance criteria, using examples, and then distill them into a set of concrete acceptance tests before development begins. Synonymous with specification by example.\"}]", "Data Movement Service": "[]", "capex": "[{\"term\": \"capital expenditure (CapEx)\", \"definition\": \"1. Funds used by a company to acquire or upgrade\\u00a0physical assets\\u00a0such as property, industrial buildings or equipment. It is often used to undertake new projects or investments by the firm.\\u00a0This type of outlay is also made by companies to maintain or increase the\\u00a0scope\\u00a0of their operations (investorpedia). 2. Capitalizing an expense means you don't offset your revenue against the expense in the\\u00a0year you purchased or built it. Instead you list the purchase as an asset on your balance sheet and then each year (through depreciation) you offset revenue on your income statement against that year\\u2019s depreciated amount. Contrast with operational expense.\"}]", "specification language": "[{\"term\": \"specification by example\", \"definition\": \"See acceptance-test-driven development.\"}]", "external event": "[]", "function point table": "[]", "post-processor": "[]", "request for information": "[]", "ideal hours": "[{\"term\": \"ideal hour\", \"definition\": \"A unit for estimating the size of the design, build, integrate, and test work,\\u00a0represented as sprint backlog tasks. Often referred to as an effort-hour, person-hour,\\u00a0or man-hour. See also ideal day.\"}]", "enabling": "[]", "routine": "[]", "goal": "[{\"term\": \"sprint goal\", \"definition\": \"A high-level summary of the goal the product owner would like to\\u00a0accomplish during the sprint. Frequently elaborated through a specific set of product\\u00a0backlog items.\"}]", "virtual machine": "[]", "custom software": "[]", "write": "[{\"term\": \"conditions of satisfaction\", \"definition\": \"The conditions under which a product owner would be\\u00a0satisfied that a product backlog item is done. Conditions of satisfaction are acceptance\\u00a0criteria that clarify the desired behavior. See also acceptance criteria.\"}]", "unique function": "[]", "interrupt": "[]", "body metadata": "[]", "process improvement program": "[]", "invocation deliver": "[]", "undirected graph": "[]", "distribution copy": "[]", "effectiveness analysis": "[]", "tightly coupled message communication with reply": "[]", "fault masking": "[]", "work authorization system": "[]", "change request": "[]", "exception handling": "[]", "cycle stealing": "[]", "error": "[]", "interpret": "[{\"term\": \"Scrum framework\", \"definition\": \"A collection of values, principles, practices, and rules that form\\u00a0the foundation of Scrum-based development. See also Scrum.\"}]", "operation and maintenance phase": "[]", "sprint planning": "[{\"term\": \"sprint planning\", \"definition\": \"A time when the Scrum team gathers to agree on a sprint goal and\\u00a0determine what subset of the product backlog it can deliver during the forthcoming\\u00a0sprint. During sprint planning, a sprint backlog is produced to help the team acquire\\u00a0confidence that it can deliver the committed product backlog items. See also sprint\\u00a0backlog, sprint goal.\"}]", "emulation": "[]", "literal": "[]", "project inception": "[{\"term\": \"project inception\", \"definition\": \"See project chartering.\"}]", "all-at-once product development": "[{\"term\": \"all-at-once product development\", \"definition\": \"Doing all types of work (for example, analysis,\\u00a0design, coding, integrating, and testing) opportunistically within a single iteration.\"}]", "interpretive code": "[]", "generalization hierarchy": "[]", "life-cycle model": "[]", "approved change request": "[]", "software design concept": "[]", "task mode": "[]", "software": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "fifth generation language": "[]", "illustration": "[]", "software library": "[]", "code trace": "[]", "replication schema": "[]", "specification change notice": "[]", "repo bloat": "[]", "application problem": "[]", "actor": "[]", "software requirements specification": "[]", "fixed-date release": "[{\"term\": \"fixed-date release\", \"definition\": \"A release that must be delivered on a known future date. The\\u00a0scope of the release, and possibly the cost, needs to be flexible. Contrast with fixed-scope\\u00a0release.\"}]", "surrogate key": "[]", "working area": "[]", "parent function": "[]", "transform analysis": "[]", "segment": "[{\"term\": \"relative size measure\", \"definition\": \"A means of expressing the overall size of an item where the\\u00a0absolute value is not considered, but the relative size of an item compared to other\\u00a0items is considered. For example, an item of size 2 is half the size of an item of size 4,\\u00a0but we have no idea how big an item of size 2 or 4 is in some absolute sense. See also\\u00a0ideal day, story point.\"}]", "unspecialize": "[]", "quality subfactor": "[]", "transaction analysis": "[]", "emergency maintenance": "[]", "continuous integration": "[{\"term\": \"continuous integration\", \"definition\": \"A technical practice where members of a single team or multiple\\u00a0teams integrate their work as frequently as is practical. See also integration, technical\\u00a0practices.\"}]", "explicit address": "[]", "tier chart": "[]", "exploration": "[{\"term\": \"exploration\", \"definition\": \"The act of acquiring or buying knowledge by performing some activity\\u00a0such as building a prototype, creating a proof of concept, performing a study, or conducting\\u00a0an experiment. Contrast with exploitation.\"}]", "n-plus-one address instruction": "[]", "scrumban": "[]", "bathtub curve": "[]", "requirements traceability tool": "[]", "functional domain categorization": "[]", "software development": "[{\"term\": \"agile\", \"definition\": \"1. A specific set of values and principles, as expressed in the Agile Manifesto\\u00a0(Beck et al. 2001). 2. An umbrella term used for a group of related approaches to software\\u00a0development based on iterative and incremental development. Scrum is an agile\\u00a0approach to development. See also Extreme Programming, Kanban, Scrum.\"}]", "heartbeat retrospective": "[]", "hacker": "[]", "echo": "[]", "process reference model": "[]", "user manual": "[]", "crystal": "[{\"term\": \"ideal day\", \"definition\": \"A unit for estimating the size of product backlog items based on how long\\u00a0an item would take to complete if it were the only work being performed, there were\\u00a0no interruptions, and all resources necessary to complete the work were immediately\\u00a0available. See also ideal hour. Contrast with story point.\"}]", "risk treatment": "[]", "logical layout": "[]", "processing logic": "[]", "Open Services": "[]", "confidence threshold": "[{\"term\": \"confidence threshold\", \"definition\": \"1. The definition of done for envisioning (product-level planning).\\u00a02. The set of information that decision makers need in order to have sufficient\\u00a0confidence to make a go/no-go funding decision for more detailed development.\"}]", "regression test": "[]", "character": "[]", "design level": "[]", "point": "[{\"term\": \"point inflation\", \"definition\": \"The unfortunate behavior of inflating the value of product backlog\\u00a0size estimates in an attempt to conform to or optimize an unwisely conceived measure\\u00a0(such as achieving a target velocity).\"}]", "tailoring guideline": "[]", "class-level operation": "[]", "operational expense": "[{\"term\": \"OpEx\", \"definition\": \"See operational expense.\"}]", "life cycle model": "[]", "ergonomics": "[]", "identifier dependency": "[]", "merge from current": "[]", "data declaration source statement": "[]", "ratio": "[]", "life-cycle processes": "[{\"term\": \"lifecycle profits\", \"definition\": \"1. The total profit potential for a product over its lifetime. 2. In the\\u00a0case of portfolio planning, the total profit potential of the entire portfolio rather than\\u00a0a single product.\"}]", "concurrent communication diagram": "[]", "meta-object facility": "[]", "data warehouse": "[]", "process dimension": "[]", "task interface": "[]", "total degree of influence": "[]", "process action plan": "[]", "class data": "[{\"term\": \"persona\", \"definition\": \"1. A user archetype, synthesized from the ethnographic data of real users,\\u00a0that helps guide decisions about product features, navigation, interactions, and visual\\u00a0design. 2. A fictitious person that is the prototypical instance of a particular user role.\\u00a0See also user story.\"}]", "Planning Poker": "[{\"term\": \"Planning Poker\", \"definition\": \"A consensus-based technique for the relative sizing of product backlog\\u00a0items. Read the blog posting \\\"Relative Size Estimating\\u2014It\\u2019s Just an Exercise in Binning!\\\" for an example.\"}]", "dyadic selective construct": "[]", "product development effort": "[{\"term\": \"product development effort\", \"definition\": \"The full scope of work performed to create or enhance a\\u00a0product or service. Contrast with project.\"}]", "feature team": "[{\"term\": \"feature team\", \"definition\": \"A cross-functional and cross-component team that can pull end-customer\\u00a0features from the product backlog and complete them. See also cross-functional\\u00a0team. Contrast with component team.\"}]", "acceptable": "[]", "schedule network analysis": "[]", "security testing": "[]", "hardware design language": "[]", "global configuration management": "[]", "original source statement": "[]", "repository": "[]", "functional size measurement": "[]", "Monte Carlo analysis": "[]", "reusable": "[{\"term\": \"design pattern\", \"definition\": \"A general repeatable or reusable solution to a commonly occurring problem in software design. A design pattern isn't a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations. (derived from Wikipedia)\"}]", "progressive refinement": "[{\"term\": \"progressive refinement\", \"definition\": \"To disaggregate, in a just-in-time fashion, large, lightly\\u00a0detailed product backlog items into a set of smaller, more detailed items.\"}]", "user persona": "[]", "crisis": "[{\"term\": \"chaotic domain\", \"definition\": \"1. A situation that requires a rapid response. We are in a crisis and\\u00a0need to act immediately to prevent further harm and reestablish at least some order.\\u00a02. One of the domains in the Cynefin framework. See also Cynefin. Contrast with\\u00a0complex domain, complicated domain, disorder domain, simple domain.\"}]", "Information-based domain": "[]", "config spec": "[]", "change control": "[]", "informal testing": "[]", "reverse engineering": "[]", "interface": "[{\"term\": \"principle of least astonishment\", \"definition\": \"Acting or developing work products in a way that is\\u00a0least likely to startle those around you. For example,\\u00a0if you develop a user interface and a customer using the product says \\\"Well, I would never have guessed that doing that was the correct thing to do!\\\" then you likely have failed the principle of least astonishment.\"}]", "burn-in period": "[]", "WaterScrum": "[{\"term\": \"WaterScrum\", \"definition\": \"Overlaying waterfall-style development on the Scrum framework. An\\u00a0example would be performing an analysis sprint, followed by a design sprint, followed\\u00a0by a coding sprint, followed by a testing sprint. Synonymous with Scrummerfall.\"}]", "support activity group": "[]", "computer graphics": "[]", "no-operation": "[]", "engineering interface reference": "[]", "time class": "[]", "compatibility": "[]", "business value": "[{\"term\": \"acceptance test\", \"definition\": \"1. The testing carried out to verify that the acceptance criteria have been met. 2. A test that defines the business value each product backlog item must deliver. It may verify functional requirements or nonfunctional requirements such as performance or reliability. It is used to help guide development (Crispin and Gregory 2009). 3. Formal testing with respect to user needs, requirements, and business processes conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user, customers, or other authorized entity to determine whether or not to accept the system (IEEE 610).\"}]", "widget": "[]", "machine readable": "[]", "conditional unconditional jump": "[]", "measurement sponsor": "[]", "Artifacts page": "[]", "early start date": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "emergent opportunity": "[{\"term\": \"emergent opportunity\", \"definition\": \"An opportunity that was previously unknown, or was deemed\\u00a0sufficiently unlikely to occur and therefore not worth spending money on at the time.\"}]", "portfolio metrics": "[]", "algebraic language": "[]", "system life cycle": "[]", "technical contact": "[]", "reachability graph": "[]", "initial program load": "[]", "technical review": "[{\"term\": \"sprint review\", \"definition\": \"An inspect-and-adapt activity that occurs after sprint execution where\\u00a0the Scrum team shows to all interested parties what was accomplished during the\\u00a0sprint. The sprint review gives everyone with input in the product development effort\\u00a0an opportunity to inspect what has been built so far and adapt what will be built\\u00a0next. See also inspect and adapt, sprint demo.\"}]", "resource histogram": "[]", "acceptance test": "[{\"term\": \"acceptance-test-driven development (ATDD)\", \"definition\": \"A technique in which the participants collaboratively discuss acceptance criteria, using examples, and then distill them into a set of concrete acceptance tests before development begins. Synonymous with specification by example.\"}]", "software engineering": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "glass box": "[]", "loopback": "[]", "stable process": "[]", "start date": "[]", "source code data": "[]", "demo demonstration": "[{\"term\": \"sprint demo\", \"definition\": \"1. An activity of a sprint review where the completed (done) product\\u00a0backlog items are demonstrated with the goal of promoting an information-rich discussion\\u00a0between the Scrum team and other sprint review participants. 2. A term that is\\u00a0frequently used synonymously to refer to the entire sprint review. For further clarification between a sprint demo and sprint review, please read Ken Rubin's blog entitled:\\u00a0It\\u2019s a Sprint Review Not a Sprint Demo!\\u00a0See also sprint review.\"}]", "mitigating function": "[]", "packaging": "[]", "override": "[{\"term\": \"plan-driven process\", \"definition\": \"A style of development that attempts to plan for and anticipate\\u00a0up front all of the features a user might want in the end product and to determine\\u00a0how best to build those features. The work plan is based on execution of a sequential\\u00a0set of work-specific phases. Synonymous with anticipatory process, predictive process,\\u00a0prescriptive process, sequential process, traditional development process, waterfall\\u00a0process.\"}]", "transition net": "[]", "configuration diagram": "[]", "develop project charter": "[]", "interface type": "[]", "mutation": "[]", "installation manual": "[]", "accept": "[{\"term\": \"acceptance test\", \"definition\": \"1. The testing carried out to verify that the acceptance criteria have been met. 2. A test that defines the business value each product backlog item must deliver. It may verify functional requirements or nonfunctional requirements such as performance or reliability. It is used to help guide development (Crispin and Gregory 2009). 3. Formal testing with respect to user needs, requirements, and business processes conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user, customers, or other authorized entity to determine whether or not to accept the system (IEEE 610).\"}]", "pair programming": "[{\"term\": \"pair programming\", \"definition\": \"1. A technical practice in which two\\u00a0programmers\\u00a0work together at one workstation (one screen, keyboard, and mouse among the pair). One person, the\\u00a0driver, writes\\u00a0code\\u00a0while the other person, the\\u00a0observer\\u00a0or\\u00a0navigator,\\u00a0reviews\\u00a0each line of code as it is typed in. The two programmers switch roles frequently. (based on Wikipedia) 2.\\u00a0One of the original 12\\u00a0extreme programming\\u00a0practices. 3. A technique that allows for very rapid feedback of code as it is being created. See also technical practices.\"}]", "software development folder": "[{\"term\": \"Extreme Programming (XP)\", \"definition\": \"1. A software development methodology that is intended to improve software quality and responsiveness to changing customer requirements (source Wikipedia). 2. An agile development approach that is complementary\\u00a0to Scrum. Extreme Programming specifies important technical practices that development\\u00a0teams use to manage the flow of task-level work during sprint execution. See\\u00a0also agile.\"}]", "agile project management": "[{\"term\": \"artifact\", \"definition\": \"A tangible by-product produced during product development. The product\\u00a0backlog, sprint backlog, and potentially shippable product increment are examples of\\u00a0Scrum artifacts. See also practice.\"}]", "uncertainty": "[{\"term\": \"uncertainty\", \"definition\": \"Something that is not known or established. Often considered synonymous\\u00a0with risk but is actually broader in scope because uncertainty includes both\\u00a0risks (negative outcomes) and opportunities (positive outcomes). See also risk.\"}]", "information analysis": "[]", "edit": "[]", "text processing": "[]", "control loopback": "[]", "develop schedule": "[]", "macro definition": "[]", "lean programming": "[]", "U-curve optimization": "[{\"term\": \"U-curve optimization\", \"definition\": \"Used to determined the optimal batch size by balancing transaction cost and holding cost. A graph that has illustrates three quantities: transaction cost, holding cost, and total cost. \\u00a0The y-axis is cost, and the x-axis is batch size. By adding together the transaction cost and the holding cost for each batch size\\u00a0we can see the total cost for a given batch size. The goal is to determine the lowest total cost. U-curve optimizations have a \\\"flat bottom\\\" so we don't have be perfect in calculating the optimal size,\\u00a0there is a range of good batch sizes. See also transaction cost, holding cost.\"}]", "capability": "[]", "quality management plan": "[]", "online documentation": "[]", "error tolerance": "[]", "correctability": "[]", "event sequence analysis": "[]", "lateral compression": "[]", "design concept": "[]", "soft copy image": "[]", "cross-assembler": "[]", "query language": "[]", "ask": "[]", "category entity": "[]", "Boolean signature": "[]", "architectural design phase": "[]", "demonstration": "[]", "symbol": "[]", "control costs": "[]", "system demo": "[{\"term\": \"prototype\", \"definition\": \"A preliminary, or intentionally incomplete or scaled-down version of a system or product (or an important piece or\\u00a0component of the system or product). A prototype is created for knowledge acquisition purposes.\\u00a0The result of a prototyping activity. See also prototyping.\"}]", "community": "[{\"term\": \"product owner\", \"definition\": \"The empowered central point of product leadership. One of the three\\u00a0roles on a Scrum team; the single voice of the stakeholder community to the Scrum\\u00a0team. The product owner defines what to do and in what order to do it. See also\\u00a0Scrum team, ScrumMaster, development team.\"}]", "blocked": "[]", "formal design": "[]", "measurement process owner": "[]", "work in process": "[{\"term\": \"work in process (WIP)\", \"definition\": \"Work that has entered the development process but is not yet\\u00a0finished and available to a customer or user. Refers to all assets or work products of\\u00a0a product or service that are currently being worked on or waiting in a queue to be\\u00a0worked on.\"}]", "underflow exception": "[]", "menu structure": "[]", "extranet": "[]", "top-level function": "[]", "assignment statement": "[]", "status word": "[{\"term\": \"known technical debt\", \"definition\": \"A status category for technical debt that represents the debt\\u00a0that is known to the development team and has been made visible for future consideration.\\u00a0Contrast with happened-upon technical debt, targeted technical debt. See also\\u00a0technical debt.\"}]", "marking of a place": "[]", "program librarian": "[]", "computer science": "[]", "logical transaction": "[]", "initiator": "[]", "trunk": "[]", "external interface requirement": "[]", "measurement method": "[]", "term": "[{\"term\": \"done-done\", \"definition\": \"A term often used by teams to mean the work performed during the sprint is \\u201creally\\u201d done. Done to the point where the customer would think the work is done (potentially deliverable). Teams that use \\\"done-done\\\" often use the term done to mean \\u201cwe did as much work as we were prepared to do!\\u201d Well-functioning agile teams don\\u2019t need two concepts (done and done-done). For these teams, done really means done-done. See also definition of done.\"}]", "fast feedback": "[{\"term\": \"fast feedback\", \"definition\": \"A principle that states that feedback today is much more valuable than\\u00a0the same feedback tomorrow, because today\\u2019s feedback can be used to correct a problem\\u00a0before it compounds into a much larger problem, and provides the ability to\\u00a0truncate economically undesirable paths sooner (to fail faster). See also fail fast.\"}]", "mainframe": "[]", "mandatory category": "[]", "digital": "[]", "capable process": "[]", "bottom-up design": "[{\"term\": \"lean ux\", \"definition\": \"A practice that integrates design thinking, core agile principles, and lean startup principles\\u00a0that is used by a cross-functional team of designers, developers, and product managers to bring the true nature of the work to light\\u00a0faster, with less emphasis on deliverables and greater focus on the\\u00a0actual experience\\u00a0being designed. Lean UX is based on the following core principles:\"}]", "stream interface": "[]", "called diagram": "[]", "automated or assisted software process": "[]", "Delphi technique": "[]", "automatic data processing": "[]", "diagonal microinstruction": "[]", "threat modeling": "[]", "level of abstraction": "[]", "apportioned effort": "[]", "diagram number": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "indirect measure": "[]", "project specification": "[]", "late finish date": "[]", "project initiation": "[{\"term\": \"project initiation\", \"definition\": \"See project chartering.\"}]", "subject area": "[{\"term\": \"fixed-price contract\", \"definition\": \"A contract between a contractor (e.g., a service provider) and a client that provides for a firm price that is not subject to adjustment based on actual costs incurred by the contractor. This contract type transfers from the client to the contractor all of the cost risk. For the contractor to provide a fixed price, the client would have to specify in great detail up front what the client would like the contractor to do. Doing so would violate a core agile principle \\u2013 specifying up front very detailed information when both parties have the least amount of information is most often not practical. So, as a rule, organizations that have adopted agile should avoid fixed-price contracts.\"}]", "prediction": "[{\"term\": \"prediction\", \"definition\": \"A declaration\\u00a0or\\u00a0statement made in advance about what might happen in the future. A guess that is sometimes based on facts or evidence, but not necessarily. Contrast with adaptation.\"}]", "virtual reference": "[]", "pack": "[]", "microarchitecture": "[]", "illustrative product": "[]", "K-base": "[]", "subject domain": "[]", "datum": "[]", "conversational compiler": "[]", "general system characteristics": "[]", "interface design document": "[]", "feature reference": "[]", "loop": "[{\"term\": \"inspect and adapt\", \"definition\": \"1. A common phase in Scrum that refers to the inspection and\\u00a0adaptation principles of empirical process control. 2. The principle of inspecting a\\u00a0product or process and making adaptations based on what is learned. 3. A key part of\\u00a0the learning loop. See also adaptation, empirical process control, inspection, learning\\u00a0loop.\"}]", "updatable argument": "[]", "non-key attribute": "[]", "peripheral equipment": "[]", "complexity attribute": "[]", "successful adoption": "[]", "comparator": "[]", "passive interconnection": "[]", "defensive programming": "[]", "links explorer": "[]", "pirate metrics": "[]", "prettyprinting": "[]", "category cluster": "[]", "purpose": "[{\"term\": \"program increment\", \"definition\": \"Largest plan-do-check-adjust (PDCA) learning cycle in the Scaled Agile Framework (SAFe).\\u00a0A program increment (aka PI)\\u00a0is\\u00a0a cadence-based interval for building and validating a full system increment, demonstrating value, and getting fast feedback. Each program increment synchronizes the work of\\u00a0multiple teams working across multiple iterations (sprints) to\\u00a0facilitate planning, limit WIP, provide for aggregation of newsworthy value for feedback, assure consistent program-level retrospectives.\\u00a0(adapted from the\\u00a0ScaledAgile website).\"}]", "envisioning": "[{\"term\": \"envisioning\", \"definition\": \"An activity that captures the essence of a potential product and creates\\u00a0a rough plan for the creation of that product. Envisioning begins with the creation\\u00a0of a vision, followed by the creation of a high-level product backlog and frequently a\\u00a0product roadmap. Synonymous with product planning. See also product roadmap.\"}]", "relocating assembler": "[]", "fault seeding": "[]", "of accounts": "[]", "performance measurement baseline": "[]", "instance-level responsibility": "[]", "machine": "[]", "generally accepted": "[]", "change control board": "[]", "test item": "[]", "namespace": "[]", "meta-object": "[]", "self-descriptiveness": "[]", "control store": "[]", "iterative construct": "[]", "information processing": "[]", "slave state": "[]", "method": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "one-to-many relationship": "[]", "remote team member": "[{\"term\": \"remote team member\", \"definition\": \"A member of a team who is located physically remote from a company office. If a team has one or more remote team members, then that team is a distributed team. See also co-located team, distributed team.\"}]", "IDEF0 model": "[]", "page type letter": "[]", "primitive": "[]", "communicational cohesion": "[]", "map program": "[]", "program design language": "[]", "field": "[{\"term\": \"feature\", \"definition\": \"1. A slice of business functionality that is meaningful to a customer or user.\\u00a02. Used by some to mean a medium-size user story that can and will be divided into\\u00a0a collection of smaller user stories that together will be implemented to deliver the\\u00a0value of a feature. See also theme, user story.\"}]", "process tailoring": "[]", "configuration identification": "[]", "schedule performance": "[{\"term\": \"release planning\", \"definition\": \"Longer-term planning that answers questions like \\u201cWhen will we\\u00a0be done?\\u201d or \\u201cWhich features can I get by the end of the year?\\u201d or \\u201cHow much will\\u00a0this cost?\\u201d Release planning must balance customer value and overall quality against\\u00a0the constraints of scope, schedule, and budget. See also release plan.\"}]", "definition of ready": "[{\"term\": \"definition of ready\", \"definition\": \"A checklist of conditions that must be true before a product\\u00a0backlog item is considered ready to pull into a sprint during sprint planning. Contrast\\u00a0with definition of done.\"}]", "work in progress limits": "[]", "capability maturity model": "[]", "job stream": "[]", "initial marking of a place": "[]", "interconnection feature": "[]", "team demo": "[{\"term\": \"sprint demo\", \"definition\": \"1. An activity of a sprint review where the completed (done) product\\u00a0backlog items are demonstrated with the goal of promoting an information-rich discussion\\u00a0between the Scrum team and other sprint review participants. 2. A term that is\\u00a0frequently used synonymously to refer to the entire sprint review. For further clarification between a sprint demo and sprint review, please read Ken Rubin's blog entitled:\\u00a0It\\u2019s a Sprint Review Not a Sprint Demo!\\u00a0See also sprint review.\"}]", "values": "[{\"term\": \"values\", \"definition\": \"1. Those things that we hold dear or precious. 2. The foundation of a shared\\u00a0operating agreement among members of a team. Core Scrum values include honesty,\\u00a0openness, courage, respect, focus, trust, empowerment, and collaboration.\"}]", "project control": "[]", "dynamic relocation": "[]", "supporting data item": "[]", "shell": "[{\"term\": \"last responsible moment (LRM)\", \"definition\": \"A strategy of not making a premature decision but\\u00a0instead delaying commitment and keeping important and irreversible decisions open\\u00a0until the cost of not making a decision becomes greater than the cost of making a\\u00a0decision.\"}]", "integration hell": "[]", "cut-off date": "[]", "architectural runway": "[]", "data structure diagram": "[]", "loop body": "[]", "certification": "[{\"term\": \"Certified ScrumMaster\\u00ae\", \"definition\": \"A certification offered by the Scrum Alliance. The world\\u2019s first and by far most popular Scrum certification. This certification is intended for people who will fulfill the ScrumMaster role on a Scrum team, and is very often obtained by members of the development team. To earn CSM certification, a candidate must attend an in-person, two-day CSM training course taught by a Certified Scrum Trainer (CST). After successfully completing the class participants are eligible to take the on-line CSM exam, where they must correctly answer 24 of 35 multiple choice questions. Synonymous with CSM.\\u00a0See also CSPO, CSP, CST.\"}]", "analysis": "[{\"term\": \"kano model analysis\", \"definition\": \"A customer satisfaction model developed by Japanese research\\u00a0Noriaki Kano in the early 1980s. Kano analysis is a\\u00a0set of ideas and techniques that help determine\\u00a0perceived user satisfaction with product features (e.g., product backlog items). Kano analysis uses a questionnaire were customers are asked both a functional (\\\"How would you feel if the feature is included?\\\") and dysfunctional (\\\"How would you feel if the feature were not included?\\\") form of a question about individual\\u00a0features. Based on how users answer these questions, Kano analysis classifies a feature as either mandatory (has to be in the product), linear (customer satisfaction will be linear with increases in quantity or quality of the feature), or exciter/delighter (customer satisfaction will be very high since customers didn't even know they wanted this feature until they saw it, and now they believe they can't live without it). Kano model analysis is one technique that can be used to determine the level of investment (if any) to make in each product backlog item and therefore is a technique that can be used to help prioritize product backlog items.\"}]", "horizontal microinstruction": "[]", "risk profile": "[]", "flowcharting": "[]", "flag": "[]", "path convergence": "[]", "operation part": "[{\"term\": \"DevOps\", \"definition\": \"1. A word formed by combining the\\u00a0Dev\\u00a0in \\\"development\\\" and Ops\\u00a0in \\\"operation.\\\" 2. A\\u00a0set of practices that focus on the efficient and effective collaboration between (i) software development and testing processes, and (ii) the delivery and operations processes, which include\\u00a0such activities as packing, releasing, configuring, and monitoring. DevOps promotes an environment of intense collaboration among the various people involved in development and operations to support the fast creation and automated deployment of high-value releases at a frequency appropriate to the needs of the business.\"}]", "origin attribute": "[]", "task type": "[]", "report performance": "[]", "system team": "[]", "software configuration item": "[]", "evaluation procedure": "[]", "deleted source statement": "[]", "flexibility": "[]", "retirement phase": "[]", "absolute loader": "[]", "control field": "[]", "simulation": "[]", "machine-oriented language": "[]", "verification and validation": "[]", "support manual": "[]", "cold standby": "[]", "configuration baseline": "[]", "security interaction policy": "[]", "read-only": "[]", "page table": "[]", "plan standard": "[]", "waterscrum": "[{\"term\": \"WaterScrum\", \"definition\": \"Overlaying waterfall-style development on the Scrum framework. An\\u00a0example would be performing an analysis sprint, followed by a design sprint, followed\\u00a0by a coding sprint, followed by a testing sprint. Synonymous with Scrummerfall.\"}]", "compatible": "[]", "alternate key": "[]", "mechanism arrow": "[]", "ODP-RM": "[]", "secondary risk": "[]", "transactional process": "[]", "self-organization": "[{\"term\": \"self-organization\", \"definition\": \"1. A bottom-up emergent property of a complex adaptive system\\u00a0whereby the organization of the system emerges over time as a response to its environment.\\u00a02. A property of a development team that organizes itself over time, without\\u00a0an external dominating force applying traditional top-down, command-and-control\\u00a0management. 3. Reflects the management philosophy whereby operational decisions\\u00a0are delegated as much as possible to those who have the most detailed knowledge of\\u00a0the consequences and practicalities associated with those decisions. See also complex\\u00a0adaptive system, emergence.\"}]", "metalanguage": "[]", "loop invariant": "[]", "cross-reference generator": "[]", "preliminary design": "[]", "release burndown chart": "[]", "contract management plan": "[]", "estimate activity resources": "[]", "should-cost estimate": "[]", "parameterized high-level net graph": "[]", "relocatable code": "[]", "configuration item": "[]", "order clash": "[]", "systems analysis": "[]", "lead time": "[]", "data group": "[]", "pbi slotting": "[{\"term\": \"PBI slotting\", \"definition\": \"PBI slotting. See sprint mapping.\"}]", "announcement": "[]", "overload": "[{\"term\": \"plan-driven process\", \"definition\": \"A style of development that attempts to plan for and anticipate\\u00a0up front all of the features a user might want in the end product and to determine\\u00a0how best to build those features. The work plan is based on execution of a sequential\\u00a0set of work-specific phases. Synonymous with anticipatory process, predictive process,\\u00a0prescriptive process, sequential process, traditional development process, waterfall\\u00a0process.\"}]", "semantic error": "[]", "consequence": "[]", "formal language": "[{\"term\": \"tacit knowledge\", \"definition\": \"Unwritten and unspoken knowledge (including insights, intuitions,\\u00a0and hunches) that is hard, but not impossible, to articulate with formal language.\\u00a0The opposite of explicit or formal knowledge. Sometimes referred to as \\u201cknow-how.\\u201d\"}]", "acquirer": "[]", "flow of control": "[]", "finite state machine": "[]", "instance-level operation": "[]", "binning": "[{\"term\": \"binning\", \"definition\": \"A technique for accurately grouping together items of similar size. Useful when we don't have the precision necessary to discriminate among similarly sized items, so instead we group together all items that fall within a given small interval and label all such items with a value (often the central value) that is representative of the interval.\"}]", "syntactic error": "[]", "discard": "[]", "finish-to-finish": "[]", "command-driven": "[]", "word processing": "[]", "functional configuration audit": "[]", "dot voting": "[{\"term\": \"dot voting\", \"definition\": \"A technique that allows participants to vote their preferences among a set\\u00a0of items by placing a colored dot on items that they believe are higher priority than\\u00a0other items. Items with more dots are higher priority than items with fewer dots. This\\u00a0technique is frequently used during the sprint retrospective activity. See also sprint\\u00a0retrospective.\"}]", "request for change": "[]", "integration": "[{\"term\": \"integration\", \"definition\": \"The combining of the various components or assets of some or all of a\\u00a0product to form a coherent, larger-scope work product that can be validated to function\\u00a0correctly as a whole. See also continuous integration.\"}]", "continuous delivery": "[{\"term\": \"continuous delivery\", \"definition\": \"A software development discipline where software is built in such a way that it can be released to production at any time. Continuous delivery and continuous deployment are often used synonymously. However, some\\u00a0people use continuous deployment as a term that means software changes that are actually put into production (for use by a customer), whereas continuous delivery means changes that are continuously ready to go into product but might not actually be deployed (for business reasons).\\u00a0See also\\u00a0continuous deployment.\"}]", "verification test": "[]", "outgoing link": "[]", "ground rules": "[]", "rules of simplicity": "[]", "priority": "[{\"term\": \"dot voting\", \"definition\": \"A technique that allows participants to vote their preferences among a set\\u00a0of items by placing a colored dot on items that they believe are higher priority than\\u00a0other items. Items with more dots are higher priority than items with fewer dots. This\\u00a0technique is frequently used during the sprint retrospective activity. See also sprint\\u00a0retrospective.\"}]", "first input routine": "[]", "performed process": "[]", "data characteristic": "[]", "business epics": "[]", "requirements traceability": "[]", "if-then-else branch": "[]", "control board": "[]", "embedded computer system": "[]", "module": "[]", "object type": "[]", "portfolio vision": "[]", "emergence": "[{\"term\": \"emergence\", \"definition\": \"1. Individual, localized behavior that aggregates into global behavior that is disconnected from its origins. 2. An attribute of complex adaptive systems. 3. When applied to software development, recognizing that it is not possible to a priori determine the correct set of features, designs, or plans. Instead, over time as more information is learned, important information will emerge from the experience gained on prior work. See also\\u00a0complex adaptive system.\"}]", "qualitative risk analysis": "[]", "appraisal findings": "[]", "computer center": "[]", "link index provider": "[]", "application engineering": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "macroassembler": "[]", "continuous improvement": "[{\"term\": \"sprint retrospective\", \"definition\": \"An inspect-and-adapt activity performed at the end of every\\u00a0sprint. The sprint retrospective is a continuous improvement opportunity for a\\u00a0Scrum team to review its process (approaches to performing Scrum) and to identify\\u00a0opportunities to improve it. See also inspect and adapt.\"}]", "qualification testing": "[]", "in-process product": "[{\"term\": \"in-process product\", \"definition\": \"A product that is currently under development, already live in\\u00a0production, or currently being sold. See also portfolio planning.\"}]", "composite key": "[]", "failure transparency": "[]", "application frameworks": "[]", "criteria": "[{\"term\": \"acceptance-test-driven development (ATDD)\", \"definition\": \"A technique in which the participants collaboratively discuss acceptance criteria, using examples, and then distill them into a set of concrete acceptance tests before development begins. Synonymous with specification by example.\"}]", "functional architecture": "[]", "certification criteria": "[]", "directory": "[]", "assessment purpose": "[]", "merge": "[]", "assumptions": "[{\"term\": \"assumption\", \"definition\": \"A guess, or belief, that is presumed to be true, real, or certain even\\u00a0though there is no validated learning to know that it is true. Contrast with validated\\u00a0learning.\"}]", "systems integration testing": "[]", "long-term asset": "[{\"term\": \"long-term asset\", \"definition\": \"Something that will not be turned into cash or be consumed within one year of the balance sheet date. See also cost accounting.\"}]", "consumer": "[{\"term\": \"customer uncertainty\", \"definition\": \"Uncertainty surrounding who the customers of a product are.\\u00a0See also uncertainty. Contrast with end uncertainty, means uncertainty.\"}]", "concurrent enabling": "[]", "source control": "[]", "table of effective pages": "[]", "bioteam": "[]", "processor": "[]", "condition entry": "[]", "macroprogramming": "[]", "second normal form": "[]", "human behavior": "[]", "risk trigger": "[]", "base artifact": "[]", "activation constraint": "[]", "extensibility": "[]", "strategy": "[{\"term\": \"fail fast\", \"definition\": \"A strategy of trying something, getting fast feedback, and then rapidly inspecting\\u00a0and adapting. In the presence of high levels of uncertainty, it is often less expensive\\u00a0to start working on a product, learn whether we made a good decision, and if not, kill it\\u00a0fast before more money is spent. See also fast feedback, inspect and adapt, pivot.\"}]", "chief programmer": "[]", "process improvement": "[{\"term\": \"insight backlog\", \"definition\": \"A prioritized list of previously generated insights or process improvement\\u00a0ideas that have not yet been acted upon. The insight backlog is generated and\\u00a0used during sprint retrospectives. See also sprint retrospective.\"}]", "lag": "[]", "subject-matter expert": "[]", "candidate key": "[]", "enabling tokens": "[]", "bag": "[]", "participant property": "[]", "naive technical debt": "[{\"term\": \"naive technical debt\", \"definition\": \"A form of technical debt that accrues due to irresponsible\\u00a0behavior or immature practices on the part of the people involved. Contrast with\\u00a0strategic technical debt, unavoidable technical debt. See also technical debt.\"}]", "multitasking": "[]", "Information Technology": "[]", "termination deliver": "[]", "foreground processing": "[]", "project procurement management": "[]", "software design notation": "[]", "information product": "[{\"term\": \"prototyping\", \"definition\": \"A technique used to acquire knowledge or buy information to reduce the risk involved in developing a product or service. When faced with enough uncertainty as to what is the proper next step to take when creating a solution, protoyping is a means of exploring and acqurining knowledge to help reduce the uncertainty so forward progress can be made. The output of prototyping is a prototype. See also prototype, evolutionary prototyping, throwaway prototyping.\"}]", "program support library": "[]", "first normal form": "[]", "external quality": "[{\"term\": \"acceptance criteria\", \"definition\": \"1. The external quality characteristics specified by the product owner from a business or stakeholder perspective. Acceptance criteria define desired behavior and are used to determine whether a product backlog item has been successfully developed. 2. The exit criteria that a component or a system must satisfy in order to be accepted by a user, customer, or other authorized entity (IEEE 610).\"}]", "arrow reference": "[]", "semantics": "[]", "access method": "[]", "distributed development team": "[]", "agile retrospective": "[]", "co-location": "[{\"term\": \"co-located team\", \"definition\": \"Members of the same development team that are located at the same physical location where face-to-face collaboration among the team members is possible and practiced. Contract with distributed team. See also remote team member.\"}]", "chain type": "[]", "application server": "[]", "two-level encoding": "[]", "control arrow": "[]", "loopback testing": "[]", "non-functional requirement": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "float": "[]", "life-cycle cost": "[]", "responsibility": "[]", "split key": "[]", "pairing": "[]", "global configuration": "[]", "postamble breakpoint": "[]", "define activities": "[]", "man-machine interface": "[]", "maintenance branch": "[]", "maintenance infrastructure": "[]", "box name": "[]", "backlog item": "[{\"term\": \"product backlog item (PBI)\", \"definition\": \"1. An item such as a feature, defect, or (occasionally)\\u00a0technical work that is valuable from the product owner\\u2019s perspective. 2. An item in\\u00a0the product backlog. See also product backlog.\"}]", "software quality assurance": "[]", "report template": "[]", "overlay": "[]", "mobility schema": "[]", "corrective maintenance": "[]", "engineering interface reference management domain": "[]", "source statement": "[]", "block diagram": "[]", "two-level address": "[]", "place type": "[]", "backlog grooming": "[{\"term\": \"product backlog grooming\", \"definition\": \"Product backlog grooming refers to the activities of writing and refining, estimating, and\\u00a0prioritizing product backlog items. Synonymous with product backlog refinement.\"}]", "parent entity": "[]", "binding endpoint identifier": "[]", "address modification": "[]", "risk reduction": "[]", "essential Scrum": "[{\"term\": \"essential Scrum\", \"definition\": \"1. The values, principles, and practices of the Scrum framework\\u00a0combined with rules and proven approaches to applying Scrum practices. 2. Also the name title of the Amazon #1 Best Selling book by Kenneth S. Rubin. See also\\u00a0approach, practice, rule, Scrum framework.\"}]", "mapping": "[{\"term\": \"sprint mapping\", \"definition\": \"sprint mapping. An activity to tentatively slot or map appropriately detailed, estimated, and priortized product backlog items into specific future sprints. One simple approach is to approximate\\u00a0a set of product\\u00a0backlog items for each of the next several sprints by grouping together into a sprint items whose aggregate size roughly\\u00a0equals the team\\u2019s average velocity. Synonymous with PBI slotting.\"}]", "Scrum framework": "[{\"term\": \"Scrum framework\", \"definition\": \"A collection of values, principles, practices, and rules that form\\u00a0the foundation of Scrum-based development. See also Scrum.\"}]", "cost of quality": "[]", "logical relationship": "[]", "roll in": "[]", "trade study": "[]", "entity-relationship map": "[]", "failure ratio": "[]", "pigs and chickens": "[]", "low level": "[]", "start-to-finish": "[]", "non-identifying relationship": "[]", "assessment constraints": "[]", "software characteristic": "[]", "specific address": "[]", "test phase": "[]", "library": "[]", "machine-readable": "[]", "mean execution time reference value": "[]", "preprocessor": "[]", "flow chart": "[{\"term\": \"defined process\", \"definition\": \"A process with a well-defined set of steps. Given the same inputs, a\\u00a0defined process should produce the same output every time (within a defined variance\\u00a0range). Contrast with empirical process control.\"}]", "project scope management": "[]", "micro code assembler": "[]", "expensed cost": "[{\"term\": \"expensed cost\", \"definition\": \"See operational expense.\"}]", "u-curve optimization": "[{\"term\": \"U-curve optimization\", \"definition\": \"Used to determined the optimal batch size by balancing transaction cost and holding cost. A graph that has illustrates three quantities: transaction cost, holding cost, and total cost. \\u00a0The y-axis is cost, and the x-axis is batch size. By adding together the transaction cost and the holding cost for each batch size\\u00a0we can see the total cost for a given batch size. The goal is to determine the lowest total cost. U-curve optimizations have a \\\"flat bottom\\\" so we don't have be perfect in calculating the optimal size,\\u00a0there is a range of good batch sizes. See also transaction cost, holding cost.\"}]", "synchronous message communication without reply": "[]", "representation standard": "[]", "relative loader": "[]", "configuration management database": "[]", "domain analysis": "[]", "communication management plan": "[]", "functional cohesion": "[]", "communication interface": "[]", "supervisor": "[{\"term\": \"technical practices\", \"definition\": \"The specific practices or techniques that are used during sprint\\u00a0execution to properly perform the work required to deliver features that have manageable\\u00a0levels of technical debt and meet the Scrum team\\u2019s definition of done.\"}]", "computer network": "[]", "copy": "[]", "assessment participant": "[]", "instruction modifier": "[]", "cookie": "[{\"term\": \"fast, flexible, flow\", \"definition\": \"1.\\u00a0Taking a systemic view of product development where we organize and optimize the teams and other resources (the system) to pull WIP-limited quantities of appropriately-size work items into the system\\u00a0and quickly delivery value to the customer (fast), while adapting to the specific needs of developing novel, non-cookie-cutter solutions (flexible), the whole time relentlessly focusing on removing impediments that inhibit fast and flexible development (to achieve good flow). 2. Term used by Womack and Jones in their book Lean Thinking (1996).\"}]", "test level": "[]", "release planning": "[{\"term\": \"release planning\", \"definition\": \"Longer-term planning that answers questions like \\u201cWhen will we\\u00a0be done?\\u201d or \\u201cWhich features can I get by the end of the year?\\u201d or \\u201cHow much will\\u00a0this cost?\\u201d Release planning must balance customer value and overall quality against\\u00a0the constraints of scope, schedule, and budget. See also release plan.\"}]", "arrow segment": "[]", "external input": "[]", "dynamic dump": "[]", "translator": "[]", "self-documented": "[{\"term\": \"self-organization\", \"definition\": \"1. A bottom-up emergent property of a complex adaptive system\\u00a0whereby the organization of the system emerges over time as a response to its environment.\\u00a02. A property of a development team that organizes itself over time, without\\u00a0an external dominating force applying traditional top-down, command-and-control\\u00a0management. 3. Reflects the management philosophy whereby operational decisions\\u00a0are delegated as much as possible to those who have the most detailed knowledge of\\u00a0the consequences and practicalities associated with those decisions. See also complex\\u00a0adaptive system, emergence.\"}]", "generalize": "[]", "valid": "[]", "defect repair": "[{\"term\": \"product backlog item (PBI)\", \"definition\": \"1. An item such as a feature, defect, or (occasionally)\\u00a0technical work that is valuable from the product owner\\u2019s perspective. 2. An item in\\u00a0the product backlog. See also product backlog.\"}]", "modifiability": "[]", "instantiation": "[]", "value adjustment factor": "[]", "cost as an independent variable": "[]", "design authority": "[]", "initial marking": "[]", "specialize": "[]", "association management facility": "[]", "work in progress": "[]", "workspace snapshot": "[]", "enhancement project function point count": "[]", "discrete type": "[]", "forms design sheet": "[]", "metrics framework": "[]", "join": "[]", "dialog": "[]", "Kanban": "[{\"term\": \"Kanban\", \"definition\": \"An agile approach overlaid on an existing process that advocates visualizing\\u00a0how work flows through a system, limiting the work in process, and measuring and\\u00a0optimizing the flow of work. See also agile, work in process.\"}]", "data element": "[]", "medium": "[{\"term\": \"T-shirt sizing\", \"definition\": \"A form of estimation that is often, although not exclusively, used to size portfolio backlog items. T-shirt sizing is based on the concept of binning. The bins are typically assigned labels corresponding to those commonly used with T-shirt sizes: extra small, small, medium, large, extra large, etc. Frequently a cost range is associated with each size (e.g., an extra small project will cost between $10k and $25k) to provide organization-specific meaning to each T-shirt size. See also binning.\\u00a0\"}]", "planned value": "[]", "absolute instruction": "[]", "project cost management": "[]", "reserved word in a computer language": "[]", "range sort": "[]", "test harness": "[]", "scope change": "[]", "tolerance": "[]", "queue": "[{\"term\": \"queue\", \"definition\": \"A holding place for items (an inventory) as they wait for the next action in a\\u00a0work stream. See also inventory, work in process.\"}]", "specification": "[{\"term\": \"specification by example\", \"definition\": \"See acceptance-test-driven development.\"}]", "availability": "[]", "table-driven method": "[]", "profile": "[]", "class hierarchy": "[]", "interim function point count": "[]", "programmer manual": "[]", "feasibility study": "[]", "control": "[{\"term\": \"transparency\", \"definition\": \"One of the three pillars of empirical process control; open access to the\\u00a0unbiased information required for inspection and adaptation. See also adaptation,\\u00a0empirical process control, inspection.\"}]", "Pareto chart": "[]", "transaction matrix": "[]", "path divergence": "[]", "closing processes": "[]", "name": "[{\"term\": \"user role\", \"definition\": \"1. The name for a class of product users. 2. One of the key elements of a\\u00a0user story that defines the recipient of the value delivered by a user story. See also user story.\"}]", "access permission": "[{\"term\": \"transparency\", \"definition\": \"One of the three pillars of empirical process control; open access to the\\u00a0unbiased information required for inspection and adaptation. See also adaptation,\\u00a0empirical process control, inspection.\"}]", "time sharing": "[]", "object model": "[]", "data base": "[]", "assignable cause": "[]", "function point": "[]", "entry field": "[]", "derived data": "[]", "requirements analysis": "[]", "conceptual model": "[]", "effectiveness": "[]", "call graph": "[]", "specification tree": "[]", "observation": "[]", "release": "[{\"term\": \"release train\", \"definition\": \"1. An approach to aligning the vision, planning, and interdependencies of\\u00a0many teams by providing cross-team synchronization based on a common cadence.\\u00a0A release train focuses on fast, flexible flow at the level of a larger product. 2. In the Scaled Agile Framework (SAFe), an Agile Release Train is a long-lived, self-organizing collection of agile teams that plans, commits, and executes together. Agile release trains are organized around the enterprise\\u2019s significant value streams (source, Scaled Agile Framework).\\u00a0See also\\u00a0scrum of scrums.\"}]", "software safety program": "[{\"term\": \"Extreme Programming (XP)\", \"definition\": \"1. A software development methodology that is intended to improve software quality and responsiveness to changing customer requirements (source Wikipedia). 2. An agile development approach that is complementary\\u00a0to Scrum. Extreme Programming specifies important technical practices that development\\u00a0teams use to manage the flow of task-level work during sprint execution. See\\u00a0also agile.\"}]", "model name abbreviation": "[]", "transfer": "[]", "retainage": "[]", "prototype": "[{\"term\": \"prototyping\", \"definition\": \"A technique used to acquire knowledge or buy information to reduce the risk involved in developing a product or service. When faced with enough uncertainty as to what is the proper next step to take when creating a solution, protoyping is a means of exploring and acqurining knowledge to help reduce the uncertainty so forward progress can be made. The output of prototyping is a prototype. See also prototype, evolutionary prototyping, throwaway prototyping.\"}]", "conditional information": "[]", "component skew": "[]", "test repeatability": "[]", "recovery": "[{\"term\": \"cost of delay\", \"definition\": \"The financial cost associated with delaying work or delaying achievement\\u00a0of a milestone. Cost of delay emphasizes the concept that time has a real financial\\u00a0cost, and to make economically sensible trade-offs it is important to know that\\u00a0cost.\"}]", "domain architecture": "[{\"term\": \"complex domain\", \"definition\": \"1. A situation in which things are more unpredictable than they\\u00a0are predictable. If there is a right answer, we will know it only with hindsight. 2. One\\u00a0of the domains in the Cynefin framework. See also Cynefin. Contrast with chaotic\\u00a0domain, complicated domain, disorder domain, simple domain.\"}]", "target program": "[]", "automatic": "[]", "macro": "[]", "trace": "[]", "co-located team": "[{\"term\": \"co-located team\", \"definition\": \"Members of the same development team that are located at the same physical location where face-to-face collaboration among the team members is possible and practiced. Contract with distributed team. See also remote team member.\"}]", "rich hover": "[]", "basis set": "[]", "sustainment": "[]", "development branch": "[]", "straight-line coding": "[]", "causal analysis": "[]", "distributed team": "[{\"term\": \"distributed team\", \"definition\": \"1. Members of the same development team that are not co-located. For example, a single team with members in San Francisco, New York, London, and Bangalore would be a distributed team. 2. On a larger (scaled) development effort, the term distributed teams often refers to multiple collaborating teams that are not co-located at one physical site. For example, one large project might require a team in Chicago, another in Shanghai, and a third in Sydney. These teams would be considered distributed teams (from the overarching perspective of the project) because each is located in a different city. Now, if the members of a particular geographic team are physically co-located, then that team itself is a co-located team (not a distributed team). Contrast with co-located team. See also remote team member.\"}]", "glossary": "[{\"term\": \"task\", \"definition\": \"The technical work that a development team performs in order to complete a\\u00a0product backlog item. Most tasks are defined to be small, representing no more than\\u00a0a few hours to a day or so of work.\"}]", "relationship type": "[]", "ELSE-rule": "[]", "preamble breakpoint": "[]", "flowchart": "[]", "error processing": "[]", "import process": "[]", "value class": "[]", "Scrum team": "[{\"term\": \"Scrum team\", \"definition\": \"A team composed of a product owner, ScrumMaster, and development\\u00a0team that works on a Scrum development effort. See also development team, product\\u00a0owner, ScrumMaster.\"}]", "risk transference": "[]", "budgeted cost of work scheduled": "[]", "initiating event": "[]", "audience research": "[]", "iteration backlog": "[]", "relocating loader": "[]", "system resources chart": "[]", "commit": "[]", "high-level design": "[]", "backup": "[]", "agile development practices": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "process architecture": "[]", "priority inversion": "[]", "downward compression": "[]", "meaning": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "soft failure": "[]", "software component": "[]", "macroprocessor": "[]", "context of use": "[]", "encapsulation": "[]", "evaluation method": "[]", "microprogramming": "[]", "risk metric": "[]", "test-driven development": "[{\"term\": \"test-driven development (TDD)\", \"definition\": \"1. An evolutionary approach to development based\\u00a0on writing a failing automated test before the functional code that makes the test\\u00a0pass. Once the code is written to pass the test, the cycle is then repeated, including\\u00a0refactoring the existing code to ensure a coherent cross-functional design. The goal\\u00a0of test-driven development is specification and not validation\\u2014to think through a design before code is written, to create clean code that always works. 2. An example of\\u00a0test-first development. See also refactoring, technical practices, test-first development.\"}]", "diagram": "[{\"term\": \"scrum of scrums (SoS)\", \"definition\": \"An approach to coordinating the work of multiple Scrum\\u00a0teams wherein one or more members of each Scrum team come together to discuss\\u00a0and resolve inter-team dependency issues. See also release train.\"}]", "computing system specification concepts": "[]", "read": "[{\"term\": \"definition of done\", \"definition\": \"A checklist of the types of work that the team is expected to\\u00a0successfully complete by the end of the sprint, before it can declare its work to be\\u00a0potentially shippable. A bare-minimum definition of done should yield a complete\\u00a0slice of product functionality, one that has been designed, built, integrated, tested,\\u00a0and documented and will deliver validated customer value. Contrast with definition\\u00a0of ready.\"}]", "project snapshot": "[]", "functional user requirements": "[]", "velocity": "[{\"term\": \"velocity\", \"definition\": \"A measure of the rate at which work is completed per unit of time. Using\\u00a0Scrum, velocity is typically measured as the sum of the size estimates of the product\\u00a0backlog items that are completed in a sprint. Velocity is reported in the same units as\\u00a0product backlog items\\u2014usually story points or ideal days. Velocity measures output\\u00a0(the size of what was delivered), not outcome (the value of what was delivered).\"}]", "software-based system": "[]", "function-oriented design": "[]", "product life cycle": "[]", "constant-failure period": "[]", "internal measure": "[]", "return on investment": "[]", "buffering": "[]", "test case": "[]", "viewpoint statement": "[]", "flow diagram": "[]", "system life cycle software development cycle": "[]", "inductive assertion method": "[]", "concurrent": "[]", "private": "[]", "endeavour": "[]", "elementary process": "[{\"term\": \"relative size measure\", \"definition\": \"A means of expressing the overall size of an item where the\\u00a0absolute value is not considered, but the relative size of an item compared to other\\u00a0items is considered. For example, an item of size 2 is half the size of an item of size 4,\\u00a0but we have no idea how big an item of size 2 or 4 is in some absolute sense. See also\\u00a0ideal day, story point.\"}]", "transition condition": "[]", "domain model": "[]", "microinstruction": "[]", "variance analysis": "[]", "monitor and control project work": "[]", "completion time theorem": "[]", "program management": "[]", "reflexive ancestor": "[]", "maintenance plan": "[]", "construction": "[{\"term\": \"cost of delay\", \"definition\": \"The financial cost associated with delaying work or delaying achievement\\u00a0of a milestone. Cost of delay emphasizes the concept that time has a real financial\\u00a0cost, and to make economically sensible trade-offs it is important to know that\\u00a0cost.\"}]", "delegation": "[]", "project management process group": "[{\"term\": \"portfolio planning\", \"definition\": \"An activity for determining which products (or projects) to work\\u00a0on, in which order, and for how long. Sometimes referred to as portfolio management. Want to see a picture?\"}]", "user need": "[{\"term\": \"customer uncertainty\", \"definition\": \"Uncertainty surrounding who the customers of a product are.\\u00a0See also uncertainty. Contrast with end uncertainty, means uncertainty.\"}]", "software maintenance": "[]", "nondevelopmental": "[]", "organization level": "[]", "developers and testers": "[]", "standup": "[{\"term\": \"daily stand-up\", \"definition\": \"A common approach to performing a daily scrum whereby the participants\\u00a0stand for the entirety of the activity. Standing up promotes brevity and helps\\u00a0ensure that the activity does not exceed its timebox. See daily scrum.\"}]", "supplier": "[]", "project team": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "camera-ready originals": "[]", "diagnostic": "[]", "halt": "[]", "category discriminator": "[]", "throwclear": "[]", "frozen branch": "[]", "mura": "[{\"term\": \"mura\", \"definition\": \"A Japanese term (\\u6591) meaning \\\"unevenness; irregularity; lack of uniformity; nonuniformity; inequality.\\\" Mura is a key removal-of-waste concept (along with Muda and Muri) in lean manufacturing that focuses on the reducing the waste of unevenness. \\u00a0By failing to smooth demand we put unfair pressure\\u00a0on our processes and people and cause the creation of inventory and other wastes. See also muda, muri\"}]", "external software quality": "[]", "estimate at completion": "[]", "request for quotation": "[]", "test script": "[]", "model note": "[]", "audience": "[]", "defect report": "[]", "domain expert": "[]", "authorization": "[]", "reflexive": "[]", "software system": "[]", "computer program abstract": "[]", "process capability determination": "[]", "silent grouping": "[{\"term\": \"silent grouping\", \"definition\": \"A facilitation technique for getting people to group related items\\u00a0without talking, relying only on the individual placement and movement of items\\u00a0(typically cards or sticky notes) as a means of communicating and coordinating\\u00a0among the participants. A technique frequently used during the sprint retrospective\\u00a0activity. See also sprint retrospective.\"}]", "linkage editor": "[]", "control coupling": "[]", "standup meeting": "[{\"term\": \"self-organization\", \"definition\": \"1. A bottom-up emergent property of a complex adaptive system\\u00a0whereby the organization of the system emerges over time as a response to its environment.\\u00a02. A property of a development team that organizes itself over time, without\\u00a0an external dominating force applying traditional top-down, command-and-control\\u00a0management. 3. Reflects the management philosophy whereby operational decisions\\u00a0are delegated as much as possible to those who have the most detailed knowledge of\\u00a0the consequences and practicalities associated with those decisions. See also complex\\u00a0adaptive system, emergence.\"}]", "changeover system": "[]", "performance": "[{\"term\": \"sprint goal\", \"definition\": \"A high-level summary of the goal the product owner would like to\\u00a0accomplish during the sprint. Frequently elaborated through a specific set of product\\u00a0backlog items.\"}]", "validation testing": "[]", "stand-alone": "[]", "genba": "[{\"term\": \"genba\", \"definition\": \"A Japanese term (\\u73fe\\u5834) meaning \\u201cthe real place,\\u201d or more practically, the place where value is created. When practicing genchi genbutsu (\\\"go and see for yourself\\\") the genba is the place you go because it is there that the real work is performed and you can get a firsthand, accurate account of what is really going on. Note: \\\"genba\\\" is sometimes written in English as \\\"gemba.\\\" See also\\u00a0genchi genbutsu.\"}]", "spike": "[{\"term\": \"spike\", \"definition\": \"1. A term that originated with\\u00a0Extreme Programming (XP) that is\\u00a0used to refer to work whose primary purpose is explore potential solutions or otherwise gather information. A way to acquire knowledge when the situation at hand has uncertainty as to the proper or good way to proceed forward. 2. In agile development, a spike can be represented as a product backlog item who primary output is the knowledge obtained by performing the spike work. \\u00a03. Some people use the term spike to refer to an end-to-end architectural prototype. The visual metaphor is: Imagine you had a physical spike in one hand and a hammer in the other hand. Take the hammer and hit the spike so that it vertically pierces all layers of the architecture (e.g., GUI, middle tier, database).\"}]", "state class": "[]", "deblock": "[]", "command": "[{\"term\": \"self-organization\", \"definition\": \"1. A bottom-up emergent property of a complex adaptive system\\u00a0whereby the organization of the system emerges over time as a response to its environment.\\u00a02. A property of a development team that organizes itself over time, without\\u00a0an external dominating force applying traditional top-down, command-and-control\\u00a0management. 3. Reflects the management philosophy whereby operational decisions\\u00a0are delegated as much as possible to those who have the most detailed knowledge of\\u00a0the consequences and practicalities associated with those decisions. See also complex\\u00a0adaptive system, emergence.\"}]", "migrated attribute": "[]", "documentation relationships to one another": "[]", "functional test": "[]", "suspect": "[]", "programming support environment": "[]", "compile": "[]", "inline code": "[]", "hardware monitor": "[]", "directed graph": "[]", "epic owner": "[]", "instruction": "[]", "microprogrammable computer": "[]", "bit steering": "[]", "two-address instruction": "[]", "timeline": "[{\"term\": \"event timeline\", \"definition\": \"A visual, chronologically ordered depiction of the meaningful events\\u00a0that occurred over a period of time. A common technique used during sprint retrospectives.\\u00a0See also sprint retrospective.\"}]", "severity": "[]", "step": "[{\"term\": \"all-before-any\", \"definition\": \"A characteristic of a sequential development process, where the work\\u00a0product from a previous step in a process is transferred to the next step using a batch\\u00a0size of 100%. See also batch size.\"}]", "project library": "[]", "destination address": "[]", "working set": "[]", "stability schema": "[]", "project agreement": "[]", "active white space": "[]", "reader note": "[]", "actual result": "[]", "standards": "[]", "team selection plan": "[]", "requirements partitioning": "[]", "reuse": "[]", "productivity": "[{\"term\": \"sustainable pace\", \"definition\": \"The appropriately aggressive pace at which a team works so that it\\u00a0produces a good flow of business value over an extended period of time without getting\\u00a0burned out.\"}]", "root segment": "[]", "determine budget": "[]", "build": "[{\"term\": \"ideal hour\", \"definition\": \"A unit for estimating the size of the design, build, integrate, and test work,\\u00a0represented as sprint backlog tasks. Often referred to as an effort-hour, person-hour,\\u00a0or man-hour. See also ideal day.\"}]", "agile software development methodology": "[{\"term\": \"Extreme Programming (XP)\", \"definition\": \"1. A software development methodology that is intended to improve software quality and responsiveness to changing customer requirements (source Wikipedia). 2. An agile development approach that is complementary\\u00a0to Scrum. Extreme Programming specifies important technical practices that development\\u00a0teams use to manage the flow of task-level work during sprint execution. See\\u00a0also agile.\"}]", "direct metric": "[]", "user type": "[]", "time out": "[]", "scheduled finish date": "[]", "impediment": "[{\"term\": \"impediment\", \"definition\": \"A hindrance or obstruction to doing something. Frequently used to\\u00a0describe some issue or blocker that is preventing a team or organization from performing\\u00a0Scrum in an effective way.\"}]", "timing": "[]", "executable source statement": "[]", "pointer": "[]", "zFolder": "[]", "store": "[]", "source": "[{\"term\": \"release train\", \"definition\": \"1. An approach to aligning the vision, planning, and interdependencies of\\u00a0many teams by providing cross-team synchronization based on a common cadence.\\u00a0A release train focuses on fast, flexible flow at the level of a larger product. 2. In the Scaled Agile Framework (SAFe), an Agile Release Train is a long-lived, self-organizing collection of agile teams that plans, commits, and executes together. Agile release trains are organized around the enterprise\\u2019s significant value streams (source, Scaled Agile Framework).\\u00a0See also\\u00a0scrum of scrums.\"}]", "reverse proxy": "[]", "lock": "[]", "boundary value": "[]", "cost management plan": "[]", "back-to-back testing": "[{\"term\": \"cargo cult\", \"definition\": \"A name drawn from the phenomenon of certain South Sea islanders who believed that by building mockups of airplanes and constructing runways that they could bring back the planes and all the wealth that accompanied them during World War II, when advance U.S. bases in the Pacific used the islands as staging areas. So,\\u00a0by reconstructing or simulating the artifacts of a situation, they could effect its occurrence. The goal is to avoid cargo-cult adoption of agile (going through the motions without understanding why).\\u00a0Issues with cargo cults include:\"}]", "integrate": "[{\"term\": \"continuous integration\", \"definition\": \"A technical practice where members of a single team or multiple\\u00a0teams integrate their work as frequently as is practical. See also integration, technical\\u00a0practices.\"}]", "operations manual": "[]", "business process sketch": "[]", "test set architecture": "[]", "required inputs": "[]", "artifact type": "[]", "top-down decomposition": "[]", "post-tested iteration": "[]", "specific code": "[]", "capacity": "[{\"term\": \"capacity\", \"definition\": \"1. The quantity of resources available to perform useful work. 2. A concept\\u00a0used to help establish a WIP limit by ensuring that we only start work to match the\\u00a0available capacity to complete work. See also work in process.\"}]", "external": "[{\"term\": \"internal stakeholders\", \"definition\": \"Stakeholders who are internal to the organization that is developing\\u00a0the product, for example, senior executives, managers, and internal users. See\\u00a0also stakeholders. Contrast with external stakeholders.\"}]", "characteristic entity": "[]", "develop project team": "[]", "orphan": "[]", "information radiators": "[]", "generic ancestor": "[]", "coroutine": "[]", "non-deliverable item": "[]", "zComponent": "[]", "discrete effort": "[]", "clabject": "[]", "padding": "[]", "adoption item": "[]", "logic diagram": "[]", "targeted technical debt": "[{\"term\": \"targeted technical debt\", \"definition\": \"A status category for technical debt that represents debt that\\u00a0is known and has been targeted for servicing by the development team. Contrast with\\u00a0happened-upon technical debt, known technical debt. See also technical debt.\"}]", "functionality": "[{\"term\": \"definition of done\", \"definition\": \"A checklist of the types of work that the team is expected to\\u00a0successfully complete by the end of the sprint, before it can declare its work to be\\u00a0potentially shippable. A bare-minimum definition of done should yield a complete\\u00a0slice of product functionality, one that has been designed, built, integrated, tested,\\u00a0and documented and will deliver validated customer value. Contrast with definition\\u00a0of ready.\"}]", "expected monetary value Analysis": "[]", "portability": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "interactive compiler": "[]", "evaluation module": "[]", "configuration audit": "[]", "minimum viable product": "[{\"term\": \"minimum viable product (MVP)\", \"definition\": \"1. A product that has just those features that allow\\u00a0the product to be deployed, and no more. 2. The simplest experiment you can run to validate the current most-important customer hypothesis. Or as the Lean Startup community says, the simplest thing you can do, with the least effort, to collect the maximum amount of validated learning about the customer. Synonomous with MVP.\\u00a0\"}]", "workspace flow target": "[]", "object": "[{\"term\": \"artifact\", \"definition\": \"A tangible by-product produced during product development. The product\\u00a0backlog, sprint backlog, and potentially shippable product increment are examples of\\u00a0Scrum artifacts. See also practice.\"}]", "model hierarchy": "[]", "coincidental cohesion": "[]", "straight-line code": "[]", "user interface": "[{\"term\": \"principle of least astonishment\", \"definition\": \"Acting or developing work products in a way that is\\u00a0least likely to startle those around you. For example,\\u00a0if you develop a user interface and a customer using the product says \\\"Well, I would never have guessed that doing that was the correct thing to do!\\\" then you likely have failed the principle of least astonishment.\"}]", "degree of confidence": "[{\"term\": \"potentially shippable product increment\", \"definition\": \"Results that are completed to a high degree\\u00a0of confidence and represent work of good quality that is potentially shippable to end\\u00a0customers at the end of a sprint. Being potentially shippable does not mean the results\\u00a0will actually be delivered to customers. Shipping is a business decision; potentially\\u00a0shippable is a state of confidence.\"}]", "data model": "[]", "online": "[]", "supercomputer": "[]", "mask": "[]", "bundle": "[{\"term\": \"product\", \"definition\": \"1. The result of a product development effort. 2. A good or service consisting\\u00a0of a bundle of tangible and intangible attributes that satisfies consumers and is\\u00a0received in exchange for money or some other unit of value. 3. Typically a longerlived,\\u00a0more stable artifact against which organizations might conduct one or more\\u00a0projects. See also product development effort. Contrast with project.\"}]", "asynchronous": "[]", "artificial language": "[]", "requirements creep": "[]", "usability": "[{\"term\": \"nonfunctional requirement\", \"definition\": \"1. A requirement that does not relate to functionality\\u00a0but to attributes such as reliability, efficiency, usability, maintainability, and portability,\\u00a0which product backlog items must possess in order to be fully accepted by the\\u00a0stakeholders. 2. Each nonfunctional requirement is a candidate for inclusion in the\\u00a0definition of done. See also definition of done.\"}]", "access token": "[]", "association": "[{\"term\": \"feature team\", \"definition\": \"A cross-functional and cross-component team that can pull end-customer\\u00a0features from the product backlog and complete them. See also cross-functional\\u00a0team. Contrast with component team.\"}]", "relationship name": "[]", "external measure": "[]", "common area": "[]", "composite task": "[]", "fault dictionary": "[]", "Viewpoint language": "[]", "roll": "[]", "nano code": "[]", "evaluation requester": "[]", "maintainer": "[]", "server": "[]", "chicken": "[{\"term\": \"chickens\", \"definition\": \"A metaphor used by some Scrum teams to indicate that people are invested\\u00a0in the goal of the Scrum team, but at a level of involvement (not accountable) rather\\u00a0than commitment. Best used to refer to people outside of the Scrum team. Derived\\u00a0from an old joke about a chicken and a pig: \\u201cIn a ham-and-eggs breakfast, the chicken\\u00a0is involved, but the pig is committed.\\\" Contrast with pigs.\"}]", "new source statements": "[]", "optional category": "[]", "enabling system": "[]", "pretested iteration": "[]", "whole-team approach": "[{\"term\": \"integration\", \"definition\": \"The combining of the various components or assets of some or all of a\\u00a0product to form a coherent, larger-scope work product that can be validated to function\\u00a0correctly as a whole. See also continuous integration.\"}]", "RM-RTF": "[]", "re-entry point": "[]", "restart point": "[]", "activity type": "[]", "web application": "[]", "metacompiler": "[]", "lookup build": "[]", "abend": "[]", "director": "[]", "activity duration": "[]", "systematic failure": "[]", "control chart": "[]", "supertype": "[]", "communications domain": "[]", "project plan": "[]", "change management": "[]", "validation test": "[]", "two level encoding": "[]", "utility": "[]", "design unit": "[]", "invocation submit": "[]", "strategic technical debt": "[{\"term\": \"strategic technical debt\", \"definition\": \"A form of technical debt that is used as a tool to help organizations\\u00a0better quantify and leverage the economics of important, often time-sensitive,\\u00a0decisions. Sometimes taking on technical debt for strategic reasons is a sensible\\u00a0business choice. Contrast with naive technical debt, unavoidable technical debt. See\\u00a0also technical debt.\"}]", "functional unit": "[]", "timely throughput": "[]", "information system": "[]", "direct instruction": "[]", "common block": "[]", "software test environment": "[]", "process attribute rating": "[]", "complexity of a function": "[]", "team area": "[]", "logical source statement": "[]", "deassembler": "[]", "timesharing": "[]", "nest": "[]", "business objective": "[]", "source program": "[]", "functional baseline": "[]", "nondeveloped source statement": "[]", "critical chain method": "[]", "cross-functional team": "[{\"term\": \"cross-functional team\", \"definition\": \"A team composed of members with all the functional skills\\u00a0(such as UI designers, developers, testers) and specialties necessary to complete work\\u00a0that requires more than a single discipline.\"}]", "attribute for quality measure": "[]", "Communication Technology": "[]", "revision": "[]", "quantitative risk analysis": "[]", "conformity evaluation report": "[]", "unit development folder": "[]", "product configuration identification": "[]", "on-line compiler": "[]", "data mapping template": "[]", "nesting": "[]", "assembler language": "[]", "layout": "[]", "data element type": "[]", "enumeration type": "[]", "octet": "[]", "tool": "[{\"term\": \"strategic technical debt\", \"definition\": \"A form of technical debt that is used as a tool to help organizations\\u00a0better quantify and leverage the economics of important, often time-sensitive,\\u00a0decisions. Sometimes taking on technical debt for strategic reasons is a sensible\\u00a0business choice. Contrast with naive technical debt, unavoidable technical debt. See\\u00a0also technical debt.\"}]", "assessment team": "[]", "project control point": "[]", "table": "[{\"term\": \"muda\", \"definition\": \"A Japanese term (\\u7121\\u99c4) meaning \\\"futility; uselessness; wastefulness.\\\" Muda is a key removal-of-waste concept (along with Mura and Muri) in lean manufacturing that focuses on the removal of non-value adding steps.\\u00a0\"}]", "storage efficiency": "[]", "schedule performance index": "[]", "t-shaped skills": "[{\"term\": \"T-shaped skills\", \"definition\": \"A metaphor used to describe a person with deep vertical skills in a\\u00a0specialized area (such as UX design) as well as broad but not necessarily very deep\\u00a0skills in other relevant areas (such as testing and documentation). Team members\\u00a0with T-shaped skills better enable swarming behavior. See also swarming.\"}]", "source code generator": "[]", "single level encoding": "[]", "memory capacity": "[]", "periodic task": "[]", "communicational cohesion temporal cohesion": "[]", "record type": "[]", "transition occurrence": "[]", "planned start date": "[]", "variable trace": "[]", "develop human resource plan": "[]", "attributive entity type": "[]", "completion code": "[]", "declaration": "[{\"term\": \"prediction\", \"definition\": \"A declaration\\u00a0or\\u00a0statement made in advance about what might happen in the future. A guess that is sometimes based on facts or evidence, but not necessarily. Contrast with adaptation.\"}]", "fault secure": "[]", "entry criteria": "[]", "data trace": "[]", "quality attribute": "[]", "attribute group": "[]", "problem report": "[]", "foldout": "[]", "cost accounting": "[{\"term\": \"cost accounting\", \"definition\": \"1. Determining the costs of products, processes, projects to report the correct amounts on the\\u00a0financial statements. 2. A specific example would be determining\\u00a0if a cost should be treated as a capital expediture or an operational expense. See also captial expenditure, operational expense.\"}]", "threshold": "[{\"term\": \"confidence threshold\", \"definition\": \"1. The definition of done for envisioning (product-level planning).\\u00a02. The set of information that decision makers need in order to have sufficient\\u00a0confidence to make a go/no-go funding decision for more detailed development.\"}]", "program increment": "[{\"term\": \"program increment\", \"definition\": \"Largest plan-do-check-adjust (PDCA) learning cycle in the Scaled Agile Framework (SAFe).\\u00a0A program increment (aka PI)\\u00a0is\\u00a0a cadence-based interval for building and validating a full system increment, demonstrating value, and getting fast feedback. Each program increment synchronizes the work of\\u00a0multiple teams working across multiple iterations (sprints) to\\u00a0facilitate planning, limit WIP, provide for aggregation of newsworthy value for feedback, assure consistent program-level retrospectives.\\u00a0(adapted from the\\u00a0ScaledAgile website).\"}]", "collection cardinality": "[]", "baseline": "[]", "parameter": "[{\"term\": \"conditions of satisfaction\", \"definition\": \"The conditions under which a product owner would be\\u00a0satisfied that a product backlog item is done. Conditions of satisfaction are acceptance\\u00a0criteria that clarify the desired behavior. See also acceptance criteria.\"}]", "chickens and pigs": "[]", "synchronous message communication": "[]", "dynamic error": "[]", "Scrummerfall": "[{\"term\": \"Scrummerfall\", \"definition\": \"See WaterScrum.\"}]", "fail criteria": "[]", "web page": "[]", "off-the-shelf": "[]", "software requirements verification": "[]", "imposed date": "[{\"term\": \"fixed-date release\", \"definition\": \"A release that must be delivered on a known future date. The\\u00a0scope of the release, and possibly the cost, needs to be flexible. Contrast with fixed-scope\\u00a0release.\"}]", "high order language": "[{\"term\": \"portfolio backlog\", \"definition\": \"A backlog composed of products, programs, projects, or high-level epics. See also portfolio planning.\"}]", "perform quality control": "[]", "system requirements specification": "[]", "relocation factor": "[]", "detailed design description": "[]", "function type": "[]", "snapshot": "[]", "static": "[]", "commercial-off-the-shelf": "[]", "embedded software": "[]", "modeling tool": "[]", "unnecessary formality": "[{\"term\": \"unnecessary formality\", \"definition\": \"1. A ceremony that has a real cost but delivers little or no\\u00a0value (a form of waste). 2. Process for the sake of process. See also ceremony, waste.\"}]", "happy day scenario": "[]", "task-structuring criteria": "[]", "simulator": "[]", "integrated repository": "[]", "integrity level": "[]", "innovation accounting": "[{\"term\": \"innovation accounting\", \"definition\": \"Innovation accounting is a measurement/accounting system that uses actionable metrics\\u00a0to evaluate how fast we are learning as a critical measure of progress toward converging\\u00a0on a business-valuable result (Ries 2011).\"}]", "simultaneous": "[{\"term\": \"development team\", \"definition\": \"A self-organizing, cross-functional team of people who collectively\\u00a0are responsible for all of the work necessary to produce working, validated assets. One\\u00a0of the three roles that constitute every Scrum team. See also cross-functional team,\\u00a0product owner, ScrumMaster, Scrum team.\"}]", "validation": "[{\"term\": \"validated learning\", \"definition\": \"A term proposed by Eric Ries to describe the progress made\\u00a0when important assumptions have been confirmed or refuted by subjecting each\\u00a0assumption to one or more customer validation tests. Contrast with assumption.\"}]", "text": "[]", "change": "[{\"term\": \"pivot\", \"definition\": \"1. To change directions but stay grounded in what we have learned. 2. A structured\\u00a0course correction designed to test a new fundamental hypothesis about a product,\\u00a0strategy, and engine of growth (Ries).\"}]", "demand paging": "[]", "software design description": "[]", "matrix organization": "[]", "acquisition strategy": "[]", "service level agreement": "[]", "planned process": "[]", "measure": "[{\"term\": \"relative size measure\", \"definition\": \"A means of expressing the overall size of an item where the\\u00a0absolute value is not considered, but the relative size of an item compared to other\\u00a0items is considered. For example, an item of size 2 is half the size of an item of size 4,\\u00a0but we have no idea how big an item of size 2 or 4 is in some absolute sense. See also\\u00a0ideal day, story point.\"}]", "array": "[]", "fault tolerant": "[]", "security kernel": "[]", "facility": "[]", "feature": "[{\"term\": \"feature\", \"definition\": \"1. A slice of business functionality that is meaningful to a customer or user.\\u00a02. Used by some to mean a medium-size user story that can and will be divided into\\u00a0a collection of smaller user stories that together will be implemented to deliver the\\u00a0value of a feature. See also theme, user story.\"}]", "modular decomposition": "[]", "rescoring": "[]"}}